
SR1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cc0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005e48  08005e48  00015e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005e90  08005e90  00015e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005e98  08005e98  00015e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005e9c  08005e9c  00015e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000018  20000000  08005ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000260  20000018  08005eb8  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000278  08005eb8  00020278  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000fcbe  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002427  00000000  00000000  0002fd06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000f58  00000000  00000000  00032130  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e10  00000000  00000000  00033088  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006d5c  00000000  00000000  00033e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004dc4  00000000  00000000  0003abf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003f9b8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003ecc  00000000  00000000  0003fa34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005e30 	.word	0x08005e30

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08005e30 	.word	0x08005e30

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004de:	2300      	movs	r3, #0
 80004e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e2:	4a0c      	ldr	r2, [pc, #48]	; (8000514 <HAL_Init+0x3c>)
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <HAL_Init+0x3c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ee:	2003      	movs	r0, #3
 80004f0:	f000 f91a 	bl	8000728 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004f4:	2000      	movs	r0, #0
 80004f6:	f000 f80f 	bl	8000518 <HAL_InitTick>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d002      	beq.n	8000506 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000500:	2301      	movs	r3, #1
 8000502:	71fb      	strb	r3, [r7, #7]
 8000504:	e001      	b.n	800050a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000506:	f005 f867 	bl	80055d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800050a:	79fb      	ldrb	r3, [r7, #7]
}
 800050c:	4618      	mov	r0, r3
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40022000 	.word	0x40022000

08000518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000520:	2300      	movs	r3, #0
 8000522:	73fb      	strb	r3, [r7, #15]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <HAL_InitTick+0x40>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a0c      	ldr	r2, [pc, #48]	; (800055c <HAL_InitTick+0x44>)
 800052a:	fba2 2303 	umull	r2, r3, r2, r3
 800052e:	099b      	lsrs	r3, r3, #6
 8000530:	4618      	mov	r0, r3
 8000532:	f000 f92e 	bl	8000792 <HAL_SYSTICK_Config>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d002      	beq.n	8000542 <HAL_InitTick+0x2a>
  {
    status = HAL_ERROR;
 800053c:	2301      	movs	r3, #1
 800053e:	73fb      	strb	r3, [r7, #15]
 8000540:	e005      	b.n	800054e <HAL_InitTick+0x36>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	6879      	ldr	r1, [r7, #4]
 8000546:	f04f 30ff 	mov.w	r0, #4294967295
 800054a:	f000 f8f8 	bl	800073e <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 800054e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000014 	.word	0x20000014
 800055c:	10624dd3 	.word	0x10624dd3

08000560 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  uwTick++;
 8000564:	4b04      	ldr	r3, [pc, #16]	; (8000578 <HAL_IncTick+0x18>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	3301      	adds	r3, #1
 800056a:	4a03      	ldr	r2, [pc, #12]	; (8000578 <HAL_IncTick+0x18>)
 800056c:	6013      	str	r3, [r2, #0]
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	20000040 	.word	0x20000040

0800057c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  return uwTick;
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <HAL_GetTick+0x14>)
 8000582:	681b      	ldr	r3, [r3, #0]
}
 8000584:	4618      	mov	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20000040 	.word	0x20000040

08000594 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f003 0307 	and.w	r3, r3, #7
 80005a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <NVIC_SetPriorityGrouping+0x44>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005aa:	68ba      	ldr	r2, [r7, #8]
 80005ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005b0:	4013      	ands	r3, r2
 80005b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005c6:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <NVIC_SetPriorityGrouping+0x44>)
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	60d3      	str	r3, [r2, #12]
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <NVIC_GetPriorityGrouping+0x18>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	0a1b      	lsrs	r3, r3, #8
 80005e6:	f003 0307 	and.w	r3, r3, #7
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	e000ed00 	.word	0xe000ed00

080005f8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000602:	4909      	ldr	r1, [pc, #36]	; (8000628 <NVIC_EnableIRQ+0x30>)
 8000604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000608:	095b      	lsrs	r3, r3, #5
 800060a:	79fa      	ldrb	r2, [r7, #7]
 800060c:	f002 021f 	and.w	r2, r2, #31
 8000610:	2001      	movs	r0, #1
 8000612:	fa00 f202 	lsl.w	r2, r0, r2
 8000616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	e000e100 	.word	0xe000e100

0800062c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	6039      	str	r1, [r7, #0]
 8000636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063c:	2b00      	cmp	r3, #0
 800063e:	da0b      	bge.n	8000658 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000640:	490d      	ldr	r1, [pc, #52]	; (8000678 <NVIC_SetPriority+0x4c>)
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	f003 030f 	and.w	r3, r3, #15
 8000648:	3b04      	subs	r3, #4
 800064a:	683a      	ldr	r2, [r7, #0]
 800064c:	b2d2      	uxtb	r2, r2
 800064e:	0112      	lsls	r2, r2, #4
 8000650:	b2d2      	uxtb	r2, r2
 8000652:	440b      	add	r3, r1
 8000654:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000656:	e009      	b.n	800066c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000658:	4908      	ldr	r1, [pc, #32]	; (800067c <NVIC_SetPriority+0x50>)
 800065a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065e:	683a      	ldr	r2, [r7, #0]
 8000660:	b2d2      	uxtb	r2, r2
 8000662:	0112      	lsls	r2, r2, #4
 8000664:	b2d2      	uxtb	r2, r2
 8000666:	440b      	add	r3, r1
 8000668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00
 800067c:	e000e100 	.word	0xe000e100

08000680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000680:	b480      	push	{r7}
 8000682:	b089      	sub	sp, #36	; 0x24
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f003 0307 	and.w	r3, r3, #7
 8000692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000694:	69fb      	ldr	r3, [r7, #28]
 8000696:	f1c3 0307 	rsb	r3, r3, #7
 800069a:	2b04      	cmp	r3, #4
 800069c:	bf28      	it	cs
 800069e:	2304      	movcs	r3, #4
 80006a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	3304      	adds	r3, #4
 80006a6:	2b06      	cmp	r3, #6
 80006a8:	d902      	bls.n	80006b0 <NVIC_EncodePriority+0x30>
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	3b03      	subs	r3, #3
 80006ae:	e000      	b.n	80006b2 <NVIC_EncodePriority+0x32>
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	2201      	movs	r2, #1
 80006b6:	69bb      	ldr	r3, [r7, #24]
 80006b8:	fa02 f303 	lsl.w	r3, r2, r3
 80006bc:	1e5a      	subs	r2, r3, #1
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	401a      	ands	r2, r3
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006c6:	2101      	movs	r1, #1
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	fa01 f303 	lsl.w	r3, r1, r3
 80006ce:	1e59      	subs	r1, r3, #1
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	4313      	orrs	r3, r2
         );
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3724      	adds	r7, #36	; 0x24
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
	...

080006e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	3b01      	subs	r3, #1
 80006f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006f4:	d301      	bcc.n	80006fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006f6:	2301      	movs	r3, #1
 80006f8:	e00f      	b.n	800071a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006fa:	4a0a      	ldr	r2, [pc, #40]	; (8000724 <SysTick_Config+0x40>)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	3b01      	subs	r3, #1
 8000700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000702:	210f      	movs	r1, #15
 8000704:	f04f 30ff 	mov.w	r0, #4294967295
 8000708:	f7ff ff90 	bl	800062c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <SysTick_Config+0x40>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000712:	4b04      	ldr	r3, [pc, #16]	; (8000724 <SysTick_Config+0x40>)
 8000714:	2207      	movs	r2, #7
 8000716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	e000e010 	.word	0xe000e010

08000728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f7ff ff2f 	bl	8000594 <NVIC_SetPriorityGrouping>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b086      	sub	sp, #24
 8000742:	af00      	add	r7, sp, #0
 8000744:	4603      	mov	r3, r0
 8000746:	60b9      	str	r1, [r7, #8]
 8000748:	607a      	str	r2, [r7, #4]
 800074a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000750:	f7ff ff44 	bl	80005dc <NVIC_GetPriorityGrouping>
 8000754:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	68b9      	ldr	r1, [r7, #8]
 800075a:	6978      	ldr	r0, [r7, #20]
 800075c:	f7ff ff90 	bl	8000680 <NVIC_EncodePriority>
 8000760:	4602      	mov	r2, r0
 8000762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000766:	4611      	mov	r1, r2
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ff5f 	bl	800062c <NVIC_SetPriority>
}
 800076e:	bf00      	nop
 8000770:	3718      	adds	r7, #24
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	b082      	sub	sp, #8
 800077a:	af00      	add	r7, sp, #0
 800077c:	4603      	mov	r3, r0
 800077e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff37 	bl	80005f8 <NVIC_EnableIRQ>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f7ff ffa2 	bl	80006e4 <SysTick_Config>
 80007a0:	4603      	mov	r3, r0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d101      	bne.n	80007be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e098      	b.n	80008f0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	461a      	mov	r2, r3
 80007c4:	4b4d      	ldr	r3, [pc, #308]	; (80008fc <HAL_DMA_Init+0x150>)
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d80f      	bhi.n	80007ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	461a      	mov	r2, r3
 80007d0:	4b4b      	ldr	r3, [pc, #300]	; (8000900 <HAL_DMA_Init+0x154>)
 80007d2:	4413      	add	r3, r2
 80007d4:	4a4b      	ldr	r2, [pc, #300]	; (8000904 <HAL_DMA_Init+0x158>)
 80007d6:	fba2 2303 	umull	r2, r3, r2, r3
 80007da:	091b      	lsrs	r3, r3, #4
 80007dc:	009a      	lsls	r2, r3, #2
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4a48      	ldr	r2, [pc, #288]	; (8000908 <HAL_DMA_Init+0x15c>)
 80007e6:	641a      	str	r2, [r3, #64]	; 0x40
 80007e8:	e00e      	b.n	8000808 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	461a      	mov	r2, r3
 80007f0:	4b46      	ldr	r3, [pc, #280]	; (800090c <HAL_DMA_Init+0x160>)
 80007f2:	4413      	add	r3, r2
 80007f4:	4a43      	ldr	r2, [pc, #268]	; (8000904 <HAL_DMA_Init+0x158>)
 80007f6:	fba2 2303 	umull	r2, r3, r2, r3
 80007fa:	091b      	lsrs	r3, r3, #4
 80007fc:	009a      	lsls	r2, r3, #2
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4a42      	ldr	r2, [pc, #264]	; (8000910 <HAL_DMA_Init+0x164>)
 8000806:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2202      	movs	r2, #2
 800080c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800081e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000822:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800082c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	691b      	ldr	r3, [r3, #16]
 8000832:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000838:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000844:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6a1b      	ldr	r3, [r3, #32]
 800084a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800084c:	68fa      	ldr	r2, [r7, #12]
 800084e:	4313      	orrs	r3, r2
 8000850:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000862:	d039      	beq.n	80008d8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	4a27      	ldr	r2, [pc, #156]	; (8000908 <HAL_DMA_Init+0x15c>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d11a      	bne.n	80008a4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800086e:	4929      	ldr	r1, [pc, #164]	; (8000914 <HAL_DMA_Init+0x168>)
 8000870:	4b28      	ldr	r3, [pc, #160]	; (8000914 <HAL_DMA_Init+0x168>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000878:	f003 031c 	and.w	r3, r3, #28
 800087c:	200f      	movs	r0, #15
 800087e:	fa00 f303 	lsl.w	r3, r0, r3
 8000882:	43db      	mvns	r3, r3
 8000884:	4013      	ands	r3, r2
 8000886:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000888:	4822      	ldr	r0, [pc, #136]	; (8000914 <HAL_DMA_Init+0x168>)
 800088a:	4b22      	ldr	r3, [pc, #136]	; (8000914 <HAL_DMA_Init+0x168>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6859      	ldr	r1, [r3, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	f003 031c 	and.w	r3, r3, #28
 800089a:	fa01 f303 	lsl.w	r3, r1, r3
 800089e:	4313      	orrs	r3, r2
 80008a0:	6003      	str	r3, [r0, #0]
 80008a2:	e019      	b.n	80008d8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80008a4:	491c      	ldr	r1, [pc, #112]	; (8000918 <HAL_DMA_Init+0x16c>)
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <HAL_DMA_Init+0x16c>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	f003 031c 	and.w	r3, r3, #28
 80008b2:	200f      	movs	r0, #15
 80008b4:	fa00 f303 	lsl.w	r3, r0, r3
 80008b8:	43db      	mvns	r3, r3
 80008ba:	4013      	ands	r3, r2
 80008bc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80008be:	4816      	ldr	r0, [pc, #88]	; (8000918 <HAL_DMA_Init+0x16c>)
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <HAL_DMA_Init+0x16c>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6859      	ldr	r1, [r3, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008cc:	f003 031c 	and.w	r3, r3, #28
 80008d0:	fa01 f303 	lsl.w	r3, r1, r3
 80008d4:	4313      	orrs	r3, r2
 80008d6:	6003      	str	r3, [r0, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2200      	movs	r2, #0
 80008dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2201      	movs	r2, #1
 80008e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2200      	movs	r2, #0
 80008ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	40020407 	.word	0x40020407
 8000900:	bffdfff8 	.word	0xbffdfff8
 8000904:	cccccccd 	.word	0xcccccccd
 8000908:	40020000 	.word	0x40020000
 800090c:	bffdfbf8 	.word	0xbffdfbf8
 8000910:	40020400 	.word	0x40020400
 8000914:	400200a8 	.word	0x400200a8
 8000918:	400204a8 	.word	0x400204a8

0800091c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
 8000928:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800092a:	2300      	movs	r3, #0
 800092c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000934:	2b01      	cmp	r3, #1
 8000936:	d101      	bne.n	800093c <HAL_DMA_Start_IT+0x20>
 8000938:	2302      	movs	r3, #2
 800093a:	e04b      	b.n	80009d4 <HAL_DMA_Start_IT+0xb8>
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	2201      	movs	r2, #1
 8000940:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800094a:	b2db      	uxtb	r3, r3
 800094c:	2b01      	cmp	r3, #1
 800094e:	d13a      	bne.n	80009c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	2202      	movs	r2, #2
 8000954:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	2200      	movs	r2, #0
 800095c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	6812      	ldr	r2, [r2, #0]
 8000966:	6812      	ldr	r2, [r2, #0]
 8000968:	f022 0201 	bic.w	r2, r2, #1
 800096c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	68b9      	ldr	r1, [r7, #8]
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f000 f921 	bl	8000bbc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	2b00      	cmp	r3, #0
 8000980:	d008      	beq.n	8000994 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	68fa      	ldr	r2, [r7, #12]
 8000988:	6812      	ldr	r2, [r2, #0]
 800098a:	6812      	ldr	r2, [r2, #0]
 800098c:	f042 020e 	orr.w	r2, r2, #14
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	e00f      	b.n	80009b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	68fa      	ldr	r2, [r7, #12]
 800099a:	6812      	ldr	r2, [r2, #0]
 800099c:	6812      	ldr	r2, [r2, #0]
 800099e:	f022 0204 	bic.w	r2, r2, #4
 80009a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	68fa      	ldr	r2, [r7, #12]
 80009aa:	6812      	ldr	r2, [r2, #0]
 80009ac:	6812      	ldr	r2, [r2, #0]
 80009ae:	f042 020a 	orr.w	r2, r2, #10
 80009b2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	68fa      	ldr	r2, [r7, #12]
 80009ba:	6812      	ldr	r2, [r2, #0]
 80009bc:	6812      	ldr	r2, [r2, #0]
 80009be:	f042 0201 	orr.w	r2, r2, #1
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	e005      	b.n	80009d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	2200      	movs	r2, #0
 80009ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80009ce:	2302      	movs	r3, #2
 80009d0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80009d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009e4:	2300      	movs	r3, #0
 80009e6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d005      	beq.n	8000a00 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2204      	movs	r2, #4
 80009f8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	73fb      	strb	r3, [r7, #15]
 80009fe:	e029      	b.n	8000a54 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	6812      	ldr	r2, [r2, #0]
 8000a08:	6812      	ldr	r2, [r2, #0]
 8000a0a:	f022 020e 	bic.w	r2, r2, #14
 8000a0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	6812      	ldr	r2, [r2, #0]
 8000a18:	6812      	ldr	r2, [r2, #0]
 8000a1a:	f022 0201 	bic.w	r2, r2, #1
 8000a1e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000a28:	f002 021c 	and.w	r2, r2, #28
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a32:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2201      	movs	r2, #1
 8000a38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d003      	beq.n	8000a54 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	4798      	blx	r3
    }
  }
  return status;
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b084      	sub	sp, #16
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	f003 031c 	and.w	r3, r3, #28
 8000a7e:	2204      	movs	r2, #4
 8000a80:	409a      	lsls	r2, r3
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	4013      	ands	r3, r2
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d026      	beq.n	8000ad8 <HAL_DMA_IRQHandler+0x7a>
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	f003 0304 	and.w	r3, r3, #4
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d021      	beq.n	8000ad8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f003 0320 	and.w	r3, r3, #32
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d107      	bne.n	8000ab2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	6812      	ldr	r2, [r2, #0]
 8000aaa:	6812      	ldr	r2, [r2, #0]
 8000aac:	f022 0204 	bic.w	r2, r2, #4
 8000ab0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000aba:	f002 021c 	and.w	r2, r2, #28
 8000abe:	2104      	movs	r1, #4
 8000ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d071      	beq.n	8000bb2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8000ad6:	e06c      	b.n	8000bb2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000adc:	f003 031c 	and.w	r3, r3, #28
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	409a      	lsls	r2, r3
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d02e      	beq.n	8000b4a <HAL_DMA_IRQHandler+0xec>
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d029      	beq.n	8000b4a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f003 0320 	and.w	r3, r3, #32
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d10b      	bne.n	8000b1c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	6812      	ldr	r2, [r2, #0]
 8000b0c:	6812      	ldr	r2, [r2, #0]
 8000b0e:	f022 020a 	bic.w	r2, r2, #10
 8000b12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2201      	movs	r2, #1
 8000b18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000b24:	f002 021c 	and.w	r2, r2, #28
 8000b28:	2102      	movs	r1, #2
 8000b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b2e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2200      	movs	r2, #0
 8000b34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d038      	beq.n	8000bb2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000b48:	e033      	b.n	8000bb2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	f003 031c 	and.w	r3, r3, #28
 8000b52:	2208      	movs	r2, #8
 8000b54:	409a      	lsls	r2, r3
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d02a      	beq.n	8000bb4 <HAL_DMA_IRQHandler+0x156>
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	f003 0308 	and.w	r3, r3, #8
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d025      	beq.n	8000bb4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	6812      	ldr	r2, [r2, #0]
 8000b70:	6812      	ldr	r2, [r2, #0]
 8000b72:	f022 020e 	bic.w	r2, r2, #14
 8000b76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000b80:	f002 021c 	and.w	r2, r2, #28
 8000b84:	2101      	movs	r1, #1
 8000b86:	fa01 f202 	lsl.w	r2, r1, r2
 8000b8a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2201      	movs	r2, #1
 8000b90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2201      	movs	r2, #1
 8000b96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d004      	beq.n	8000bb4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000bb2:	bf00      	nop
 8000bb4:	bf00      	nop
}
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
 8000bc8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000bd2:	f002 021c 	and.w	r2, r2, #28
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bdc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	683a      	ldr	r2, [r7, #0]
 8000be4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	2b10      	cmp	r3, #16
 8000bec:	d108      	bne.n	8000c00 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000bfe:	e007      	b.n	8000c10 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	68ba      	ldr	r2, [r7, #8]
 8000c06:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	60da      	str	r2, [r3, #12]
}
 8000c10:	bf00      	nop
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b087      	sub	sp, #28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2a:	e17f      	b.n	8000f2c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	2101      	movs	r1, #1
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	fa01 f303 	lsl.w	r3, r1, r3
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	f000 8171 	beq.w	8000f26 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d003      	beq.n	8000c54 <HAL_GPIO_Init+0x38>
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	2b12      	cmp	r3, #18
 8000c52:	d123      	bne.n	8000c9c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	08da      	lsrs	r2, r3, #3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3208      	adds	r2, #8
 8000c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c60:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	f003 0307 	and.w	r3, r3, #7
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	220f      	movs	r2, #15
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	691a      	ldr	r2, [r3, #16]
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	08da      	lsrs	r2, r3, #3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3208      	adds	r2, #8
 8000c96:	6939      	ldr	r1, [r7, #16]
 8000c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 0203 	and.w	r2, r3, #3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d00b      	beq.n	8000cf0 <HAL_GPIO_Init+0xd4>
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d007      	beq.n	8000cf0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ce4:	2b11      	cmp	r3, #17
 8000ce6:	d003      	beq.n	8000cf0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b12      	cmp	r3, #18
 8000cee:	d130      	bne.n	8000d52 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	68da      	ldr	r2, [r3, #12]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d26:	2201      	movs	r2, #1
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	091b      	lsrs	r3, r3, #4
 8000d3c:	f003 0201 	and.w	r2, r3, #1
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 0303 	and.w	r3, r3, #3
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	d118      	bne.n	8000d90 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d64:	2201      	movs	r2, #1
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	08db      	lsrs	r3, r3, #3
 8000d7a:	f003 0201 	and.w	r2, r3, #1
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	689a      	ldr	r2, [r3, #8]
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	f000 80ac 	beq.w	8000f26 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	4a5e      	ldr	r2, [pc, #376]	; (8000f48 <HAL_GPIO_Init+0x32c>)
 8000dd0:	4b5d      	ldr	r3, [pc, #372]	; (8000f48 <HAL_GPIO_Init+0x32c>)
 8000dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000dda:	4b5b      	ldr	r3, [pc, #364]	; (8000f48 <HAL_GPIO_Init+0x32c>)
 8000ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000de6:	4a59      	ldr	r2, [pc, #356]	; (8000f4c <HAL_GPIO_Init+0x330>)
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	089b      	lsrs	r3, r3, #2
 8000dec:	3302      	adds	r3, #2
 8000dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	f003 0303 	and.w	r3, r3, #3
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	220f      	movs	r2, #15
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e10:	d025      	beq.n	8000e5e <HAL_GPIO_Init+0x242>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a4e      	ldr	r2, [pc, #312]	; (8000f50 <HAL_GPIO_Init+0x334>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d01f      	beq.n	8000e5a <HAL_GPIO_Init+0x23e>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a4d      	ldr	r2, [pc, #308]	; (8000f54 <HAL_GPIO_Init+0x338>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d019      	beq.n	8000e56 <HAL_GPIO_Init+0x23a>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a4c      	ldr	r2, [pc, #304]	; (8000f58 <HAL_GPIO_Init+0x33c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d013      	beq.n	8000e52 <HAL_GPIO_Init+0x236>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a4b      	ldr	r2, [pc, #300]	; (8000f5c <HAL_GPIO_Init+0x340>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d00d      	beq.n	8000e4e <HAL_GPIO_Init+0x232>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a4a      	ldr	r2, [pc, #296]	; (8000f60 <HAL_GPIO_Init+0x344>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d007      	beq.n	8000e4a <HAL_GPIO_Init+0x22e>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a49      	ldr	r2, [pc, #292]	; (8000f64 <HAL_GPIO_Init+0x348>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d101      	bne.n	8000e46 <HAL_GPIO_Init+0x22a>
 8000e42:	2306      	movs	r3, #6
 8000e44:	e00c      	b.n	8000e60 <HAL_GPIO_Init+0x244>
 8000e46:	2307      	movs	r3, #7
 8000e48:	e00a      	b.n	8000e60 <HAL_GPIO_Init+0x244>
 8000e4a:	2305      	movs	r3, #5
 8000e4c:	e008      	b.n	8000e60 <HAL_GPIO_Init+0x244>
 8000e4e:	2304      	movs	r3, #4
 8000e50:	e006      	b.n	8000e60 <HAL_GPIO_Init+0x244>
 8000e52:	2303      	movs	r3, #3
 8000e54:	e004      	b.n	8000e60 <HAL_GPIO_Init+0x244>
 8000e56:	2302      	movs	r3, #2
 8000e58:	e002      	b.n	8000e60 <HAL_GPIO_Init+0x244>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e000      	b.n	8000e60 <HAL_GPIO_Init+0x244>
 8000e5e:	2300      	movs	r3, #0
 8000e60:	697a      	ldr	r2, [r7, #20]
 8000e62:	f002 0203 	and.w	r2, r2, #3
 8000e66:	0092      	lsls	r2, r2, #2
 8000e68:	4093      	lsls	r3, r2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e70:	4936      	ldr	r1, [pc, #216]	; (8000f4c <HAL_GPIO_Init+0x330>)
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	089b      	lsrs	r3, r3, #2
 8000e76:	3302      	adds	r3, #2
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e7e:	4b3a      	ldr	r3, [pc, #232]	; (8000f68 <HAL_GPIO_Init+0x34c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	43db      	mvns	r3, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ea2:	4a31      	ldr	r2, [pc, #196]	; (8000f68 <HAL_GPIO_Init+0x34c>)
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000ea8:	4b2f      	ldr	r3, [pc, #188]	; (8000f68 <HAL_GPIO_Init+0x34c>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ecc:	4a26      	ldr	r2, [pc, #152]	; (8000f68 <HAL_GPIO_Init+0x34c>)
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ed2:	4b25      	ldr	r3, [pc, #148]	; (8000f68 <HAL_GPIO_Init+0x34c>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ef6:	4a1c      	ldr	r2, [pc, #112]	; (8000f68 <HAL_GPIO_Init+0x34c>)
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000efc:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <HAL_GPIO_Init+0x34c>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	43db      	mvns	r3, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d003      	beq.n	8000f20 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f20:	4a11      	ldr	r2, [pc, #68]	; (8000f68 <HAL_GPIO_Init+0x34c>)
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa22 f303 	lsr.w	r3, r2, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f47f ae78 	bne.w	8000c2c <HAL_GPIO_Init+0x10>
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	371c      	adds	r7, #28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	40010000 	.word	0x40010000
 8000f50:	48000400 	.word	0x48000400
 8000f54:	48000800 	.word	0x48000800
 8000f58:	48000c00 	.word	0x48000c00
 8000f5c:	48001000 	.word	0x48001000
 8000f60:	48001400 	.word	0x48001400
 8000f64:	48001800 	.word	0x48001800
 8000f68:	40010400 	.word	0x40010400

08000f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	807b      	strh	r3, [r7, #2]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f7c:	787b      	ldrb	r3, [r7, #1]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f82:	887a      	ldrh	r2, [r7, #2]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f88:	e002      	b.n	8000f90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f8a:	887a      	ldrh	r2, [r7, #2]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40007000 	.word	0x40007000

08000fb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fc6:	d130      	bne.n	800102a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fc8:	4b23      	ldr	r3, [pc, #140]	; (8001058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fd4:	d038      	beq.n	8001048 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd6:	4a20      	ldr	r2, [pc, #128]	; (8001058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fe0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fe4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000fe6:	4b1d      	ldr	r3, [pc, #116]	; (800105c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2232      	movs	r2, #50	; 0x32
 8000fec:	fb02 f303 	mul.w	r3, r2, r3
 8000ff0:	4a1b      	ldr	r2, [pc, #108]	; (8001060 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff6:	0c9b      	lsrs	r3, r3, #18
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ffc:	e002      	b.n	8001004 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	3b01      	subs	r3, #1
 8001002:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001004:	4b14      	ldr	r3, [pc, #80]	; (8001058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800100c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001010:	d102      	bne.n	8001018 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1f2      	bne.n	8000ffe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001024:	d110      	bne.n	8001048 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e00f      	b.n	800104a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001036:	d007      	beq.n	8001048 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001038:	4a07      	ldr	r2, [pc, #28]	; (8001058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800103a:	4b07      	ldr	r3, [pc, #28]	; (8001058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001042:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001046:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40007000 	.word	0x40007000
 800105c:	20000014 	.word	0x20000014
 8001060:	431bde83 	.word	0x431bde83

08001064 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_oscsource;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e353      	b.n	800171e <HAL_RCC_OscConfig+0x6ba>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001076:	4ba3      	ldr	r3, [pc, #652]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	f003 030c 	and.w	r3, r3, #12
 800107e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001080:	4ba0      	ldr	r3, [pc, #640]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0310 	and.w	r3, r3, #16
 8001092:	2b00      	cmp	r3, #0
 8001094:	f000 80df 	beq.w	8001256 <HAL_RCC_OscConfig+0x1f2>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d007      	beq.n	80010ae <HAL_RCC_OscConfig+0x4a>
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	2b0c      	cmp	r3, #12
 80010a2:	f040 8086 	bne.w	80011b2 <HAL_RCC_OscConfig+0x14e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	f040 8082 	bne.w	80011b2 <HAL_RCC_OscConfig+0x14e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010ae:	4b95      	ldr	r3, [pc, #596]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d005      	beq.n	80010c6 <HAL_RCC_OscConfig+0x62>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e32b      	b.n	800171e <HAL_RCC_OscConfig+0x6ba>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a1a      	ldr	r2, [r3, #32]
 80010ca:	4b8e      	ldr	r3, [pc, #568]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d004      	beq.n	80010e0 <HAL_RCC_OscConfig+0x7c>
 80010d6:	4b8b      	ldr	r3, [pc, #556]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010de:	e005      	b.n	80010ec <HAL_RCC_OscConfig+0x88>
 80010e0:	4b88      	ldr	r3, [pc, #544]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 80010e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010e6:	091b      	lsrs	r3, r3, #4
 80010e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d923      	bls.n	8001138 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 fccb 	bl	8001a90 <RCC_SetFlashLatencyFromMSIRange>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e30c      	b.n	800171e <HAL_RCC_OscConfig+0x6ba>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001104:	4a7f      	ldr	r2, [pc, #508]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 8001106:	4b7f      	ldr	r3, [pc, #508]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f043 0308 	orr.w	r3, r3, #8
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	497c      	ldr	r1, [pc, #496]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 8001112:	4b7c      	ldr	r3, [pc, #496]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a1b      	ldr	r3, [r3, #32]
 800111e:	4313      	orrs	r3, r2
 8001120:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001122:	4978      	ldr	r1, [pc, #480]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 8001124:	4b77      	ldr	r3, [pc, #476]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69db      	ldr	r3, [r3, #28]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	4313      	orrs	r3, r2
 8001134:	604b      	str	r3, [r1, #4]
 8001136:	e022      	b.n	800117e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001138:	4a72      	ldr	r2, [pc, #456]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 800113a:	4b72      	ldr	r3, [pc, #456]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f043 0308 	orr.w	r3, r3, #8
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	496f      	ldr	r1, [pc, #444]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 8001146:	4b6f      	ldr	r3, [pc, #444]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a1b      	ldr	r3, [r3, #32]
 8001152:	4313      	orrs	r3, r2
 8001154:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001156:	496b      	ldr	r1, [pc, #428]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 8001158:	4b6a      	ldr	r3, [pc, #424]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	69db      	ldr	r3, [r3, #28]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	4313      	orrs	r3, r2
 8001168:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a1b      	ldr	r3, [r3, #32]
 800116e:	4618      	mov	r0, r3
 8001170:	f000 fc8e 	bl	8001a90 <RCC_SetFlashLatencyFromMSIRange>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e2cf      	b.n	800171e <HAL_RCC_OscConfig+0x6ba>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800117e:	f000 fbb3 	bl	80018e8 <HAL_RCC_GetSysClockFreq>
 8001182:	4601      	mov	r1, r0
 8001184:	4b5f      	ldr	r3, [pc, #380]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	091b      	lsrs	r3, r3, #4
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	4a5e      	ldr	r2, [pc, #376]	; (8001308 <HAL_RCC_OscConfig+0x2a4>)
 8001190:	5cd3      	ldrb	r3, [r2, r3]
 8001192:	f003 031f 	and.w	r3, r3, #31
 8001196:	fa21 f303 	lsr.w	r3, r1, r3
 800119a:	4a5c      	ldr	r2, [pc, #368]	; (800130c <HAL_RCC_OscConfig+0x2a8>)
 800119c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800119e:	2000      	movs	r0, #0
 80011a0:	f7ff f9ba 	bl	8000518 <HAL_InitTick>
 80011a4:	4603      	mov	r3, r0
 80011a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d052      	beq.n	8001254 <HAL_RCC_OscConfig+0x1f0>
        {
          return status;
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	e2b5      	b.n	800171e <HAL_RCC_OscConfig+0x6ba>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d032      	beq.n	8001220 <HAL_RCC_OscConfig+0x1bc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011ba:	4a52      	ldr	r2, [pc, #328]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 80011bc:	4b51      	ldr	r3, [pc, #324]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011c6:	f7ff f9d9 	bl	800057c <HAL_GetTick>
 80011ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011cc:	e008      	b.n	80011e0 <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011ce:	f7ff f9d5 	bl	800057c <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e29e      	b.n	800171e <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011e0:	4b48      	ldr	r3, [pc, #288]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0f0      	beq.n	80011ce <HAL_RCC_OscConfig+0x16a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011ec:	4a45      	ldr	r2, [pc, #276]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 80011ee:	4b45      	ldr	r3, [pc, #276]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f043 0308 	orr.w	r3, r3, #8
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	4942      	ldr	r1, [pc, #264]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 80011fa:	4b42      	ldr	r3, [pc, #264]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a1b      	ldr	r3, [r3, #32]
 8001206:	4313      	orrs	r3, r2
 8001208:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800120a:	493e      	ldr	r1, [pc, #248]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 800120c:	4b3d      	ldr	r3, [pc, #244]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69db      	ldr	r3, [r3, #28]
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	4313      	orrs	r3, r2
 800121c:	604b      	str	r3, [r1, #4]
 800121e:	e01a      	b.n	8001256 <HAL_RCC_OscConfig+0x1f2>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001220:	4a38      	ldr	r2, [pc, #224]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 8001222:	4b38      	ldr	r3, [pc, #224]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f023 0301 	bic.w	r3, r3, #1
 800122a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800122c:	f7ff f9a6 	bl	800057c <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x1e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001234:	f7ff f9a2 	bl	800057c <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x1e2>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e26b      	b.n	800171e <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001246:	4b2f      	ldr	r3, [pc, #188]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0x1d0>
 8001252:	e000      	b.n	8001256 <HAL_RCC_OscConfig+0x1f2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001254:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d072      	beq.n	8001348 <HAL_RCC_OscConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	2b08      	cmp	r3, #8
 8001266:	d005      	beq.n	8001274 <HAL_RCC_OscConfig+0x210>
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	2b0c      	cmp	r3, #12
 800126c:	d10e      	bne.n	800128c <HAL_RCC_OscConfig+0x228>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	2b03      	cmp	r3, #3
 8001272:	d10b      	bne.n	800128c <HAL_RCC_OscConfig+0x228>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	4b23      	ldr	r3, [pc, #140]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d062      	beq.n	8001346 <HAL_RCC_OscConfig+0x2e2>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d15e      	bne.n	8001346 <HAL_RCC_OscConfig+0x2e2>
      {
        return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e248      	b.n	800171e <HAL_RCC_OscConfig+0x6ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001294:	d106      	bne.n	80012a4 <HAL_RCC_OscConfig+0x240>
 8001296:	4a1b      	ldr	r2, [pc, #108]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 8001298:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e01d      	b.n	80012e0 <HAL_RCC_OscConfig+0x27c>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012ac:	d10c      	bne.n	80012c8 <HAL_RCC_OscConfig+0x264>
 80012ae:	4a15      	ldr	r2, [pc, #84]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	4a12      	ldr	r2, [pc, #72]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e00b      	b.n	80012e0 <HAL_RCC_OscConfig+0x27c>
 80012c8:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <HAL_RCC_OscConfig+0x2a0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d01a      	beq.n	800131e <HAL_RCC_OscConfig+0x2ba>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e8:	f7ff f948 	bl	800057c <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ee:	e00f      	b.n	8001310 <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff f944 	bl	800057c <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	; 0x64
 80012fc:	d908      	bls.n	8001310 <HAL_RCC_OscConfig+0x2ac>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e20d      	b.n	800171e <HAL_RCC_OscConfig+0x6ba>
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000
 8001308:	08005e48 	.word	0x08005e48
 800130c:	20000014 	.word	0x20000014
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001310:	4bae      	ldr	r3, [pc, #696]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0e9      	beq.n	80012f0 <HAL_RCC_OscConfig+0x28c>
 800131c:	e014      	b.n	8001348 <HAL_RCC_OscConfig+0x2e4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131e:	f7ff f92d 	bl	800057c <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x2d4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001326:	f7ff f929 	bl	800057c <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b64      	cmp	r3, #100	; 0x64
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x2d4>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e1f2      	b.n	800171e <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001338:	4ba4      	ldr	r3, [pc, #656]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f0      	bne.n	8001326 <HAL_RCC_OscConfig+0x2c2>
 8001344:	e000      	b.n	8001348 <HAL_RCC_OscConfig+0x2e4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001346:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d060      	beq.n	8001416 <HAL_RCC_OscConfig+0x3b2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	2b04      	cmp	r3, #4
 8001358:	d005      	beq.n	8001366 <HAL_RCC_OscConfig+0x302>
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	2b0c      	cmp	r3, #12
 800135e:	d119      	bne.n	8001394 <HAL_RCC_OscConfig+0x330>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	2b02      	cmp	r3, #2
 8001364:	d116      	bne.n	8001394 <HAL_RCC_OscConfig+0x330>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001366:	4b99      	ldr	r3, [pc, #612]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800136e:	2b00      	cmp	r3, #0
 8001370:	d005      	beq.n	800137e <HAL_RCC_OscConfig+0x31a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e1cf      	b.n	800171e <HAL_RCC_OscConfig+0x6ba>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137e:	4993      	ldr	r1, [pc, #588]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 8001380:	4b92      	ldr	r3, [pc, #584]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	061b      	lsls	r3, r3, #24
 800138e:	4313      	orrs	r3, r2
 8001390:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001392:	e040      	b.n	8001416 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d023      	beq.n	80013e4 <HAL_RCC_OscConfig+0x380>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800139c:	4a8b      	ldr	r2, [pc, #556]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 800139e:	4b8b      	ldr	r3, [pc, #556]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a8:	f7ff f8e8 	bl	800057c <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b0:	f7ff f8e4 	bl	800057c <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e1ad      	b.n	800171e <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013c2:	4b82      	ldr	r3, [pc, #520]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f0      	beq.n	80013b0 <HAL_RCC_OscConfig+0x34c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ce:	497f      	ldr	r1, [pc, #508]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 80013d0:	4b7e      	ldr	r3, [pc, #504]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	061b      	lsls	r3, r3, #24
 80013de:	4313      	orrs	r3, r2
 80013e0:	604b      	str	r3, [r1, #4]
 80013e2:	e018      	b.n	8001416 <HAL_RCC_OscConfig+0x3b2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e4:	4a79      	ldr	r2, [pc, #484]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 80013e6:	4b79      	ldr	r3, [pc, #484]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f0:	f7ff f8c4 	bl	800057c <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f8:	f7ff f8c0 	bl	800057c <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e189      	b.n	800171e <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800140a:	4b70      	ldr	r3, [pc, #448]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d03c      	beq.n	800149c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d01c      	beq.n	8001464 <HAL_RCC_OscConfig+0x400>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142a:	4a68      	ldr	r2, [pc, #416]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 800142c:	4b67      	ldr	r3, [pc, #412]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 800142e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143a:	f7ff f89f 	bl	800057c <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001442:	f7ff f89b 	bl	800057c <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e164      	b.n	800171e <HAL_RCC_OscConfig+0x6ba>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001454:	4b5d      	ldr	r3, [pc, #372]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 8001456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0ef      	beq.n	8001442 <HAL_RCC_OscConfig+0x3de>
 8001462:	e01b      	b.n	800149c <HAL_RCC_OscConfig+0x438>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001464:	4a59      	ldr	r2, [pc, #356]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 8001466:	4b59      	ldr	r3, [pc, #356]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 8001468:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800146c:	f023 0301 	bic.w	r3, r3, #1
 8001470:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001474:	f7ff f882 	bl	800057c <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800147c:	f7ff f87e 	bl	800057c <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e147      	b.n	800171e <HAL_RCC_OscConfig+0x6ba>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800148e:	4b4f      	ldr	r3, [pc, #316]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 8001490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1ef      	bne.n	800147c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80a5 	beq.w	80015f4 <HAL_RCC_OscConfig+0x590>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014ae:	4b47      	ldr	r3, [pc, #284]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 80014b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10d      	bne.n	80014d6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	4a44      	ldr	r2, [pc, #272]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 80014bc:	4b43      	ldr	r3, [pc, #268]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 80014be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c4:	6593      	str	r3, [r2, #88]	; 0x58
 80014c6:	4b41      	ldr	r3, [pc, #260]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 80014c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014d2:	2301      	movs	r3, #1
 80014d4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014d6:	4b3e      	ldr	r3, [pc, #248]	; (80015d0 <HAL_RCC_OscConfig+0x56c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d118      	bne.n	8001514 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014e2:	4a3b      	ldr	r2, [pc, #236]	; (80015d0 <HAL_RCC_OscConfig+0x56c>)
 80014e4:	4b3a      	ldr	r3, [pc, #232]	; (80015d0 <HAL_RCC_OscConfig+0x56c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ee:	f7ff f845 	bl	800057c <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f6:	f7ff f841 	bl	800057c <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e10a      	b.n	800171e <HAL_RCC_OscConfig+0x6ba>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001508:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <HAL_RCC_OscConfig+0x56c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0f0      	beq.n	80014f6 <HAL_RCC_OscConfig+0x492>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d108      	bne.n	800152e <HAL_RCC_OscConfig+0x4ca>
 800151c:	4a2b      	ldr	r2, [pc, #172]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 800151e:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 8001520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800152c:	e024      	b.n	8001578 <HAL_RCC_OscConfig+0x514>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b05      	cmp	r3, #5
 8001534:	d110      	bne.n	8001558 <HAL_RCC_OscConfig+0x4f4>
 8001536:	4a25      	ldr	r2, [pc, #148]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 8001538:	4b24      	ldr	r3, [pc, #144]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 800153a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153e:	f043 0304 	orr.w	r3, r3, #4
 8001542:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001546:	4a21      	ldr	r2, [pc, #132]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 8001548:	4b20      	ldr	r3, [pc, #128]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 800154a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001556:	e00f      	b.n	8001578 <HAL_RCC_OscConfig+0x514>
 8001558:	4a1c      	ldr	r2, [pc, #112]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 800155a:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 800155c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001568:	4a18      	ldr	r2, [pc, #96]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 800156a:	4b18      	ldr	r3, [pc, #96]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 800156c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001570:	f023 0304 	bic.w	r3, r3, #4
 8001574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d016      	beq.n	80015ae <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001580:	f7fe fffc 	bl	800057c <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001586:	e00a      	b.n	800159e <HAL_RCC_OscConfig+0x53a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001588:	f7fe fff8 	bl	800057c <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	f241 3288 	movw	r2, #5000	; 0x1388
 8001596:	4293      	cmp	r3, r2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x53a>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e0bf      	b.n	800171e <HAL_RCC_OscConfig+0x6ba>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_RCC_OscConfig+0x568>)
 80015a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0ed      	beq.n	8001588 <HAL_RCC_OscConfig+0x524>
 80015ac:	e019      	b.n	80015e2 <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ae:	f7fe ffe5 	bl	800057c <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015b4:	e00e      	b.n	80015d4 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b6:	f7fe ffe1 	bl	800057c <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d905      	bls.n	80015d4 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e0a8      	b.n	800171e <HAL_RCC_OscConfig+0x6ba>
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015d4:	4b54      	ldr	r3, [pc, #336]	; (8001728 <HAL_RCC_OscConfig+0x6c4>)
 80015d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1e9      	bne.n	80015b6 <HAL_RCC_OscConfig+0x552>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015e2:	7ffb      	ldrb	r3, [r7, #31]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d105      	bne.n	80015f4 <HAL_RCC_OscConfig+0x590>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015e8:	4a4f      	ldr	r2, [pc, #316]	; (8001728 <HAL_RCC_OscConfig+0x6c4>)
 80015ea:	4b4f      	ldr	r3, [pc, #316]	; (8001728 <HAL_RCC_OscConfig+0x6c4>)
 80015ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015f2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 808f 	beq.w	800171c <HAL_RCC_OscConfig+0x6b8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	2b0c      	cmp	r3, #12
 8001602:	f000 8089 	beq.w	8001718 <HAL_RCC_OscConfig+0x6b4>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160a:	2b02      	cmp	r3, #2
 800160c:	d156      	bne.n	80016bc <HAL_RCC_OscConfig+0x658>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160e:	4a46      	ldr	r2, [pc, #280]	; (8001728 <HAL_RCC_OscConfig+0x6c4>)
 8001610:	4b45      	ldr	r3, [pc, #276]	; (8001728 <HAL_RCC_OscConfig+0x6c4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001618:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161a:	f7fe ffaf 	bl	800057c <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001622:	f7fe ffab 	bl	800057c <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e074      	b.n	800171e <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001634:	4b3c      	ldr	r3, [pc, #240]	; (8001728 <HAL_RCC_OscConfig+0x6c4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f0      	bne.n	8001622 <HAL_RCC_OscConfig+0x5be>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001640:	4939      	ldr	r1, [pc, #228]	; (8001728 <HAL_RCC_OscConfig+0x6c4>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	3b01      	subs	r3, #1
 8001648:	011a      	lsls	r2, r3, #4
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	431a      	orrs	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001656:	091b      	lsrs	r3, r3, #4
 8001658:	045b      	lsls	r3, r3, #17
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	431a      	orrs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001666:	085b      	lsrs	r3, r3, #1
 8001668:	3b01      	subs	r3, #1
 800166a:	055b      	lsls	r3, r3, #21
 800166c:	431a      	orrs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	085b      	lsrs	r3, r3, #1
 8001674:	3b01      	subs	r3, #1
 8001676:	065b      	lsls	r3, r3, #25
 8001678:	4313      	orrs	r3, r2
 800167a:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800167c:	4a2a      	ldr	r2, [pc, #168]	; (8001728 <HAL_RCC_OscConfig+0x6c4>)
 800167e:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <HAL_RCC_OscConfig+0x6c4>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001686:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001688:	4a27      	ldr	r2, [pc, #156]	; (8001728 <HAL_RCC_OscConfig+0x6c4>)
 800168a:	4b27      	ldr	r3, [pc, #156]	; (8001728 <HAL_RCC_OscConfig+0x6c4>)
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001692:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001694:	f7fe ff72 	bl	800057c <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x64a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800169c:	f7fe ff6e 	bl	800057c <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x64a>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e037      	b.n	800171e <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ae:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <HAL_RCC_OscConfig+0x6c4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0x638>
 80016ba:	e02f      	b.n	800171c <HAL_RCC_OscConfig+0x6b8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016bc:	4a1a      	ldr	r2, [pc, #104]	; (8001728 <HAL_RCC_OscConfig+0x6c4>)
 80016be:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <HAL_RCC_OscConfig+0x6c4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016c6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80016c8:	4b17      	ldr	r3, [pc, #92]	; (8001728 <HAL_RCC_OscConfig+0x6c4>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d105      	bne.n	80016e0 <HAL_RCC_OscConfig+0x67c>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80016d4:	4a14      	ldr	r2, [pc, #80]	; (8001728 <HAL_RCC_OscConfig+0x6c4>)
 80016d6:	4b14      	ldr	r3, [pc, #80]	; (8001728 <HAL_RCC_OscConfig+0x6c4>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	f023 0303 	bic.w	r3, r3, #3
 80016de:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80016e0:	4a11      	ldr	r2, [pc, #68]	; (8001728 <HAL_RCC_OscConfig+0x6c4>)
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <HAL_RCC_OscConfig+0x6c4>)
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80016ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ee:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f0:	f7fe ff44 	bl	800057c <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x6a6>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f8:	f7fe ff40 	bl	800057c <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e009      	b.n	800171e <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800170a:	4b07      	ldr	r3, [pc, #28]	; (8001728 <HAL_RCC_OscConfig+0x6c4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x694>
 8001716:	e001      	b.n	800171c <HAL_RCC_OscConfig+0x6b8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <HAL_RCC_OscConfig+0x6ba>
    }
  }
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3720      	adds	r7, #32
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000

0800172c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e0c6      	b.n	80018ce <HAL_RCC_ClockConfig+0x1a2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001740:	4b65      	ldr	r3, [pc, #404]	; (80018d8 <HAL_RCC_ClockConfig+0x1ac>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0207 	and.w	r2, r3, #7
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d210      	bcs.n	8001770 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174e:	4962      	ldr	r1, [pc, #392]	; (80018d8 <HAL_RCC_ClockConfig+0x1ac>)
 8001750:	4b61      	ldr	r3, [pc, #388]	; (80018d8 <HAL_RCC_ClockConfig+0x1ac>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f023 0207 	bic.w	r2, r3, #7
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	4313      	orrs	r3, r2
 800175c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800175e:	4b5e      	ldr	r3, [pc, #376]	; (80018d8 <HAL_RCC_ClockConfig+0x1ac>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0207 	and.w	r2, r3, #7
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d001      	beq.n	8001770 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e0ae      	b.n	80018ce <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b00      	cmp	r3, #0
 800177a:	d04c      	beq.n	8001816 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b03      	cmp	r3, #3
 8001782:	d107      	bne.n	8001794 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001784:	4b55      	ldr	r3, [pc, #340]	; (80018dc <HAL_RCC_ClockConfig+0x1b0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d121      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e09c      	b.n	80018ce <HAL_RCC_ClockConfig+0x1a2>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b02      	cmp	r3, #2
 800179a:	d107      	bne.n	80017ac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800179c:	4b4f      	ldr	r3, [pc, #316]	; (80018dc <HAL_RCC_ClockConfig+0x1b0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d115      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e090      	b.n	80018ce <HAL_RCC_ClockConfig+0x1a2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d107      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017b4:	4b49      	ldr	r3, [pc, #292]	; (80018dc <HAL_RCC_ClockConfig+0x1b0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d109      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e084      	b.n	80018ce <HAL_RCC_ClockConfig+0x1a2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017c4:	4b45      	ldr	r3, [pc, #276]	; (80018dc <HAL_RCC_ClockConfig+0x1b0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e07c      	b.n	80018ce <HAL_RCC_ClockConfig+0x1a2>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017d4:	4941      	ldr	r1, [pc, #260]	; (80018dc <HAL_RCC_ClockConfig+0x1b0>)
 80017d6:	4b41      	ldr	r3, [pc, #260]	; (80018dc <HAL_RCC_ClockConfig+0x1b0>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f023 0203 	bic.w	r2, r3, #3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017e6:	f7fe fec9 	bl	800057c <HAL_GetTick>
 80017ea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ec:	e00a      	b.n	8001804 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ee:	f7fe fec5 	bl	800057c <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e064      	b.n	80018ce <HAL_RCC_ClockConfig+0x1a2>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001804:	4b35      	ldr	r3, [pc, #212]	; (80018dc <HAL_RCC_ClockConfig+0x1b0>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 020c 	and.w	r2, r3, #12
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	429a      	cmp	r2, r3
 8001814:	d1eb      	bne.n	80017ee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d008      	beq.n	8001834 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001822:	492e      	ldr	r1, [pc, #184]	; (80018dc <HAL_RCC_ClockConfig+0x1b0>)
 8001824:	4b2d      	ldr	r3, [pc, #180]	; (80018dc <HAL_RCC_ClockConfig+0x1b0>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	4313      	orrs	r3, r2
 8001832:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001834:	4b28      	ldr	r3, [pc, #160]	; (80018d8 <HAL_RCC_ClockConfig+0x1ac>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0207 	and.w	r2, r3, #7
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d910      	bls.n	8001864 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001842:	4925      	ldr	r1, [pc, #148]	; (80018d8 <HAL_RCC_ClockConfig+0x1ac>)
 8001844:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <HAL_RCC_ClockConfig+0x1ac>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f023 0207 	bic.w	r2, r3, #7
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	4313      	orrs	r3, r2
 8001850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001852:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <HAL_RCC_ClockConfig+0x1ac>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0207 	and.w	r2, r3, #7
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d001      	beq.n	8001864 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e034      	b.n	80018ce <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d008      	beq.n	8001882 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001870:	491a      	ldr	r1, [pc, #104]	; (80018dc <HAL_RCC_ClockConfig+0x1b0>)
 8001872:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <HAL_RCC_ClockConfig+0x1b0>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	4313      	orrs	r3, r2
 8001880:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d009      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800188e:	4913      	ldr	r1, [pc, #76]	; (80018dc <HAL_RCC_ClockConfig+0x1b0>)
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_RCC_ClockConfig+0x1b0>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	4313      	orrs	r3, r2
 80018a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018a2:	f000 f821 	bl	80018e8 <HAL_RCC_GetSysClockFreq>
 80018a6:	4601      	mov	r1, r0
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <HAL_RCC_ClockConfig+0x1b0>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	091b      	lsrs	r3, r3, #4
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	4a0b      	ldr	r2, [pc, #44]	; (80018e0 <HAL_RCC_ClockConfig+0x1b4>)
 80018b4:	5cd3      	ldrb	r3, [r2, r3]
 80018b6:	f003 031f 	and.w	r3, r3, #31
 80018ba:	fa21 f303 	lsr.w	r3, r1, r3
 80018be:	4a09      	ldr	r2, [pc, #36]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 80018c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick (TICK_INT_PRIORITY);
 80018c2:	2000      	movs	r0, #0
 80018c4:	f7fe fe28 	bl	8000518 <HAL_InitTick>
 80018c8:	4603      	mov	r3, r0
 80018ca:	72fb      	strb	r3, [r7, #11]

  return status;
 80018cc:	7afb      	ldrb	r3, [r7, #11]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40022000 	.word	0x40022000
 80018dc:	40021000 	.word	0x40021000
 80018e0:	08005e48 	.word	0x08005e48
 80018e4:	20000014 	.word	0x20000014

080018e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b089      	sub	sp, #36	; 0x24
 80018ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018f6:	4b46      	ldr	r3, [pc, #280]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x128>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001900:	4b43      	ldr	r3, [pc, #268]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x128>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_RCC_GetSysClockFreq+0x34>
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	2b0c      	cmp	r3, #12
 8001914:	d121      	bne.n	800195a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d11e      	bne.n	800195a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800191c:	4b3c      	ldr	r3, [pc, #240]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x128>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0308 	and.w	r3, r3, #8
 8001924:	2b00      	cmp	r3, #0
 8001926:	d107      	bne.n	8001938 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001928:	4b39      	ldr	r3, [pc, #228]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x128>)
 800192a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800192e:	0a1b      	lsrs	r3, r3, #8
 8001930:	f003 030f 	and.w	r3, r3, #15
 8001934:	61fb      	str	r3, [r7, #28]
 8001936:	e005      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001938:	4b35      	ldr	r3, [pc, #212]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x128>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001944:	4a33      	ldr	r2, [pc, #204]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10d      	bne.n	8001970 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001958:	e00a      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	2b04      	cmp	r3, #4
 800195e:	d102      	bne.n	8001966 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001960:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x130>)
 8001962:	61bb      	str	r3, [r7, #24]
 8001964:	e004      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	2b08      	cmp	r3, #8
 800196a:	d101      	bne.n	8001970 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800196c:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x134>)
 800196e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	2b0c      	cmp	r3, #12
 8001974:	d145      	bne.n	8001a02 <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001976:	4b26      	ldr	r3, [pc, #152]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x128>)
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	60bb      	str	r3, [r7, #8]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001980:	4b23      	ldr	r3, [pc, #140]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x128>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	3301      	adds	r3, #1
 800198c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2b02      	cmp	r3, #2
 8001992:	d002      	beq.n	800199a <HAL_RCC_GetSysClockFreq+0xb2>
 8001994:	2b03      	cmp	r3, #3
 8001996:	d00d      	beq.n	80019b4 <HAL_RCC_GetSysClockFreq+0xcc>
 8001998:	e019      	b.n	80019ce <HAL_RCC_GetSysClockFreq+0xe6>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800199a:	4a1f      	ldr	r2, [pc, #124]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x130>)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a2:	4a1b      	ldr	r2, [pc, #108]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x128>)
 80019a4:	68d2      	ldr	r2, [r2, #12]
 80019a6:	0a12      	lsrs	r2, r2, #8
 80019a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019ac:	fb02 f303 	mul.w	r3, r2, r3
 80019b0:	617b      	str	r3, [r7, #20]
      break;
 80019b2:	e019      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019b4:	4a19      	ldr	r2, [pc, #100]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x134>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019bc:	4a14      	ldr	r2, [pc, #80]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x128>)
 80019be:	68d2      	ldr	r2, [r2, #12]
 80019c0:	0a12      	lsrs	r2, r2, #8
 80019c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019c6:	fb02 f303 	mul.w	r3, r2, r3
 80019ca:	617b      	str	r3, [r7, #20]
      break;
 80019cc:	e00c      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019ce:	69fa      	ldr	r2, [r7, #28]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d6:	4a0e      	ldr	r2, [pc, #56]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x128>)
 80019d8:	68d2      	ldr	r2, [r2, #12]
 80019da:	0a12      	lsrs	r2, r2, #8
 80019dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019e0:	fb02 f303 	mul.w	r3, r2, r3
 80019e4:	617b      	str	r3, [r7, #20]
      break;
 80019e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x128>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	0e5b      	lsrs	r3, r3, #25
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	3301      	adds	r3, #1
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco/pllr;
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a00:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a02:	69bb      	ldr	r3, [r7, #24]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3724      	adds	r7, #36	; 0x24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	40021000 	.word	0x40021000
 8001a14:	08005e60 	.word	0x08005e60
 8001a18:	00f42400 	.word	0x00f42400
 8001a1c:	007a1200 	.word	0x007a1200

08001a20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a24:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000014 	.word	0x20000014

08001a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001a3c:	f7ff fff0 	bl	8001a20 <HAL_RCC_GetHCLKFreq>
 8001a40:	4601      	mov	r1, r0
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	0a1b      	lsrs	r3, r3, #8
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a4e:	5cd3      	ldrb	r3, [r2, r3]
 8001a50:	f003 031f 	and.w	r3, r3, #31
 8001a54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	08005e58 	.word	0x08005e58

08001a64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001a68:	f7ff ffda 	bl	8001a20 <HAL_RCC_GetHCLKFreq>
 8001a6c:	4601      	mov	r1, r0
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	0adb      	lsrs	r3, r3, #11
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001a7a:	5cd3      	ldrb	r3, [r2, r3]
 8001a7c:	f003 031f 	and.w	r3, r3, #31
 8001a80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	08005e58 	.word	0x08005e58

08001a90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a98:	2300      	movs	r3, #0
 8001a9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a9c:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001aa8:	f7ff fa78 	bl	8000f9c <HAL_PWREx_GetVoltageRange>
 8001aac:	6178      	str	r0, [r7, #20]
 8001aae:	e014      	b.n	8001ada <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ab0:	4a25      	ldr	r2, [pc, #148]	; (8001b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ab2:	4b25      	ldr	r3, [pc, #148]	; (8001b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aba:	6593      	str	r3, [r2, #88]	; 0x58
 8001abc:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ac8:	f7ff fa68 	bl	8000f9c <HAL_PWREx_GetVoltageRange>
 8001acc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ace:	4a1e      	ldr	r2, [pc, #120]	; (8001b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ae0:	d10b      	bne.n	8001afa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b80      	cmp	r3, #128	; 0x80
 8001ae6:	d919      	bls.n	8001b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2ba0      	cmp	r3, #160	; 0xa0
 8001aec:	d902      	bls.n	8001af4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001aee:	2302      	movs	r3, #2
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	e013      	b.n	8001b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001af4:	2301      	movs	r3, #1
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	e010      	b.n	8001b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b80      	cmp	r3, #128	; 0x80
 8001afe:	d902      	bls.n	8001b06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b00:	2303      	movs	r3, #3
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	e00a      	b.n	8001b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b80      	cmp	r3, #128	; 0x80
 8001b0a:	d102      	bne.n	8001b12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	e004      	b.n	8001b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b70      	cmp	r3, #112	; 0x70
 8001b16:	d101      	bne.n	8001b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b18:	2301      	movs	r3, #1
 8001b1a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b1c:	490b      	ldr	r1, [pc, #44]	; (8001b4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 0207 	bic.w	r2, r3, #7
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b2c:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0207 	and.w	r2, r3, #7
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d001      	beq.n	8001b3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40022000 	.word	0x40022000

08001b50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001b58:	2300      	movs	r3, #0
 8001b5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d03f      	beq.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b74:	d01c      	beq.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001b76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b7a:	d802      	bhi.n	8001b82 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00e      	beq.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001b80:	e01f      	b.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001b82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b86:	d003      	beq.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001b88:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001b8c:	d01c      	beq.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001b8e:	e018      	b.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001b90:	4a85      	ldr	r2, [pc, #532]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b92:	4b85      	ldr	r3, [pc, #532]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001b9c:	e015      	b.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f000 fab9 	bl	800211c <RCCEx_PLLSAI1_Config>
 8001baa:	4603      	mov	r3, r0
 8001bac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001bae:	e00c      	b.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3320      	adds	r3, #32
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 fba0 	bl	80022fc <RCCEx_PLLSAI2_Config>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001bc0:	e003      	b.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	74fb      	strb	r3, [r7, #19]
      break;
 8001bc6:	e000      	b.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001bc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001bca:	7cfb      	ldrb	r3, [r7, #19]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10b      	bne.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001bd0:	4975      	ldr	r1, [pc, #468]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bd2:	4b75      	ldr	r3, [pc, #468]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001be0:	4313      	orrs	r3, r2
 8001be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001be6:	e001      	b.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001be8:	7cfb      	ldrb	r3, [r7, #19]
 8001bea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d03f      	beq.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c00:	d01c      	beq.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001c02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c06:	d802      	bhi.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00e      	beq.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001c0c:	e01f      	b.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001c0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c12:	d003      	beq.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001c14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001c18:	d01c      	beq.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001c1a:	e018      	b.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001c1c:	4a62      	ldr	r2, [pc, #392]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c1e:	4b62      	ldr	r3, [pc, #392]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c26:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001c28:	e015      	b.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 fa73 	bl	800211c <RCCEx_PLLSAI1_Config>
 8001c36:	4603      	mov	r3, r0
 8001c38:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001c3a:	e00c      	b.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3320      	adds	r3, #32
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 fb5a 	bl	80022fc <RCCEx_PLLSAI2_Config>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001c4c:	e003      	b.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	74fb      	strb	r3, [r7, #19]
      break;
 8001c52:	e000      	b.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001c54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001c56:	7cfb      	ldrb	r3, [r7, #19]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10b      	bne.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c5c:	4952      	ldr	r1, [pc, #328]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c5e:	4b52      	ldr	r3, [pc, #328]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c64:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001c72:	e001      	b.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c74:	7cfb      	ldrb	r3, [r7, #19]
 8001c76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 80a0 	beq.w	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c8a:	4b47      	ldr	r3, [pc, #284]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00d      	beq.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ca0:	4a41      	ldr	r2, [pc, #260]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ca2:	4b41      	ldr	r3, [pc, #260]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001caa:	6593      	str	r3, [r2, #88]	; 0x58
 8001cac:	4b3e      	ldr	r3, [pc, #248]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cbc:	4a3b      	ldr	r2, [pc, #236]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001cbe:	4b3b      	ldr	r3, [pc, #236]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cc8:	f7fe fc58 	bl	800057c <HAL_GetTick>
 8001ccc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001cce:	e009      	b.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd0:	f7fe fc54 	bl	800057c <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d902      	bls.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	74fb      	strb	r3, [r7, #19]
        break;
 8001ce2:	e005      	b.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ce4:	4b31      	ldr	r3, [pc, #196]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0ef      	beq.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001cf0:	7cfb      	ldrb	r3, [r7, #19]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d15c      	bne.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001cf6:	4b2c      	ldr	r3, [pc, #176]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d01f      	beq.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d019      	beq.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d14:	4b24      	ldr	r3, [pc, #144]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d20:	4a21      	ldr	r2, [pc, #132]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d22:	4b21      	ldr	r3, [pc, #132]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d30:	4a1d      	ldr	r2, [pc, #116]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d32:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d40:	4a19      	ldr	r2, [pc, #100]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d016      	beq.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d52:	f7fe fc13 	bl	800057c <HAL_GetTick>
 8001d56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d58:	e00b      	b.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5a:	f7fe fc0f 	bl	800057c <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d902      	bls.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	74fb      	strb	r3, [r7, #19]
            break;
 8001d70:	e006      	b.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d72:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0ec      	beq.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001d80:	7cfb      	ldrb	r3, [r7, #19]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10c      	bne.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d86:	4908      	ldr	r1, [pc, #32]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d88:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001d9e:	e009      	b.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001da0:	7cfb      	ldrb	r3, [r7, #19]
 8001da2:	74bb      	strb	r3, [r7, #18]
 8001da4:	e006      	b.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001da6:	bf00      	nop
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001db0:	7cfb      	ldrb	r3, [r7, #19]
 8001db2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001db4:	7c7b      	ldrb	r3, [r7, #17]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d105      	bne.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dba:	4a9e      	ldr	r2, [pc, #632]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001dbc:	4b9d      	ldr	r3, [pc, #628]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00a      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dd2:	4998      	ldr	r1, [pc, #608]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001dd4:	4b97      	ldr	r3, [pc, #604]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dda:	f023 0203 	bic.w	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de2:	4313      	orrs	r3, r2
 8001de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00a      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001df4:	498f      	ldr	r1, [pc, #572]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001df6:	4b8f      	ldr	r3, [pc, #572]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfc:	f023 020c 	bic.w	r2, r3, #12
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e04:	4313      	orrs	r3, r2
 8001e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00a      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e16:	4987      	ldr	r1, [pc, #540]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e18:	4b86      	ldr	r3, [pc, #536]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e1e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	4313      	orrs	r3, r2
 8001e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00a      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e38:	497e      	ldr	r1, [pc, #504]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e3a:	4b7e      	ldr	r3, [pc, #504]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e40:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0310 	and.w	r3, r3, #16
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00a      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e5a:	4976      	ldr	r1, [pc, #472]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e5c:	4b75      	ldr	r3, [pc, #468]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0320 	and.w	r3, r3, #32
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00a      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e7c:	496d      	ldr	r1, [pc, #436]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e7e:	4b6d      	ldr	r3, [pc, #436]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00a      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e9e:	4965      	ldr	r1, [pc, #404]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ea0:	4b64      	ldr	r3, [pc, #400]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00a      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001ec0:	495c      	ldr	r1, [pc, #368]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ec2:	4b5c      	ldr	r3, [pc, #368]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00a      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ee2:	4954      	ldr	r1, [pc, #336]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ee4:	4b53      	ldr	r3, [pc, #332]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00a      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f04:	494b      	ldr	r1, [pc, #300]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f06:	4b4b      	ldr	r3, [pc, #300]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f14:	4313      	orrs	r3, r2
 8001f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00a      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f26:	4943      	ldr	r1, [pc, #268]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f28:	4b42      	ldr	r3, [pc, #264]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f36:	4313      	orrs	r3, r2
 8001f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d028      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f48:	493a      	ldr	r1, [pc, #232]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f4a:	4b3a      	ldr	r3, [pc, #232]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f50:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f66:	d106      	bne.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f68:	4a32      	ldr	r2, [pc, #200]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f6a:	4b32      	ldr	r3, [pc, #200]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f72:	60d3      	str	r3, [r2, #12]
 8001f74:	e011      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f7e:	d10c      	bne.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3304      	adds	r3, #4
 8001f84:	2101      	movs	r1, #1
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 f8c8 	bl	800211c <RCCEx_PLLSAI1_Config>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001f90:	7cfb      	ldrb	r3, [r7, #19]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8001f96:	7cfb      	ldrb	r3, [r7, #19]
 8001f98:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d028      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001fa6:	4923      	ldr	r1, [pc, #140]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fa8:	4b22      	ldr	r3, [pc, #136]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fc4:	d106      	bne.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fc6:	4a1b      	ldr	r2, [pc, #108]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fd0:	60d3      	str	r3, [r2, #12]
 8001fd2:	e011      	b.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001fdc:	d10c      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 f899 	bl	800211c <RCCEx_PLLSAI1_Config>
 8001fea:	4603      	mov	r3, r0
 8001fec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001fee:	7cfb      	ldrb	r3, [r7, #19]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8001ff4:	7cfb      	ldrb	r3, [r7, #19]
 8001ff6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d02b      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002004:	490b      	ldr	r1, [pc, #44]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002014:	4313      	orrs	r3, r2
 8002016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800201e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002022:	d109      	bne.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002024:	4a03      	ldr	r2, [pc, #12]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002026:	4b03      	ldr	r3, [pc, #12]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800202e:	60d3      	str	r3, [r2, #12]
 8002030:	e014      	b.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002032:	bf00      	nop
 8002034:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800203c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002040:	d10c      	bne.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3304      	adds	r3, #4
 8002046:	2101      	movs	r1, #1
 8002048:	4618      	mov	r0, r3
 800204a:	f000 f867 	bl	800211c <RCCEx_PLLSAI1_Config>
 800204e:	4603      	mov	r3, r0
 8002050:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002052:	7cfb      	ldrb	r3, [r7, #19]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002058:	7cfb      	ldrb	r3, [r7, #19]
 800205a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d02f      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002068:	492b      	ldr	r1, [pc, #172]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800206a:	4b2b      	ldr	r3, [pc, #172]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800206c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002070:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002082:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002086:	d10d      	bne.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3304      	adds	r3, #4
 800208c:	2102      	movs	r1, #2
 800208e:	4618      	mov	r0, r3
 8002090:	f000 f844 	bl	800211c <RCCEx_PLLSAI1_Config>
 8002094:	4603      	mov	r3, r0
 8002096:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002098:	7cfb      	ldrb	r3, [r7, #19]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d014      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800209e:	7cfb      	ldrb	r3, [r7, #19]
 80020a0:	74bb      	strb	r3, [r7, #18]
 80020a2:	e011      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020ac:	d10c      	bne.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3320      	adds	r3, #32
 80020b2:	2102      	movs	r1, #2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 f921 	bl	80022fc <RCCEx_PLLSAI2_Config>
 80020ba:	4603      	mov	r3, r0
 80020bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020be:	7cfb      	ldrb	r3, [r7, #19]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80020c4:	7cfb      	ldrb	r3, [r7, #19]
 80020c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00a      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80020d4:	4910      	ldr	r1, [pc, #64]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80020d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020dc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00b      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80020f6:	4908      	ldr	r1, [pc, #32]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80020f8:	4b07      	ldr	r3, [pc, #28]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800210e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40021000 	.word	0x40021000

0800211c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800212a:	4b73      	ldr	r3, [pc, #460]	; (80022f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d018      	beq.n	8002168 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002136:	4b70      	ldr	r3, [pc, #448]	; (80022f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	f003 0203 	and.w	r2, r3, #3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d10d      	bne.n	8002162 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
       ||
 800214a:	2b00      	cmp	r3, #0
 800214c:	d009      	beq.n	8002162 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800214e:	4b6a      	ldr	r3, [pc, #424]	; (80022f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	091b      	lsrs	r3, r3, #4
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
       ||
 800215e:	429a      	cmp	r2, r3
 8002160:	d044      	beq.n	80021ec <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	73fb      	strb	r3, [r7, #15]
 8002166:	e041      	b.n	80021ec <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b02      	cmp	r3, #2
 800216e:	d00c      	beq.n	800218a <RCCEx_PLLSAI1_Config+0x6e>
 8002170:	2b03      	cmp	r3, #3
 8002172:	d013      	beq.n	800219c <RCCEx_PLLSAI1_Config+0x80>
 8002174:	2b01      	cmp	r3, #1
 8002176:	d120      	bne.n	80021ba <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002178:	4b5f      	ldr	r3, [pc, #380]	; (80022f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d11d      	bne.n	80021c0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002188:	e01a      	b.n	80021c0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800218a:	4b5b      	ldr	r3, [pc, #364]	; (80022f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002192:	2b00      	cmp	r3, #0
 8002194:	d116      	bne.n	80021c4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800219a:	e013      	b.n	80021c4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800219c:	4b56      	ldr	r3, [pc, #344]	; (80022f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10f      	bne.n	80021c8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80021a8:	4b53      	ldr	r3, [pc, #332]	; (80022f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d109      	bne.n	80021c8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80021b8:	e006      	b.n	80021c8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	73fb      	strb	r3, [r7, #15]
      break;
 80021be:	e004      	b.n	80021ca <RCCEx_PLLSAI1_Config+0xae>
      break;
 80021c0:	bf00      	nop
 80021c2:	e002      	b.n	80021ca <RCCEx_PLLSAI1_Config+0xae>
      break;
 80021c4:	bf00      	nop
 80021c6:	e000      	b.n	80021ca <RCCEx_PLLSAI1_Config+0xae>
      break;
 80021c8:	bf00      	nop
    }

    if(status == HAL_OK)
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10d      	bne.n	80021ec <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80021d0:	4849      	ldr	r0, [pc, #292]	; (80022f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021d2:	4b49      	ldr	r3, [pc, #292]	; (80022f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6819      	ldr	r1, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	430b      	orrs	r3, r1
 80021e8:	4313      	orrs	r3, r2
 80021ea:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d17d      	bne.n	80022ee <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80021f2:	4a41      	ldr	r2, [pc, #260]	; (80022f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021f4:	4b40      	ldr	r3, [pc, #256]	; (80022f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80021fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021fe:	f7fe f9bd 	bl	800057c <HAL_GetTick>
 8002202:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002204:	e009      	b.n	800221a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002206:	f7fe f9b9 	bl	800057c <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d902      	bls.n	800221a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	73fb      	strb	r3, [r7, #15]
        break;
 8002218:	e005      	b.n	8002226 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800221a:	4b37      	ldr	r3, [pc, #220]	; (80022f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1ef      	bne.n	8002206 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d160      	bne.n	80022ee <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d111      	bne.n	8002256 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002232:	4831      	ldr	r0, [pc, #196]	; (80022f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002234:	4b30      	ldr	r3, [pc, #192]	; (80022f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800223c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6892      	ldr	r2, [r2, #8]
 8002244:	0211      	lsls	r1, r2, #8
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68d2      	ldr	r2, [r2, #12]
 800224a:	0912      	lsrs	r2, r2, #4
 800224c:	0452      	lsls	r2, r2, #17
 800224e:	430a      	orrs	r2, r1
 8002250:	4313      	orrs	r3, r2
 8002252:	6103      	str	r3, [r0, #16]
 8002254:	e027      	b.n	80022a6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d112      	bne.n	8002282 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800225c:	4826      	ldr	r0, [pc, #152]	; (80022f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800225e:	4b26      	ldr	r3, [pc, #152]	; (80022f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002266:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6892      	ldr	r2, [r2, #8]
 800226e:	0211      	lsls	r1, r2, #8
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6912      	ldr	r2, [r2, #16]
 8002274:	0852      	lsrs	r2, r2, #1
 8002276:	3a01      	subs	r2, #1
 8002278:	0552      	lsls	r2, r2, #21
 800227a:	430a      	orrs	r2, r1
 800227c:	4313      	orrs	r3, r2
 800227e:	6103      	str	r3, [r0, #16]
 8002280:	e011      	b.n	80022a6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002282:	481d      	ldr	r0, [pc, #116]	; (80022f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002284:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800228c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6892      	ldr	r2, [r2, #8]
 8002294:	0211      	lsls	r1, r2, #8
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6952      	ldr	r2, [r2, #20]
 800229a:	0852      	lsrs	r2, r2, #1
 800229c:	3a01      	subs	r2, #1
 800229e:	0652      	lsls	r2, r2, #25
 80022a0:	430a      	orrs	r2, r1
 80022a2:	4313      	orrs	r3, r2
 80022a4:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80022a6:	4a14      	ldr	r2, [pc, #80]	; (80022f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b2:	f7fe f963 	bl	800057c <HAL_GetTick>
 80022b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80022b8:	e009      	b.n	80022ce <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022ba:	f7fe f95f 	bl	800057c <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d902      	bls.n	80022ce <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	73fb      	strb	r3, [r7, #15]
          break;
 80022cc:	e005      	b.n	80022da <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0ef      	beq.n	80022ba <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d106      	bne.n	80022ee <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80022e0:	4905      	ldr	r1, [pc, #20]	; (80022f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022e2:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022e4:	691a      	ldr	r2, [r3, #16]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000

080022fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800230a:	4b68      	ldr	r3, [pc, #416]	; (80024ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d018      	beq.n	8002348 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002316:	4b65      	ldr	r3, [pc, #404]	; (80024ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f003 0203 	and.w	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d10d      	bne.n	8002342 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
       ||
 800232a:	2b00      	cmp	r3, #0
 800232c:	d009      	beq.n	8002342 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800232e:	4b5f      	ldr	r3, [pc, #380]	; (80024ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	091b      	lsrs	r3, r3, #4
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
       ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d044      	beq.n	80023cc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	73fb      	strb	r3, [r7, #15]
 8002346:	e041      	b.n	80023cc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d00c      	beq.n	800236a <RCCEx_PLLSAI2_Config+0x6e>
 8002350:	2b03      	cmp	r3, #3
 8002352:	d013      	beq.n	800237c <RCCEx_PLLSAI2_Config+0x80>
 8002354:	2b01      	cmp	r3, #1
 8002356:	d120      	bne.n	800239a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002358:	4b54      	ldr	r3, [pc, #336]	; (80024ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d11d      	bne.n	80023a0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002368:	e01a      	b.n	80023a0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800236a:	4b50      	ldr	r3, [pc, #320]	; (80024ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002372:	2b00      	cmp	r3, #0
 8002374:	d116      	bne.n	80023a4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800237a:	e013      	b.n	80023a4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800237c:	4b4b      	ldr	r3, [pc, #300]	; (80024ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10f      	bne.n	80023a8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002388:	4b48      	ldr	r3, [pc, #288]	; (80024ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d109      	bne.n	80023a8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002398:	e006      	b.n	80023a8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	73fb      	strb	r3, [r7, #15]
      break;
 800239e:	e004      	b.n	80023aa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80023a0:	bf00      	nop
 80023a2:	e002      	b.n	80023aa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80023a4:	bf00      	nop
 80023a6:	e000      	b.n	80023aa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80023a8:	bf00      	nop
    }

    if(status == HAL_OK)
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10d      	bne.n	80023cc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023b0:	483e      	ldr	r0, [pc, #248]	; (80024ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80023b2:	4b3e      	ldr	r3, [pc, #248]	; (80024ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6819      	ldr	r1, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	430b      	orrs	r3, r1
 80023c8:	4313      	orrs	r3, r2
 80023ca:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d167      	bne.n	80024a2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80023d2:	4a36      	ldr	r2, [pc, #216]	; (80024ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80023d4:	4b35      	ldr	r3, [pc, #212]	; (80024ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023de:	f7fe f8cd 	bl	800057c <HAL_GetTick>
 80023e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80023e4:	e009      	b.n	80023fa <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80023e6:	f7fe f8c9 	bl	800057c <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d902      	bls.n	80023fa <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	73fb      	strb	r3, [r7, #15]
        break;
 80023f8:	e005      	b.n	8002406 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80023fa:	4b2c      	ldr	r3, [pc, #176]	; (80024ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1ef      	bne.n	80023e6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d14a      	bne.n	80024a2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d111      	bne.n	8002436 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002412:	4826      	ldr	r0, [pc, #152]	; (80024ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002414:	4b25      	ldr	r3, [pc, #148]	; (80024ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800241c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6892      	ldr	r2, [r2, #8]
 8002424:	0211      	lsls	r1, r2, #8
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	68d2      	ldr	r2, [r2, #12]
 800242a:	0912      	lsrs	r2, r2, #4
 800242c:	0452      	lsls	r2, r2, #17
 800242e:	430a      	orrs	r2, r1
 8002430:	4313      	orrs	r3, r2
 8002432:	6143      	str	r3, [r0, #20]
 8002434:	e011      	b.n	800245a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002436:	481d      	ldr	r0, [pc, #116]	; (80024ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002438:	4b1c      	ldr	r3, [pc, #112]	; (80024ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002440:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6892      	ldr	r2, [r2, #8]
 8002448:	0211      	lsls	r1, r2, #8
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6912      	ldr	r2, [r2, #16]
 800244e:	0852      	lsrs	r2, r2, #1
 8002450:	3a01      	subs	r2, #1
 8002452:	0652      	lsls	r2, r2, #25
 8002454:	430a      	orrs	r2, r1
 8002456:	4313      	orrs	r3, r2
 8002458:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800245a:	4a14      	ldr	r2, [pc, #80]	; (80024ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800245c:	4b13      	ldr	r3, [pc, #76]	; (80024ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002464:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002466:	f7fe f889 	bl	800057c <HAL_GetTick>
 800246a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800246c:	e009      	b.n	8002482 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800246e:	f7fe f885 	bl	800057c <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d902      	bls.n	8002482 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	73fb      	strb	r3, [r7, #15]
          break;
 8002480:	e005      	b.n	800248e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002482:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0ef      	beq.n	800246e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d106      	bne.n	80024a2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002494:	4905      	ldr	r1, [pc, #20]	; (80024ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002496:	4b05      	ldr	r3, [pc, #20]	; (80024ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002498:	695a      	ldr	r2, [r3, #20]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	4313      	orrs	r3, r2
 80024a0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40021000 	.word	0x40021000

080024b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e01d      	b.n	80024fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d106      	bne.n	80024dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f003 fa8c 	bl	80059f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3304      	adds	r3, #4
 80024ec:	4619      	mov	r1, r3
 80024ee:	4610      	mov	r0, r2
 80024f0:	f000 fcfc 	bl	8002eec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e01d      	b.n	8002554 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d106      	bne.n	8002532 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f815 	bl	800255c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2202      	movs	r2, #2
 8002536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3304      	adds	r3, #4
 8002542:	4619      	mov	r1, r3
 8002544:	4610      	mov	r0, r2
 8002546:	f000 fcd1 	bl	8002eec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2201      	movs	r2, #1
 8002580:	6839      	ldr	r1, [r7, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f001 f9e0 	bl	8003948 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a1f      	ldr	r2, [pc, #124]	; (800260c <HAL_TIM_PWM_Start+0x9c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d013      	beq.n	80025ba <HAL_TIM_PWM_Start+0x4a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a1e      	ldr	r2, [pc, #120]	; (8002610 <HAL_TIM_PWM_Start+0xa0>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d00e      	beq.n	80025ba <HAL_TIM_PWM_Start+0x4a>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a1c      	ldr	r2, [pc, #112]	; (8002614 <HAL_TIM_PWM_Start+0xa4>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d009      	beq.n	80025ba <HAL_TIM_PWM_Start+0x4a>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a1b      	ldr	r2, [pc, #108]	; (8002618 <HAL_TIM_PWM_Start+0xa8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d004      	beq.n	80025ba <HAL_TIM_PWM_Start+0x4a>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a19      	ldr	r2, [pc, #100]	; (800261c <HAL_TIM_PWM_Start+0xac>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d101      	bne.n	80025be <HAL_TIM_PWM_Start+0x4e>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <HAL_TIM_PWM_Start+0x50>
 80025be:	2300      	movs	r3, #0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d007      	beq.n	80025d4 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80025ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025d2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	4b11      	ldr	r3, [pc, #68]	; (8002620 <HAL_TIM_PWM_Start+0xb0>)
 80025dc:	4013      	ands	r3, r2
 80025de:	2b06      	cmp	r3, #6
 80025e0:	d00f      	beq.n	8002602 <HAL_TIM_PWM_Start+0x92>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <HAL_TIM_PWM_Start+0xb0>)
 80025ea:	4013      	ands	r3, r2
 80025ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f0:	d007      	beq.n	8002602 <HAL_TIM_PWM_Start+0x92>
  {
    __HAL_TIM_ENABLE(htim);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	f042 0201 	orr.w	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40012c00 	.word	0x40012c00
 8002610:	40013400 	.word	0x40013400
 8002614:	40014000 	.word	0x40014000
 8002618:	40014400 	.word	0x40014400
 800261c:	40014800 	.word	0x40014800
 8002620:	00010007 	.word	0x00010007

08002624 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e01d      	b.n	8002672 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d106      	bne.n	8002650 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f003 fa04 	bl	8005a58 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2202      	movs	r2, #2
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3304      	adds	r3, #4
 8002660:	4619      	mov	r1, r3
 8002662:	4610      	mov	r0, r2
 8002664:	f000 fc42 	bl	8002eec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b0c      	cmp	r3, #12
 800268a:	d841      	bhi.n	8002710 <HAL_TIM_IC_Start_IT+0x94>
 800268c:	a201      	add	r2, pc, #4	; (adr r2, 8002694 <HAL_TIM_IC_Start_IT+0x18>)
 800268e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002692:	bf00      	nop
 8002694:	080026c9 	.word	0x080026c9
 8002698:	08002711 	.word	0x08002711
 800269c:	08002711 	.word	0x08002711
 80026a0:	08002711 	.word	0x08002711
 80026a4:	080026db 	.word	0x080026db
 80026a8:	08002711 	.word	0x08002711
 80026ac:	08002711 	.word	0x08002711
 80026b0:	08002711 	.word	0x08002711
 80026b4:	080026ed 	.word	0x080026ed
 80026b8:	08002711 	.word	0x08002711
 80026bc:	08002711 	.word	0x08002711
 80026c0:	08002711 	.word	0x08002711
 80026c4:	080026ff 	.word	0x080026ff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	68d2      	ldr	r2, [r2, #12]
 80026d2:	f042 0202 	orr.w	r2, r2, #2
 80026d6:	60da      	str	r2, [r3, #12]
      break;
 80026d8:	e01b      	b.n	8002712 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	68d2      	ldr	r2, [r2, #12]
 80026e4:	f042 0204 	orr.w	r2, r2, #4
 80026e8:	60da      	str	r2, [r3, #12]
      break;
 80026ea:	e012      	b.n	8002712 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	68d2      	ldr	r2, [r2, #12]
 80026f6:	f042 0208 	orr.w	r2, r2, #8
 80026fa:	60da      	str	r2, [r3, #12]
      break;
 80026fc:	e009      	b.n	8002712 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6812      	ldr	r2, [r2, #0]
 8002706:	68d2      	ldr	r2, [r2, #12]
 8002708:	f042 0210 	orr.w	r2, r2, #16
 800270c:	60da      	str	r2, [r3, #12]
      break;
 800270e:	e000      	b.n	8002712 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8002710:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2201      	movs	r2, #1
 8002718:	6839      	ldr	r1, [r7, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f001 f914 	bl	8003948 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <HAL_TIM_IC_Start_IT+0xdc>)
 8002728:	4013      	ands	r3, r2
 800272a:	2b06      	cmp	r3, #6
 800272c:	d00f      	beq.n	800274e <HAL_TIM_IC_Start_IT+0xd2>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	4b08      	ldr	r3, [pc, #32]	; (8002758 <HAL_TIM_IC_Start_IT+0xdc>)
 8002736:	4013      	ands	r3, r2
 8002738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800273c:	d007      	beq.n	800274e <HAL_TIM_IC_Start_IT+0xd2>
  {
    __HAL_TIM_ENABLE(htim);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	f042 0201 	orr.w	r2, r2, #1
 800274c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	00010007 	.word	0x00010007

0800275c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b02      	cmp	r3, #2
 8002770:	d122      	bne.n	80027b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b02      	cmp	r3, #2
 800277e:	d11b      	bne.n	80027b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0202 	mvn.w	r2, #2
 8002788:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f002 fae6 	bl	8004d70 <HAL_TIM_IC_CaptureCallback>
 80027a4:	e005      	b.n	80027b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fb81 	bl	8002eae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 fb88 	bl	8002ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d122      	bne.n	800280c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d11b      	bne.n	800280c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f06f 0204 	mvn.w	r2, #4
 80027dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2202      	movs	r2, #2
 80027e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f002 fabc 	bl	8004d70 <HAL_TIM_IC_CaptureCallback>
 80027f8:	e005      	b.n	8002806 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 fb57 	bl	8002eae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 fb5e 	bl	8002ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b08      	cmp	r3, #8
 8002818:	d122      	bne.n	8002860 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b08      	cmp	r3, #8
 8002826:	d11b      	bne.n	8002860 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f06f 0208 	mvn.w	r2, #8
 8002830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2204      	movs	r2, #4
 8002836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f002 fa92 	bl	8004d70 <HAL_TIM_IC_CaptureCallback>
 800284c:	e005      	b.n	800285a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 fb2d 	bl	8002eae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 fb34 	bl	8002ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f003 0310 	and.w	r3, r3, #16
 800286a:	2b10      	cmp	r3, #16
 800286c:	d122      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f003 0310 	and.w	r3, r3, #16
 8002878:	2b10      	cmp	r3, #16
 800287a:	d11b      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f06f 0210 	mvn.w	r2, #16
 8002884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2208      	movs	r2, #8
 800288a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f002 fa68 	bl	8004d70 <HAL_TIM_IC_CaptureCallback>
 80028a0:	e005      	b.n	80028ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fb03 	bl	8002eae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 fb0a 	bl	8002ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d10e      	bne.n	80028e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d107      	bne.n	80028e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0201 	mvn.w	r2, #1
 80028d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fadd 	bl	8002e9a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ea:	2b80      	cmp	r3, #128	; 0x80
 80028ec:	d10e      	bne.n	800290c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f8:	2b80      	cmp	r3, #128	; 0x80
 80028fa:	d107      	bne.n	800290c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f001 f8aa 	bl	8003a60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800291a:	d10e      	bne.n	800293a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002926:	2b80      	cmp	r3, #128	; 0x80
 8002928:	d107      	bne.n	800293a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f001 f89d 	bl	8003a74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002944:	2b40      	cmp	r3, #64	; 0x40
 8002946:	d10e      	bne.n	8002966 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002952:	2b40      	cmp	r3, #64	; 0x40
 8002954:	d107      	bne.n	8002966 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800295e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 fab8 	bl	8002ed6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	2b20      	cmp	r3, #32
 8002972:	d10e      	bne.n	8002992 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f003 0320 	and.w	r3, r3, #32
 800297e:	2b20      	cmp	r3, #32
 8002980:	d107      	bne.n	8002992 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f06f 0220 	mvn.w	r2, #32
 800298a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f001 f85d 	bl	8003a4c <HAL_TIMEx_CommutationCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b084      	sub	sp, #16
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <HAL_TIM_IC_ConfigChannel+0x1a>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e08a      	b.n	8002aca <HAL_TIM_IC_ConfigChannel+0x130>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d11b      	bne.n	8002a02 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6818      	ldr	r0, [r3, #0]
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	6819      	ldr	r1, [r3, #0]
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f000 fdf7 	bl	80035cc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	6992      	ldr	r2, [r2, #24]
 80029e8:	f022 020c 	bic.w	r2, r2, #12
 80029ec:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	6812      	ldr	r2, [r2, #0]
 80029f6:	6991      	ldr	r1, [r2, #24]
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	6892      	ldr	r2, [r2, #8]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	619a      	str	r2, [r3, #24]
 8002a00:	e05a      	b.n	8002ab8 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d11c      	bne.n	8002a42 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	6819      	ldr	r1, [r3, #0]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f000 fe75 	bl	8003706 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	6812      	ldr	r2, [r2, #0]
 8002a24:	6992      	ldr	r2, [r2, #24]
 8002a26:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002a2a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	6812      	ldr	r2, [r2, #0]
 8002a34:	6991      	ldr	r1, [r2, #24]
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	6892      	ldr	r2, [r2, #8]
 8002a3a:	0212      	lsls	r2, r2, #8
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	619a      	str	r2, [r3, #24]
 8002a40:	e03a      	b.n	8002ab8 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d11b      	bne.n	8002a80 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6818      	ldr	r0, [r3, #0]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	6819      	ldr	r1, [r3, #0]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f000 fec2 	bl	80037e0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	69d2      	ldr	r2, [r2, #28]
 8002a66:	f022 020c 	bic.w	r2, r2, #12
 8002a6a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	6812      	ldr	r2, [r2, #0]
 8002a74:	69d1      	ldr	r1, [r2, #28]
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	6892      	ldr	r2, [r2, #8]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	61da      	str	r2, [r3, #28]
 8002a7e:	e01b      	b.n	8002ab8 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	6819      	ldr	r1, [r3, #0]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f000 fee2 	bl	8003858 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	69d2      	ldr	r2, [r2, #28]
 8002a9e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002aa2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	6812      	ldr	r2, [r2, #0]
 8002aac:	69d1      	ldr	r1, [r2, #28]
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	6892      	ldr	r2, [r2, #8]
 8002ab2:	0212      	lsls	r2, r2, #8
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e105      	b.n	8002cfa <HAL_TIM_PWM_ConfigChannel+0x226>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2202      	movs	r2, #2
 8002afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b14      	cmp	r3, #20
 8002b02:	f200 80f0 	bhi.w	8002ce6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8002b06:	a201      	add	r2, pc, #4	; (adr r2, 8002b0c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0c:	08002b61 	.word	0x08002b61
 8002b10:	08002ce7 	.word	0x08002ce7
 8002b14:	08002ce7 	.word	0x08002ce7
 8002b18:	08002ce7 	.word	0x08002ce7
 8002b1c:	08002ba1 	.word	0x08002ba1
 8002b20:	08002ce7 	.word	0x08002ce7
 8002b24:	08002ce7 	.word	0x08002ce7
 8002b28:	08002ce7 	.word	0x08002ce7
 8002b2c:	08002be3 	.word	0x08002be3
 8002b30:	08002ce7 	.word	0x08002ce7
 8002b34:	08002ce7 	.word	0x08002ce7
 8002b38:	08002ce7 	.word	0x08002ce7
 8002b3c:	08002c23 	.word	0x08002c23
 8002b40:	08002ce7 	.word	0x08002ce7
 8002b44:	08002ce7 	.word	0x08002ce7
 8002b48:	08002ce7 	.word	0x08002ce7
 8002b4c:	08002c65 	.word	0x08002c65
 8002b50:	08002ce7 	.word	0x08002ce7
 8002b54:	08002ce7 	.word	0x08002ce7
 8002b58:	08002ce7 	.word	0x08002ce7
 8002b5c:	08002ca5 	.word	0x08002ca5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68b9      	ldr	r1, [r7, #8]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fa5a 	bl	8003020 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	6812      	ldr	r2, [r2, #0]
 8002b74:	6992      	ldr	r2, [r2, #24]
 8002b76:	f042 0208 	orr.w	r2, r2, #8
 8002b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	6992      	ldr	r2, [r2, #24]
 8002b86:	f022 0204 	bic.w	r2, r2, #4
 8002b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	6991      	ldr	r1, [r2, #24]
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	6912      	ldr	r2, [r2, #16]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	619a      	str	r2, [r3, #24]
      break;
 8002b9e:	e0a3      	b.n	8002ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68b9      	ldr	r1, [r7, #8]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 faca 	bl	8003140 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	6992      	ldr	r2, [r2, #24]
 8002bb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	6992      	ldr	r2, [r2, #24]
 8002bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	6991      	ldr	r1, [r2, #24]
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	6912      	ldr	r2, [r2, #16]
 8002bda:	0212      	lsls	r2, r2, #8
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	619a      	str	r2, [r3, #24]
      break;
 8002be0:	e082      	b.n	8002ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68b9      	ldr	r1, [r7, #8]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f000 fb33 	bl	8003254 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	6812      	ldr	r2, [r2, #0]
 8002bf6:	69d2      	ldr	r2, [r2, #28]
 8002bf8:	f042 0208 	orr.w	r2, r2, #8
 8002bfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	6812      	ldr	r2, [r2, #0]
 8002c06:	69d2      	ldr	r2, [r2, #28]
 8002c08:	f022 0204 	bic.w	r2, r2, #4
 8002c0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	6812      	ldr	r2, [r2, #0]
 8002c16:	69d1      	ldr	r1, [r2, #28]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	6912      	ldr	r2, [r2, #16]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	61da      	str	r2, [r3, #28]
      break;
 8002c20:	e062      	b.n	8002ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68b9      	ldr	r1, [r7, #8]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 fb9b 	bl	8003364 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	6812      	ldr	r2, [r2, #0]
 8002c36:	69d2      	ldr	r2, [r2, #28]
 8002c38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	6812      	ldr	r2, [r2, #0]
 8002c46:	69d2      	ldr	r2, [r2, #28]
 8002c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	6812      	ldr	r2, [r2, #0]
 8002c56:	69d1      	ldr	r1, [r2, #28]
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	6912      	ldr	r2, [r2, #16]
 8002c5c:	0212      	lsls	r2, r2, #8
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	61da      	str	r2, [r3, #28]
      break;
 8002c62:	e041      	b.n	8002ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 fbe4 	bl	8003438 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	6812      	ldr	r2, [r2, #0]
 8002c78:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002c7a:	f042 0208 	orr.w	r2, r2, #8
 8002c7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002c8a:	f022 0204 	bic.w	r2, r2, #4
 8002c8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	6912      	ldr	r2, [r2, #16]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002ca2:	e021      	b.n	8002ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 fc28 	bl	8003500 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	6812      	ldr	r2, [r2, #0]
 8002cb8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cbe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	6812      	ldr	r2, [r2, #0]
 8002cd8:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	6912      	ldr	r2, [r2, #16]
 8002cde:	0212      	lsls	r2, r2, #8
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002ce4:	e000      	b.n	8002ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8002ce6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop

08002d04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <HAL_TIM_ConfigClockSource+0x18>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e0ba      	b.n	8002e92 <HAL_TIM_ConfigClockSource+0x18e>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d46:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b40      	cmp	r3, #64	; 0x40
 8002d56:	d07a      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0x14a>
 8002d58:	2b40      	cmp	r3, #64	; 0x40
 8002d5a:	d80d      	bhi.n	8002d78 <HAL_TIM_ConfigClockSource+0x74>
 8002d5c:	2b10      	cmp	r3, #16
 8002d5e:	f000 8086 	beq.w	8002e6e <HAL_TIM_ConfigClockSource+0x16a>
 8002d62:	2b10      	cmp	r3, #16
 8002d64:	d803      	bhi.n	8002d6e <HAL_TIM_ConfigClockSource+0x6a>
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 8081 	beq.w	8002e6e <HAL_TIM_ConfigClockSource+0x16a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002d6c:	e088      	b.n	8002e80 <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 8002d6e:	2b20      	cmp	r3, #32
 8002d70:	d07d      	beq.n	8002e6e <HAL_TIM_ConfigClockSource+0x16a>
 8002d72:	2b30      	cmp	r3, #48	; 0x30
 8002d74:	d07b      	beq.n	8002e6e <HAL_TIM_ConfigClockSource+0x16a>
      break;
 8002d76:	e083      	b.n	8002e80 <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 8002d78:	2b70      	cmp	r3, #112	; 0x70
 8002d7a:	d018      	beq.n	8002dae <HAL_TIM_ConfigClockSource+0xaa>
 8002d7c:	2b70      	cmp	r3, #112	; 0x70
 8002d7e:	d804      	bhi.n	8002d8a <HAL_TIM_ConfigClockSource+0x86>
 8002d80:	2b50      	cmp	r3, #80	; 0x50
 8002d82:	d044      	beq.n	8002e0e <HAL_TIM_ConfigClockSource+0x10a>
 8002d84:	2b60      	cmp	r3, #96	; 0x60
 8002d86:	d052      	beq.n	8002e2e <HAL_TIM_ConfigClockSource+0x12a>
      break;
 8002d88:	e07a      	b.n	8002e80 <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 8002d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d8e:	d003      	beq.n	8002d98 <HAL_TIM_ConfigClockSource+0x94>
 8002d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d94:	d028      	beq.n	8002de8 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8002d96:	e073      	b.n	8002e80 <HAL_TIM_ConfigClockSource+0x17c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da6:	f023 0307 	bic.w	r3, r3, #7
 8002daa:	6093      	str	r3, [r2, #8]
      break;
 8002dac:	e068      	b.n	8002e80 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ETR_SetConfig(htim->Instance,
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	6899      	ldr	r1, [r3, #8]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f000 fda3 	bl	8003908 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dd4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ddc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	609a      	str	r2, [r3, #8]
      break;
 8002de6:	e04b      	b.n	8002e80 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ETR_SetConfig(htim->Instance,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6818      	ldr	r0, [r3, #0]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	6899      	ldr	r1, [r3, #8]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f000 fd86 	bl	8003908 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	6892      	ldr	r2, [r2, #8]
 8002e06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e0a:	609a      	str	r2, [r3, #8]
      break;
 8002e0c:	e038      	b.n	8002e80 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	6859      	ldr	r1, [r3, #4]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	f000 fc44 	bl	80036a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2150      	movs	r1, #80	; 0x50
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 fd53 	bl	80038d2 <TIM_ITRx_SetConfig>
      break;
 8002e2c:	e028      	b.n	8002e80 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	6859      	ldr	r1, [r3, #4]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f000 fca0 	bl	8003780 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2160      	movs	r1, #96	; 0x60
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fd43 	bl	80038d2 <TIM_ITRx_SetConfig>
      break;
 8002e4c:	e018      	b.n	8002e80 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	6859      	ldr	r1, [r3, #4]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f000 fc24 	bl	80036a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2140      	movs	r1, #64	; 0x40
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 fd33 	bl	80038d2 <TIM_ITRx_SetConfig>
      break;
 8002e6c:	e008      	b.n	8002e80 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4619      	mov	r1, r3
 8002e78:	4610      	mov	r0, r2
 8002e7a:	f000 fd2a 	bl	80038d2 <TIM_ITRx_SetConfig>
      break;
 8002e7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a40      	ldr	r2, [pc, #256]	; (8003000 <TIM_Base_SetConfig+0x114>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d013      	beq.n	8002f2c <TIM_Base_SetConfig+0x40>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f0a:	d00f      	beq.n	8002f2c <TIM_Base_SetConfig+0x40>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a3d      	ldr	r2, [pc, #244]	; (8003004 <TIM_Base_SetConfig+0x118>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d00b      	beq.n	8002f2c <TIM_Base_SetConfig+0x40>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a3c      	ldr	r2, [pc, #240]	; (8003008 <TIM_Base_SetConfig+0x11c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d007      	beq.n	8002f2c <TIM_Base_SetConfig+0x40>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a3b      	ldr	r2, [pc, #236]	; (800300c <TIM_Base_SetConfig+0x120>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d003      	beq.n	8002f2c <TIM_Base_SetConfig+0x40>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a3a      	ldr	r2, [pc, #232]	; (8003010 <TIM_Base_SetConfig+0x124>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d108      	bne.n	8002f3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a2f      	ldr	r2, [pc, #188]	; (8003000 <TIM_Base_SetConfig+0x114>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d01f      	beq.n	8002f86 <TIM_Base_SetConfig+0x9a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4c:	d01b      	beq.n	8002f86 <TIM_Base_SetConfig+0x9a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a2c      	ldr	r2, [pc, #176]	; (8003004 <TIM_Base_SetConfig+0x118>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d017      	beq.n	8002f86 <TIM_Base_SetConfig+0x9a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a2b      	ldr	r2, [pc, #172]	; (8003008 <TIM_Base_SetConfig+0x11c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d013      	beq.n	8002f86 <TIM_Base_SetConfig+0x9a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a2a      	ldr	r2, [pc, #168]	; (800300c <TIM_Base_SetConfig+0x120>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d00f      	beq.n	8002f86 <TIM_Base_SetConfig+0x9a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a29      	ldr	r2, [pc, #164]	; (8003010 <TIM_Base_SetConfig+0x124>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00b      	beq.n	8002f86 <TIM_Base_SetConfig+0x9a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a28      	ldr	r2, [pc, #160]	; (8003014 <TIM_Base_SetConfig+0x128>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d007      	beq.n	8002f86 <TIM_Base_SetConfig+0x9a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a27      	ldr	r2, [pc, #156]	; (8003018 <TIM_Base_SetConfig+0x12c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d003      	beq.n	8002f86 <TIM_Base_SetConfig+0x9a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a26      	ldr	r2, [pc, #152]	; (800301c <TIM_Base_SetConfig+0x130>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d108      	bne.n	8002f98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a10      	ldr	r2, [pc, #64]	; (8003000 <TIM_Base_SetConfig+0x114>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d00f      	beq.n	8002fe4 <TIM_Base_SetConfig+0xf8>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a12      	ldr	r2, [pc, #72]	; (8003010 <TIM_Base_SetConfig+0x124>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d00b      	beq.n	8002fe4 <TIM_Base_SetConfig+0xf8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a11      	ldr	r2, [pc, #68]	; (8003014 <TIM_Base_SetConfig+0x128>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d007      	beq.n	8002fe4 <TIM_Base_SetConfig+0xf8>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a10      	ldr	r2, [pc, #64]	; (8003018 <TIM_Base_SetConfig+0x12c>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d003      	beq.n	8002fe4 <TIM_Base_SetConfig+0xf8>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a0f      	ldr	r2, [pc, #60]	; (800301c <TIM_Base_SetConfig+0x130>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d103      	bne.n	8002fec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	615a      	str	r2, [r3, #20]
}
 8002ff2:	bf00      	nop
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40012c00 	.word	0x40012c00
 8003004:	40000400 	.word	0x40000400
 8003008:	40000800 	.word	0x40000800
 800300c:	40000c00 	.word	0x40000c00
 8003010:	40013400 	.word	0x40013400
 8003014:	40014000 	.word	0x40014000
 8003018:	40014400 	.word	0x40014400
 800301c:	40014800 	.word	0x40014800

08003020 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	f023 0201 	bic.w	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f023 0303 	bic.w	r3, r3, #3
 800305a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f023 0302 	bic.w	r3, r3, #2
 800306c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4313      	orrs	r3, r2
 8003076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a2c      	ldr	r2, [pc, #176]	; (800312c <TIM_OC1_SetConfig+0x10c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d00f      	beq.n	80030a0 <TIM_OC1_SetConfig+0x80>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a2b      	ldr	r2, [pc, #172]	; (8003130 <TIM_OC1_SetConfig+0x110>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d00b      	beq.n	80030a0 <TIM_OC1_SetConfig+0x80>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a2a      	ldr	r2, [pc, #168]	; (8003134 <TIM_OC1_SetConfig+0x114>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d007      	beq.n	80030a0 <TIM_OC1_SetConfig+0x80>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a29      	ldr	r2, [pc, #164]	; (8003138 <TIM_OC1_SetConfig+0x118>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d003      	beq.n	80030a0 <TIM_OC1_SetConfig+0x80>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a28      	ldr	r2, [pc, #160]	; (800313c <TIM_OC1_SetConfig+0x11c>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d10c      	bne.n	80030ba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f023 0308 	bic.w	r3, r3, #8
 80030a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f023 0304 	bic.w	r3, r3, #4
 80030b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a1b      	ldr	r2, [pc, #108]	; (800312c <TIM_OC1_SetConfig+0x10c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d00f      	beq.n	80030e2 <TIM_OC1_SetConfig+0xc2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a1a      	ldr	r2, [pc, #104]	; (8003130 <TIM_OC1_SetConfig+0x110>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00b      	beq.n	80030e2 <TIM_OC1_SetConfig+0xc2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a19      	ldr	r2, [pc, #100]	; (8003134 <TIM_OC1_SetConfig+0x114>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d007      	beq.n	80030e2 <TIM_OC1_SetConfig+0xc2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a18      	ldr	r2, [pc, #96]	; (8003138 <TIM_OC1_SetConfig+0x118>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d003      	beq.n	80030e2 <TIM_OC1_SetConfig+0xc2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a17      	ldr	r2, [pc, #92]	; (800313c <TIM_OC1_SetConfig+0x11c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d111      	bne.n	8003106 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	621a      	str	r2, [r3, #32]
}
 8003120:	bf00      	nop
 8003122:	371c      	adds	r7, #28
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	40012c00 	.word	0x40012c00
 8003130:	40013400 	.word	0x40013400
 8003134:	40014000 	.word	0x40014000
 8003138:	40014400 	.word	0x40014400
 800313c:	40014800 	.word	0x40014800

08003140 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	f023 0210 	bic.w	r2, r3, #16
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800316e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800317a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	021b      	lsls	r3, r3, #8
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4313      	orrs	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f023 0320 	bic.w	r3, r3, #32
 800318e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	4313      	orrs	r3, r2
 800319a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a28      	ldr	r2, [pc, #160]	; (8003240 <TIM_OC2_SetConfig+0x100>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d003      	beq.n	80031ac <TIM_OC2_SetConfig+0x6c>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a27      	ldr	r2, [pc, #156]	; (8003244 <TIM_OC2_SetConfig+0x104>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d10d      	bne.n	80031c8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	4313      	orrs	r3, r2
 80031be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a1d      	ldr	r2, [pc, #116]	; (8003240 <TIM_OC2_SetConfig+0x100>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00f      	beq.n	80031f0 <TIM_OC2_SetConfig+0xb0>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a1c      	ldr	r2, [pc, #112]	; (8003244 <TIM_OC2_SetConfig+0x104>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d00b      	beq.n	80031f0 <TIM_OC2_SetConfig+0xb0>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a1b      	ldr	r2, [pc, #108]	; (8003248 <TIM_OC2_SetConfig+0x108>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d007      	beq.n	80031f0 <TIM_OC2_SetConfig+0xb0>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a1a      	ldr	r2, [pc, #104]	; (800324c <TIM_OC2_SetConfig+0x10c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d003      	beq.n	80031f0 <TIM_OC2_SetConfig+0xb0>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a19      	ldr	r2, [pc, #100]	; (8003250 <TIM_OC2_SetConfig+0x110>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d113      	bne.n	8003218 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	621a      	str	r2, [r3, #32]
}
 8003232:	bf00      	nop
 8003234:	371c      	adds	r7, #28
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40012c00 	.word	0x40012c00
 8003244:	40013400 	.word	0x40013400
 8003248:	40014000 	.word	0x40014000
 800324c:	40014400 	.word	0x40014400
 8003250:	40014800 	.word	0x40014800

08003254 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f023 0303 	bic.w	r3, r3, #3
 800328e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	021b      	lsls	r3, r3, #8
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a27      	ldr	r2, [pc, #156]	; (8003350 <TIM_OC3_SetConfig+0xfc>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d003      	beq.n	80032be <TIM_OC3_SetConfig+0x6a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a26      	ldr	r2, [pc, #152]	; (8003354 <TIM_OC3_SetConfig+0x100>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d10d      	bne.n	80032da <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	021b      	lsls	r3, r3, #8
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a1c      	ldr	r2, [pc, #112]	; (8003350 <TIM_OC3_SetConfig+0xfc>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00f      	beq.n	8003302 <TIM_OC3_SetConfig+0xae>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a1b      	ldr	r2, [pc, #108]	; (8003354 <TIM_OC3_SetConfig+0x100>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00b      	beq.n	8003302 <TIM_OC3_SetConfig+0xae>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a1a      	ldr	r2, [pc, #104]	; (8003358 <TIM_OC3_SetConfig+0x104>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d007      	beq.n	8003302 <TIM_OC3_SetConfig+0xae>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a19      	ldr	r2, [pc, #100]	; (800335c <TIM_OC3_SetConfig+0x108>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d003      	beq.n	8003302 <TIM_OC3_SetConfig+0xae>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a18      	ldr	r2, [pc, #96]	; (8003360 <TIM_OC3_SetConfig+0x10c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d113      	bne.n	800332a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	621a      	str	r2, [r3, #32]
}
 8003344:	bf00      	nop
 8003346:	371c      	adds	r7, #28
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	40012c00 	.word	0x40012c00
 8003354:	40013400 	.word	0x40013400
 8003358:	40014000 	.word	0x40014000
 800335c:	40014400 	.word	0x40014400
 8003360:	40014800 	.word	0x40014800

08003364 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800339e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	021b      	lsls	r3, r3, #8
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	031b      	lsls	r3, r3, #12
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a18      	ldr	r2, [pc, #96]	; (8003424 <TIM_OC4_SetConfig+0xc0>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00f      	beq.n	80033e8 <TIM_OC4_SetConfig+0x84>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a17      	ldr	r2, [pc, #92]	; (8003428 <TIM_OC4_SetConfig+0xc4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d00b      	beq.n	80033e8 <TIM_OC4_SetConfig+0x84>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a16      	ldr	r2, [pc, #88]	; (800342c <TIM_OC4_SetConfig+0xc8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d007      	beq.n	80033e8 <TIM_OC4_SetConfig+0x84>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a15      	ldr	r2, [pc, #84]	; (8003430 <TIM_OC4_SetConfig+0xcc>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d003      	beq.n	80033e8 <TIM_OC4_SetConfig+0x84>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a14      	ldr	r2, [pc, #80]	; (8003434 <TIM_OC4_SetConfig+0xd0>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d109      	bne.n	80033fc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	019b      	lsls	r3, r3, #6
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	621a      	str	r2, [r3, #32]
}
 8003416:	bf00      	nop
 8003418:	371c      	adds	r7, #28
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40012c00 	.word	0x40012c00
 8003428:	40013400 	.word	0x40013400
 800342c:	40014000 	.word	0x40014000
 8003430:	40014400 	.word	0x40014400
 8003434:	40014800 	.word	0x40014800

08003438 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003438:	b480      	push	{r7}
 800343a:	b087      	sub	sp, #28
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800346a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4313      	orrs	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800347c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	041b      	lsls	r3, r3, #16
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	4313      	orrs	r3, r2
 8003488:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a17      	ldr	r2, [pc, #92]	; (80034ec <TIM_OC5_SetConfig+0xb4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00f      	beq.n	80034b2 <TIM_OC5_SetConfig+0x7a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a16      	ldr	r2, [pc, #88]	; (80034f0 <TIM_OC5_SetConfig+0xb8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00b      	beq.n	80034b2 <TIM_OC5_SetConfig+0x7a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a15      	ldr	r2, [pc, #84]	; (80034f4 <TIM_OC5_SetConfig+0xbc>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d007      	beq.n	80034b2 <TIM_OC5_SetConfig+0x7a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a14      	ldr	r2, [pc, #80]	; (80034f8 <TIM_OC5_SetConfig+0xc0>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d003      	beq.n	80034b2 <TIM_OC5_SetConfig+0x7a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a13      	ldr	r2, [pc, #76]	; (80034fc <TIM_OC5_SetConfig+0xc4>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d109      	bne.n	80034c6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	021b      	lsls	r3, r3, #8
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	621a      	str	r2, [r3, #32]
}
 80034e0:	bf00      	nop
 80034e2:	371c      	adds	r7, #28
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	40012c00 	.word	0x40012c00
 80034f0:	40013400 	.word	0x40013400
 80034f4:	40014000 	.word	0x40014000
 80034f8:	40014400 	.word	0x40014400
 80034fc:	40014800 	.word	0x40014800

08003500 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800352e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	021b      	lsls	r3, r3, #8
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	4313      	orrs	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003546:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	051b      	lsls	r3, r3, #20
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a18      	ldr	r2, [pc, #96]	; (80035b8 <TIM_OC6_SetConfig+0xb8>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d00f      	beq.n	800357c <TIM_OC6_SetConfig+0x7c>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a17      	ldr	r2, [pc, #92]	; (80035bc <TIM_OC6_SetConfig+0xbc>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d00b      	beq.n	800357c <TIM_OC6_SetConfig+0x7c>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a16      	ldr	r2, [pc, #88]	; (80035c0 <TIM_OC6_SetConfig+0xc0>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d007      	beq.n	800357c <TIM_OC6_SetConfig+0x7c>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a15      	ldr	r2, [pc, #84]	; (80035c4 <TIM_OC6_SetConfig+0xc4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d003      	beq.n	800357c <TIM_OC6_SetConfig+0x7c>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a14      	ldr	r2, [pc, #80]	; (80035c8 <TIM_OC6_SetConfig+0xc8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d109      	bne.n	8003590 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003582:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	029b      	lsls	r3, r3, #10
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	4313      	orrs	r3, r2
 800358e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	621a      	str	r2, [r3, #32]
}
 80035aa:	bf00      	nop
 80035ac:	371c      	adds	r7, #28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40012c00 	.word	0x40012c00
 80035bc:	40013400 	.word	0x40013400
 80035c0:	40014000 	.word	0x40014000
 80035c4:	40014400 	.word	0x40014400
 80035c8:	40014800 	.word	0x40014800

080035cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
 80035d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	f023 0201 	bic.w	r2, r3, #1
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4a26      	ldr	r2, [pc, #152]	; (8003690 <TIM_TI1_SetConfig+0xc4>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d017      	beq.n	800362a <TIM_TI1_SetConfig+0x5e>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003600:	d013      	beq.n	800362a <TIM_TI1_SetConfig+0x5e>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4a23      	ldr	r2, [pc, #140]	; (8003694 <TIM_TI1_SetConfig+0xc8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d00f      	beq.n	800362a <TIM_TI1_SetConfig+0x5e>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4a22      	ldr	r2, [pc, #136]	; (8003698 <TIM_TI1_SetConfig+0xcc>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00b      	beq.n	800362a <TIM_TI1_SetConfig+0x5e>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4a21      	ldr	r2, [pc, #132]	; (800369c <TIM_TI1_SetConfig+0xd0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d007      	beq.n	800362a <TIM_TI1_SetConfig+0x5e>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4a20      	ldr	r2, [pc, #128]	; (80036a0 <TIM_TI1_SetConfig+0xd4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d003      	beq.n	800362a <TIM_TI1_SetConfig+0x5e>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4a1f      	ldr	r2, [pc, #124]	; (80036a4 <TIM_TI1_SetConfig+0xd8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d101      	bne.n	800362e <TIM_TI1_SetConfig+0x62>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <TIM_TI1_SetConfig+0x64>
 800362e:	2300      	movs	r3, #0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f023 0303 	bic.w	r3, r3, #3
 800363a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4313      	orrs	r3, r2
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	e003      	b.n	800364e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003654:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	b2db      	uxtb	r3, r3
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	4313      	orrs	r3, r2
 8003660:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f023 030a 	bic.w	r3, r3, #10
 8003668:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f003 030a 	and.w	r3, r3, #10
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	4313      	orrs	r3, r2
 8003674:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	621a      	str	r2, [r3, #32]
}
 8003682:	bf00      	nop
 8003684:	371c      	adds	r7, #28
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40012c00 	.word	0x40012c00
 8003694:	40000400 	.word	0x40000400
 8003698:	40000800 	.word	0x40000800
 800369c:	40000c00 	.word	0x40000c00
 80036a0:	40013400 	.word	0x40013400
 80036a4:	40014000 	.word	0x40014000

080036a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	f023 0201 	bic.w	r2, r3, #1
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4313      	orrs	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f023 030a 	bic.w	r3, r3, #10
 80036e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	621a      	str	r2, [r3, #32]
}
 80036fa:	bf00      	nop
 80036fc:	371c      	adds	r7, #28
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003706:	b480      	push	{r7}
 8003708:	b087      	sub	sp, #28
 800370a:	af00      	add	r7, sp, #0
 800370c:	60f8      	str	r0, [r7, #12]
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	607a      	str	r2, [r7, #4]
 8003712:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	f023 0210 	bic.w	r2, r3, #16
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003732:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	021b      	lsls	r3, r3, #8
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003744:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	031b      	lsls	r3, r3, #12
 800374a:	b29b      	uxth	r3, r3
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003758:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	4313      	orrs	r3, r2
 8003766:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	621a      	str	r2, [r3, #32]
}
 8003774:	bf00      	nop
 8003776:	371c      	adds	r7, #28
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	f023 0210 	bic.w	r2, r3, #16
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	031b      	lsls	r3, r3, #12
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	621a      	str	r2, [r3, #32]
}
 80037d4:	bf00      	nop
 80037d6:	371c      	adds	r7, #28
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
 80037ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f023 0303 	bic.w	r3, r3, #3
 800380c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4313      	orrs	r3, r2
 8003814:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800381c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	b2db      	uxtb	r3, r3
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	4313      	orrs	r3, r2
 8003828:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003830:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	021b      	lsls	r3, r3, #8
 8003836:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	4313      	orrs	r3, r2
 800383e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	621a      	str	r2, [r3, #32]
}
 800384c:	bf00      	nop
 800384e:	371c      	adds	r7, #28
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003884:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	021b      	lsls	r3, r3, #8
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003896:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	031b      	lsls	r3, r3, #12
 800389c:	b29b      	uxth	r3, r3
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80038aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	031b      	lsls	r3, r3, #12
 80038b0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	621a      	str	r2, [r3, #32]
}
 80038c6:	bf00      	nop
 80038c8:	371c      	adds	r7, #28
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b085      	sub	sp, #20
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
 80038da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f043 0307 	orr.w	r3, r3, #7
 80038f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	609a      	str	r2, [r3, #8]
}
 80038fc:	bf00      	nop
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003908:	b480      	push	{r7}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003922:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	021a      	lsls	r2, r3, #8
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	431a      	orrs	r2, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	4313      	orrs	r3, r2
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	4313      	orrs	r3, r2
 8003934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	609a      	str	r2, [r3, #8]
}
 800393c:	bf00      	nop
 800393e:	371c      	adds	r7, #28
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003948:	b480      	push	{r7}
 800394a:	b087      	sub	sp, #28
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f003 031f 	and.w	r3, r3, #31
 800395a:	2201      	movs	r2, #1
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a1a      	ldr	r2, [r3, #32]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	43db      	mvns	r3, r3
 800396a:	401a      	ands	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a1a      	ldr	r2, [r3, #32]
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f003 031f 	and.w	r3, r3, #31
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	fa01 f303 	lsl.w	r3, r1, r3
 8003980:	431a      	orrs	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	621a      	str	r2, [r3, #32]
}
 8003986:	bf00      	nop
 8003988:	371c      	adds	r7, #28
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
	...

08003994 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e045      	b.n	8003a38 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a1c      	ldr	r2, [pc, #112]	; (8003a44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d004      	beq.n	80039e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a1b      	ldr	r2, [pc, #108]	; (8003a48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d108      	bne.n	80039f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80039e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a0a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	40012c00 	.word	0x40012c00
 8003a48:	40013400 	.word	0x40013400

08003a4c <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e043      	b.n	8003b22 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d106      	bne.n	8003ab4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f002 f8c2 	bl	8005c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2224      	movs	r2, #36	; 0x24
 8003ab8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6812      	ldr	r2, [r2, #0]
 8003ac4:	6812      	ldr	r2, [r2, #0]
 8003ac6:	f022 0201 	bic.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f9ed 	bl	8003eac <UART_SetConfig>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d101      	bne.n	8003adc <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e022      	b.n	8003b22 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 fd1f 	bl	8004528 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6812      	ldr	r2, [r2, #0]
 8003af2:	6852      	ldr	r2, [r2, #4]
 8003af4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003af8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6812      	ldr	r2, [r2, #0]
 8003b02:	6892      	ldr	r2, [r2, #8]
 8003b04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b08:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6812      	ldr	r2, [r2, #0]
 8003b12:	6812      	ldr	r2, [r2, #0]
 8003b14:	f042 0201 	orr.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fda6 	bl	800466c <UART_CheckIdleState>
 8003b20:	4603      	mov	r3, r0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
	...

08003b2c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	4613      	mov	r3, r2
 8003b38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b20      	cmp	r3, #32
 8003b44:	d15a      	bne.n	8003bfc <HAL_UART_Receive_DMA+0xd0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <HAL_UART_Receive_DMA+0x26>
 8003b4c:	88fb      	ldrh	r3, [r7, #6]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e053      	b.n	8003bfe <HAL_UART_Receive_DMA+0xd2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_UART_Receive_DMA+0x38>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e04c      	b.n	8003bfe <HAL_UART_Receive_DMA+0xd2>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	88fa      	ldrh	r2, [r7, #6]
 8003b76:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	675a      	str	r2, [r3, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2222      	movs	r2, #34	; 0x22
 8003b84:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b8c:	4a1e      	ldr	r2, [pc, #120]	; (8003c08 <HAL_UART_Receive_DMA+0xdc>)
 8003b8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b94:	4a1d      	ldr	r2, [pc, #116]	; (8003c0c <HAL_UART_Receive_DMA+0xe0>)
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b9c:	4a1c      	ldr	r2, [pc, #112]	; (8003c10 <HAL_UART_Receive_DMA+0xe4>)
 8003b9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3324      	adds	r3, #36	; 0x24
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb8:	461a      	mov	r2, r3
 8003bba:	88fb      	ldrh	r3, [r7, #6]
 8003bbc:	f7fc feae 	bl	800091c <HAL_DMA_Start_IT>

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	6812      	ldr	r2, [r2, #0]
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bd6:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	6812      	ldr	r2, [r2, #0]
 8003be0:	6892      	ldr	r2, [r2, #8]
 8003be2:	f042 0201 	orr.w	r2, r2, #1
 8003be6:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	6812      	ldr	r2, [r2, #0]
 8003bf0:	6892      	ldr	r2, [r2, #8]
 8003bf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bf6:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	e000      	b.n	8003bfe <HAL_UART_Receive_DMA+0xd2>
  }
  else
  {
    return HAL_BUSY;
 8003bfc:	2302      	movs	r3, #2
  }
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	08004801 	.word	0x08004801
 8003c0c:	0800486b 	.word	0x0800486b
 8003c10:	08004887 	.word	0x08004887

08003c14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	613b      	str	r3, [r7, #16]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	60fb      	str	r3, [r7, #12]
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	60bb      	str	r3, [r7, #8]
  if (errorflags == RESET)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d113      	bne.n	8003c6a <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != RESET)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
            || ((cr3its & USART_CR3_RXFTIE) != RESET)))
#else
    if (((isrflags & USART_ISR_RXNE) != RESET)
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f003 0320 	and.w	r3, r3, #32
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00e      	beq.n	8003c6a <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d009      	beq.n	8003c6a <HAL_UART_IRQHandler+0x56>
#endif
    {
      if (huart->RxISR != NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 80fd 	beq.w	8003e5a <HAL_UART_IRQHandler+0x246>
      {
        huart->RxISR(huart);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	4798      	blx	r3
      }
      return;
 8003c68:	e0f7      	b.n	8003e5a <HAL_UART_IRQHandler+0x246>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != RESET)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != RESET))))
#else
  if ((errorflags != RESET)
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 80bf 	beq.w	8003df0 <HAL_UART_IRQHandler+0x1dc>
      && (((cr3its & USART_CR3_EIE) != RESET)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d105      	bne.n	8003c88 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 80b4 	beq.w	8003df0 <HAL_UART_IRQHandler+0x1dc>
#endif
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00e      	beq.n	8003cb0 <HAL_UART_IRQHandler+0x9c>
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d009      	beq.n	8003cb0 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca8:	f043 0201 	orr.w	r2, r3, #1
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00e      	beq.n	8003cd8 <HAL_UART_IRQHandler+0xc4>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d009      	beq.n	8003cd8 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2202      	movs	r2, #2
 8003cca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd0:	f043 0204 	orr.w	r2, r3, #4
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00e      	beq.n	8003d00 <HAL_UART_IRQHandler+0xec>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d009      	beq.n	8003d00 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2204      	movs	r2, #4
 8003cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf8:	f043 0202 	orr.w	r2, r3, #2
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	675a      	str	r2, [r3, #116]	; 0x74
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != RESET)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)))
#else
    if (((isrflags & USART_ISR_ORE) != RESET)
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d013      	beq.n	8003d32 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f003 0320 	and.w	r3, r3, #32
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d104      	bne.n	8003d1e <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != RESET)))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d009      	beq.n	8003d32 <HAL_UART_IRQHandler+0x11e>
#endif
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2208      	movs	r2, #8
 8003d24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2a:	f043 0208 	orr.w	r2, r3, #8
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 8091 	beq.w	8003e5e <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != RESET)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
              || ((cr3its & USART_CR3_RXFTIE) != RESET)))
#else
      if (((isrflags & USART_ISR_RXNE) != RESET)
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f003 0320 	and.w	r3, r3, #32
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00c      	beq.n	8003d60 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d007      	beq.n	8003d60 <HAL_UART_IRQHandler+0x14c>
#endif
      {
        if (huart->RxISR != NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d003      	beq.n	8003d60 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d106      	bne.n	8003d7a <HAL_UART_IRQHandler+0x166>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003d76:	2b40      	cmp	r3, #64	; 0x40
 8003d78:	d131      	bne.n	8003dde <HAL_UART_IRQHandler+0x1ca>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 fd1f 	bl	80047be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8a:	2b40      	cmp	r3, #64	; 0x40
 8003d8c:	d123      	bne.n	8003dd6 <HAL_UART_IRQHandler+0x1c2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6812      	ldr	r2, [r2, #0]
 8003d96:	6892      	ldr	r2, [r2, #8]
 8003d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d9c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d013      	beq.n	8003dce <HAL_UART_IRQHandler+0x1ba>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003daa:	4a30      	ldr	r2, [pc, #192]	; (8003e6c <HAL_UART_IRQHandler+0x258>)
 8003dac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fc fe12 	bl	80009dc <HAL_DMA_Abort_IT>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d016      	beq.n	8003dec <HAL_UART_IRQHandler+0x1d8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003dc8:	4610      	mov	r0, r2
 8003dca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dcc:	e00e      	b.n	8003dec <HAL_UART_IRQHandler+0x1d8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f862 	bl	8003e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd4:	e00a      	b.n	8003dec <HAL_UART_IRQHandler+0x1d8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f85e 	bl	8003e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ddc:	e006      	b.n	8003dec <HAL_UART_IRQHandler+0x1d8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f85a 	bl	8003e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	675a      	str	r2, [r3, #116]	; 0x74
      }
    }
    return;
 8003dea:	e038      	b.n	8003e5e <HAL_UART_IRQHandler+0x24a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dec:	bf00      	nop
    return;
 8003dee:	e036      	b.n	8003e5e <HAL_UART_IRQHandler+0x24a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00d      	beq.n	8003e16 <HAL_UART_IRQHandler+0x202>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_UART_IRQHandler+0x202>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fda5 	bl	800495e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e14:	e026      	b.n	8003e64 <HAL_UART_IRQHandler+0x250>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != RESET)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != RESET)
          || ((cr3its & USART_CR3_TXFTIE) != RESET)))
#else
  if (((isrflags & USART_ISR_TXE) != RESET)
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00d      	beq.n	8003e3c <HAL_UART_IRQHandler+0x228>
      && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d008      	beq.n	8003e3c <HAL_UART_IRQHandler+0x228>
#endif
  {
    if (huart->TxISR != NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d017      	beq.n	8003e62 <HAL_UART_IRQHandler+0x24e>
    {
      huart->TxISR(huart);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	4798      	blx	r3
    }
    return;
 8003e3a:	e012      	b.n	8003e62 <HAL_UART_IRQHandler+0x24e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00e      	beq.n	8003e64 <HAL_UART_IRQHandler+0x250>
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d009      	beq.n	8003e64 <HAL_UART_IRQHandler+0x250>
  {
    UART_EndTransmit_IT(huart);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 fd6a 	bl	800492a <UART_EndTransmit_IT>
    return;
 8003e56:	bf00      	nop
 8003e58:	e004      	b.n	8003e64 <HAL_UART_IRQHandler+0x250>
      return;
 8003e5a:	bf00      	nop
 8003e5c:	e002      	b.n	8003e64 <HAL_UART_IRQHandler+0x250>
    return;
 8003e5e:	bf00      	nop
 8003e60:	e000      	b.n	8003e64 <HAL_UART_IRQHandler+0x250>
    return;
 8003e62:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif
}
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	080048ff 	.word	0x080048ff

08003e70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003eac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003eb0:	b088      	sub	sp, #32
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61fb      	str	r3, [r7, #28]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003eba:	2310      	movs	r3, #16
 8003ebc:	76fb      	strb	r3, [r7, #27]
  uint16_t brrtemp                    = 0x0000U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	817b      	strh	r3, [r7, #10]
  uint32_t usartdiv                   = 0x00000000U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689a      	ldr	r2, [r3, #8]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6819      	ldr	r1, [r3, #0]
 8003ef0:	4baa      	ldr	r3, [pc, #680]	; (800419c <UART_SetConfig+0x2f0>)
 8003ef2:	400b      	ands	r3, r1
 8003ef4:	69f9      	ldr	r1, [r7, #28]
 8003ef6:	430b      	orrs	r3, r1
 8003ef8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6812      	ldr	r2, [r2, #0]
 8003f02:	6852      	ldr	r2, [r2, #4]
 8003f04:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	68d2      	ldr	r2, [r2, #12]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4aa1      	ldr	r2, [pc, #644]	; (80041a0 <UART_SetConfig+0x2f4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d004      	beq.n	8003f2a <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	69fa      	ldr	r2, [r7, #28]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6812      	ldr	r2, [r2, #0]
 8003f32:	6892      	ldr	r2, [r2, #8]
 8003f34:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8003f38:	69fa      	ldr	r2, [r7, #28]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a98      	ldr	r2, [pc, #608]	; (80041a4 <UART_SetConfig+0x2f8>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d121      	bne.n	8003f8c <UART_SetConfig+0xe0>
 8003f48:	4b97      	ldr	r3, [pc, #604]	; (80041a8 <UART_SetConfig+0x2fc>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	2b03      	cmp	r3, #3
 8003f54:	d816      	bhi.n	8003f84 <UART_SetConfig+0xd8>
 8003f56:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <UART_SetConfig+0xb0>)
 8003f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5c:	08003f6d 	.word	0x08003f6d
 8003f60:	08003f79 	.word	0x08003f79
 8003f64:	08003f73 	.word	0x08003f73
 8003f68:	08003f7f 	.word	0x08003f7f
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	76fb      	strb	r3, [r7, #27]
 8003f70:	e0e4      	b.n	800413c <UART_SetConfig+0x290>
 8003f72:	2302      	movs	r3, #2
 8003f74:	76fb      	strb	r3, [r7, #27]
 8003f76:	e0e1      	b.n	800413c <UART_SetConfig+0x290>
 8003f78:	2304      	movs	r3, #4
 8003f7a:	76fb      	strb	r3, [r7, #27]
 8003f7c:	e0de      	b.n	800413c <UART_SetConfig+0x290>
 8003f7e:	2308      	movs	r3, #8
 8003f80:	76fb      	strb	r3, [r7, #27]
 8003f82:	e0db      	b.n	800413c <UART_SetConfig+0x290>
 8003f84:	2310      	movs	r3, #16
 8003f86:	76fb      	strb	r3, [r7, #27]
 8003f88:	bf00      	nop
 8003f8a:	e0d7      	b.n	800413c <UART_SetConfig+0x290>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a86      	ldr	r2, [pc, #536]	; (80041ac <UART_SetConfig+0x300>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d134      	bne.n	8004000 <UART_SetConfig+0x154>
 8003f96:	4b84      	ldr	r3, [pc, #528]	; (80041a8 <UART_SetConfig+0x2fc>)
 8003f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9c:	f003 030c 	and.w	r3, r3, #12
 8003fa0:	2b0c      	cmp	r3, #12
 8003fa2:	d829      	bhi.n	8003ff8 <UART_SetConfig+0x14c>
 8003fa4:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <UART_SetConfig+0x100>)
 8003fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003faa:	bf00      	nop
 8003fac:	08003fe1 	.word	0x08003fe1
 8003fb0:	08003ff9 	.word	0x08003ff9
 8003fb4:	08003ff9 	.word	0x08003ff9
 8003fb8:	08003ff9 	.word	0x08003ff9
 8003fbc:	08003fed 	.word	0x08003fed
 8003fc0:	08003ff9 	.word	0x08003ff9
 8003fc4:	08003ff9 	.word	0x08003ff9
 8003fc8:	08003ff9 	.word	0x08003ff9
 8003fcc:	08003fe7 	.word	0x08003fe7
 8003fd0:	08003ff9 	.word	0x08003ff9
 8003fd4:	08003ff9 	.word	0x08003ff9
 8003fd8:	08003ff9 	.word	0x08003ff9
 8003fdc:	08003ff3 	.word	0x08003ff3
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	76fb      	strb	r3, [r7, #27]
 8003fe4:	e0aa      	b.n	800413c <UART_SetConfig+0x290>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	76fb      	strb	r3, [r7, #27]
 8003fea:	e0a7      	b.n	800413c <UART_SetConfig+0x290>
 8003fec:	2304      	movs	r3, #4
 8003fee:	76fb      	strb	r3, [r7, #27]
 8003ff0:	e0a4      	b.n	800413c <UART_SetConfig+0x290>
 8003ff2:	2308      	movs	r3, #8
 8003ff4:	76fb      	strb	r3, [r7, #27]
 8003ff6:	e0a1      	b.n	800413c <UART_SetConfig+0x290>
 8003ff8:	2310      	movs	r3, #16
 8003ffa:	76fb      	strb	r3, [r7, #27]
 8003ffc:	bf00      	nop
 8003ffe:	e09d      	b.n	800413c <UART_SetConfig+0x290>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a6a      	ldr	r2, [pc, #424]	; (80041b0 <UART_SetConfig+0x304>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d120      	bne.n	800404c <UART_SetConfig+0x1a0>
 800400a:	4b67      	ldr	r3, [pc, #412]	; (80041a8 <UART_SetConfig+0x2fc>)
 800400c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004010:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004014:	2b10      	cmp	r3, #16
 8004016:	d00f      	beq.n	8004038 <UART_SetConfig+0x18c>
 8004018:	2b10      	cmp	r3, #16
 800401a:	d802      	bhi.n	8004022 <UART_SetConfig+0x176>
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <UART_SetConfig+0x180>
 8004020:	e010      	b.n	8004044 <UART_SetConfig+0x198>
 8004022:	2b20      	cmp	r3, #32
 8004024:	d005      	beq.n	8004032 <UART_SetConfig+0x186>
 8004026:	2b30      	cmp	r3, #48	; 0x30
 8004028:	d009      	beq.n	800403e <UART_SetConfig+0x192>
 800402a:	e00b      	b.n	8004044 <UART_SetConfig+0x198>
 800402c:	2300      	movs	r3, #0
 800402e:	76fb      	strb	r3, [r7, #27]
 8004030:	e084      	b.n	800413c <UART_SetConfig+0x290>
 8004032:	2302      	movs	r3, #2
 8004034:	76fb      	strb	r3, [r7, #27]
 8004036:	e081      	b.n	800413c <UART_SetConfig+0x290>
 8004038:	2304      	movs	r3, #4
 800403a:	76fb      	strb	r3, [r7, #27]
 800403c:	e07e      	b.n	800413c <UART_SetConfig+0x290>
 800403e:	2308      	movs	r3, #8
 8004040:	76fb      	strb	r3, [r7, #27]
 8004042:	e07b      	b.n	800413c <UART_SetConfig+0x290>
 8004044:	2310      	movs	r3, #16
 8004046:	76fb      	strb	r3, [r7, #27]
 8004048:	bf00      	nop
 800404a:	e077      	b.n	800413c <UART_SetConfig+0x290>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a58      	ldr	r2, [pc, #352]	; (80041b4 <UART_SetConfig+0x308>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d120      	bne.n	8004098 <UART_SetConfig+0x1ec>
 8004056:	4b54      	ldr	r3, [pc, #336]	; (80041a8 <UART_SetConfig+0x2fc>)
 8004058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004060:	2b40      	cmp	r3, #64	; 0x40
 8004062:	d00f      	beq.n	8004084 <UART_SetConfig+0x1d8>
 8004064:	2b40      	cmp	r3, #64	; 0x40
 8004066:	d802      	bhi.n	800406e <UART_SetConfig+0x1c2>
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <UART_SetConfig+0x1cc>
 800406c:	e010      	b.n	8004090 <UART_SetConfig+0x1e4>
 800406e:	2b80      	cmp	r3, #128	; 0x80
 8004070:	d005      	beq.n	800407e <UART_SetConfig+0x1d2>
 8004072:	2bc0      	cmp	r3, #192	; 0xc0
 8004074:	d009      	beq.n	800408a <UART_SetConfig+0x1de>
 8004076:	e00b      	b.n	8004090 <UART_SetConfig+0x1e4>
 8004078:	2300      	movs	r3, #0
 800407a:	76fb      	strb	r3, [r7, #27]
 800407c:	e05e      	b.n	800413c <UART_SetConfig+0x290>
 800407e:	2302      	movs	r3, #2
 8004080:	76fb      	strb	r3, [r7, #27]
 8004082:	e05b      	b.n	800413c <UART_SetConfig+0x290>
 8004084:	2304      	movs	r3, #4
 8004086:	76fb      	strb	r3, [r7, #27]
 8004088:	e058      	b.n	800413c <UART_SetConfig+0x290>
 800408a:	2308      	movs	r3, #8
 800408c:	76fb      	strb	r3, [r7, #27]
 800408e:	e055      	b.n	800413c <UART_SetConfig+0x290>
 8004090:	2310      	movs	r3, #16
 8004092:	76fb      	strb	r3, [r7, #27]
 8004094:	bf00      	nop
 8004096:	e051      	b.n	800413c <UART_SetConfig+0x290>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a46      	ldr	r2, [pc, #280]	; (80041b8 <UART_SetConfig+0x30c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d124      	bne.n	80040ec <UART_SetConfig+0x240>
 80040a2:	4b41      	ldr	r3, [pc, #260]	; (80041a8 <UART_SetConfig+0x2fc>)
 80040a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b0:	d012      	beq.n	80040d8 <UART_SetConfig+0x22c>
 80040b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b6:	d802      	bhi.n	80040be <UART_SetConfig+0x212>
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d007      	beq.n	80040cc <UART_SetConfig+0x220>
 80040bc:	e012      	b.n	80040e4 <UART_SetConfig+0x238>
 80040be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040c2:	d006      	beq.n	80040d2 <UART_SetConfig+0x226>
 80040c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040c8:	d009      	beq.n	80040de <UART_SetConfig+0x232>
 80040ca:	e00b      	b.n	80040e4 <UART_SetConfig+0x238>
 80040cc:	2300      	movs	r3, #0
 80040ce:	76fb      	strb	r3, [r7, #27]
 80040d0:	e034      	b.n	800413c <UART_SetConfig+0x290>
 80040d2:	2302      	movs	r3, #2
 80040d4:	76fb      	strb	r3, [r7, #27]
 80040d6:	e031      	b.n	800413c <UART_SetConfig+0x290>
 80040d8:	2304      	movs	r3, #4
 80040da:	76fb      	strb	r3, [r7, #27]
 80040dc:	e02e      	b.n	800413c <UART_SetConfig+0x290>
 80040de:	2308      	movs	r3, #8
 80040e0:	76fb      	strb	r3, [r7, #27]
 80040e2:	e02b      	b.n	800413c <UART_SetConfig+0x290>
 80040e4:	2310      	movs	r3, #16
 80040e6:	76fb      	strb	r3, [r7, #27]
 80040e8:	bf00      	nop
 80040ea:	e027      	b.n	800413c <UART_SetConfig+0x290>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a2b      	ldr	r2, [pc, #172]	; (80041a0 <UART_SetConfig+0x2f4>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d123      	bne.n	800413e <UART_SetConfig+0x292>
 80040f6:	4b2c      	ldr	r3, [pc, #176]	; (80041a8 <UART_SetConfig+0x2fc>)
 80040f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004104:	d012      	beq.n	800412c <UART_SetConfig+0x280>
 8004106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800410a:	d802      	bhi.n	8004112 <UART_SetConfig+0x266>
 800410c:	2b00      	cmp	r3, #0
 800410e:	d007      	beq.n	8004120 <UART_SetConfig+0x274>
 8004110:	e012      	b.n	8004138 <UART_SetConfig+0x28c>
 8004112:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004116:	d006      	beq.n	8004126 <UART_SetConfig+0x27a>
 8004118:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800411c:	d009      	beq.n	8004132 <UART_SetConfig+0x286>
 800411e:	e00b      	b.n	8004138 <UART_SetConfig+0x28c>
 8004120:	2300      	movs	r3, #0
 8004122:	76fb      	strb	r3, [r7, #27]
 8004124:	e00a      	b.n	800413c <UART_SetConfig+0x290>
 8004126:	2302      	movs	r3, #2
 8004128:	76fb      	strb	r3, [r7, #27]
 800412a:	e007      	b.n	800413c <UART_SetConfig+0x290>
 800412c:	2304      	movs	r3, #4
 800412e:	76fb      	strb	r3, [r7, #27]
 8004130:	e004      	b.n	800413c <UART_SetConfig+0x290>
 8004132:	2308      	movs	r3, #8
 8004134:	76fb      	strb	r3, [r7, #27]
 8004136:	e001      	b.n	800413c <UART_SetConfig+0x290>
 8004138:	2310      	movs	r3, #16
 800413a:	76fb      	strb	r3, [r7, #27]
 800413c:	bf00      	nop

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a17      	ldr	r2, [pc, #92]	; (80041a0 <UART_SetConfig+0x2f4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	f040 80ee 	bne.w	8004326 <UART_SetConfig+0x47a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800414a:	7efb      	ldrb	r3, [r7, #27]
 800414c:	2b08      	cmp	r3, #8
 800414e:	d837      	bhi.n	80041c0 <UART_SetConfig+0x314>
 8004150:	a201      	add	r2, pc, #4	; (adr r2, 8004158 <UART_SetConfig+0x2ac>)
 8004152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004156:	bf00      	nop
 8004158:	0800417d 	.word	0x0800417d
 800415c:	080041c1 	.word	0x080041c1
 8004160:	08004185 	.word	0x08004185
 8004164:	080041c1 	.word	0x080041c1
 8004168:	0800418b 	.word	0x0800418b
 800416c:	080041c1 	.word	0x080041c1
 8004170:	080041c1 	.word	0x080041c1
 8004174:	080041c1 	.word	0x080041c1
 8004178:	08004193 	.word	0x08004193
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800417c:	f7fd fc5c 	bl	8001a38 <HAL_RCC_GetPCLK1Freq>
 8004180:	60f8      	str	r0, [r7, #12]
#endif
        break;
 8004182:	e020      	b.n	80041c6 <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004184:	4b0d      	ldr	r3, [pc, #52]	; (80041bc <UART_SetConfig+0x310>)
 8004186:	60fb      	str	r3, [r7, #12]
#endif
        break;
 8004188:	e01d      	b.n	80041c6 <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800418a:	f7fd fbad 	bl	80018e8 <HAL_RCC_GetSysClockFreq>
 800418e:	60f8      	str	r0, [r7, #12]
#endif
        break;
 8004190:	e019      	b.n	80041c6 <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004196:	60fb      	str	r3, [r7, #12]
#endif
        break;
 8004198:	e015      	b.n	80041c6 <UART_SetConfig+0x31a>
 800419a:	bf00      	nop
 800419c:	efff69f3 	.word	0xefff69f3
 80041a0:	40008000 	.word	0x40008000
 80041a4:	40013800 	.word	0x40013800
 80041a8:	40021000 	.word	0x40021000
 80041ac:	40004400 	.word	0x40004400
 80041b0:	40004800 	.word	0x40004800
 80041b4:	40004c00 	.word	0x40004c00
 80041b8:	40005000 	.word	0x40005000
 80041bc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	74fb      	strb	r3, [r7, #19]
        break;
 80041c4:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 819e 	beq.w	800450a <UART_SetConfig+0x65e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	4613      	mov	r3, r2
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	441a      	add	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d805      	bhi.n	80041ea <UART_SetConfig+0x33e>
          (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate)))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d202      	bcs.n	80041f0 <UART_SetConfig+0x344>
      {
        ret = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	74fb      	strb	r3, [r7, #19]
 80041ee:	e18c      	b.n	800450a <UART_SetConfig+0x65e>
      }
      else
      {
        switch (clocksource)
 80041f0:	7efb      	ldrb	r3, [r7, #27]
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	f200 8084 	bhi.w	8004300 <UART_SetConfig+0x454>
 80041f8:	a201      	add	r2, pc, #4	; (adr r2, 8004200 <UART_SetConfig+0x354>)
 80041fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fe:	bf00      	nop
 8004200:	08004225 	.word	0x08004225
 8004204:	08004301 	.word	0x08004301
 8004208:	08004265 	.word	0x08004265
 800420c:	08004301 	.word	0x08004301
 8004210:	08004299 	.word	0x08004299
 8004214:	08004301 	.word	0x08004301
 8004218:	08004301 	.word	0x08004301
 800421c:	08004301 	.word	0x08004301
 8004220:	080042d7 	.word	0x080042d7
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004224:	f7fd fc08 	bl	8001a38 <HAL_RCC_GetPCLK1Freq>
 8004228:	4603      	mov	r3, r0
 800422a:	f04f 0400 	mov.w	r4, #0
 800422e:	ea4f 2904 	mov.w	r9, r4, lsl #8
 8004232:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 8004236:	ea4f 2803 	mov.w	r8, r3, lsl #8
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	085b      	lsrs	r3, r3, #1
 8004240:	f04f 0400 	mov.w	r4, #0
 8004244:	eb18 0003 	adds.w	r0, r8, r3
 8004248:	eb49 0104 	adc.w	r1, r9, r4
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f04f 0400 	mov.w	r4, #0
 8004254:	461a      	mov	r2, r3
 8004256:	4623      	mov	r3, r4
 8004258:	f7fb ffb6 	bl	80001c8 <__aeabi_uldivmod>
 800425c:	4603      	mov	r3, r0
 800425e:	460c      	mov	r4, r1
 8004260:	617b      	str	r3, [r7, #20]
#endif
            break;
 8004262:	e050      	b.n	8004306 <UART_SetConfig+0x45a>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	085b      	lsrs	r3, r3, #1
 800426a:	f04f 0400 	mov.w	r4, #0
 800426e:	49ad      	ldr	r1, [pc, #692]	; (8004524 <UART_SetConfig+0x678>)
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	eb13 0801 	adds.w	r8, r3, r1
 8004278:	eb44 0902 	adc.w	r9, r4, r2
 800427c:	4640      	mov	r0, r8
 800427e:	4649      	mov	r1, r9
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f04f 0400 	mov.w	r4, #0
 8004288:	461a      	mov	r2, r3
 800428a:	4623      	mov	r3, r4
 800428c:	f7fb ff9c 	bl	80001c8 <__aeabi_uldivmod>
 8004290:	4603      	mov	r3, r0
 8004292:	460c      	mov	r4, r1
 8004294:	617b      	str	r3, [r7, #20]
#endif
            break;
 8004296:	e036      	b.n	8004306 <UART_SetConfig+0x45a>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004298:	f7fd fb26 	bl	80018e8 <HAL_RCC_GetSysClockFreq>
 800429c:	4603      	mov	r3, r0
 800429e:	461a      	mov	r2, r3
 80042a0:	f04f 0300 	mov.w	r3, #0
 80042a4:	021d      	lsls	r5, r3, #8
 80042a6:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 80042aa:	0214      	lsls	r4, r2, #8
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	085b      	lsrs	r3, r3, #1
 80042b2:	461a      	mov	r2, r3
 80042b4:	f04f 0300 	mov.w	r3, #0
 80042b8:	18a0      	adds	r0, r4, r2
 80042ba:	eb45 0103 	adc.w	r1, r5, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f04f 0400 	mov.w	r4, #0
 80042c6:	461a      	mov	r2, r3
 80042c8:	4623      	mov	r3, r4
 80042ca:	f7fb ff7d 	bl	80001c8 <__aeabi_uldivmod>
 80042ce:	4603      	mov	r3, r0
 80042d0:	460c      	mov	r4, r1
 80042d2:	617b      	str	r3, [r7, #20]
#endif
            break;
 80042d4:	e017      	b.n	8004306 <UART_SetConfig+0x45a>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	085b      	lsrs	r3, r3, #1
 80042dc:	f04f 0400 	mov.w	r4, #0
 80042e0:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80042e4:	f144 0100 	adc.w	r1, r4, #0
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f04f 0400 	mov.w	r4, #0
 80042f0:	461a      	mov	r2, r3
 80042f2:	4623      	mov	r3, r4
 80042f4:	f7fb ff68 	bl	80001c8 <__aeabi_uldivmod>
 80042f8:	4603      	mov	r3, r0
 80042fa:	460c      	mov	r4, r1
 80042fc:	617b      	str	r3, [r7, #20]
#endif
            break;
 80042fe:	e002      	b.n	8004306 <UART_SetConfig+0x45a>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	74fb      	strb	r3, [r7, #19]
            break;
 8004304:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800430c:	d308      	bcc.n	8004320 <UART_SetConfig+0x474>
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004314:	d204      	bcs.n	8004320 <UART_SetConfig+0x474>
        {
          huart->Instance->BRR = usartdiv;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	60da      	str	r2, [r3, #12]
 800431e:	e0f4      	b.n	800450a <UART_SetConfig+0x65e>
        }
        else
        {
          ret = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	74fb      	strb	r3, [r7, #19]
 8004324:	e0f1      	b.n	800450a <UART_SetConfig+0x65e>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800432e:	d17e      	bne.n	800442e <UART_SetConfig+0x582>
  {
    switch (clocksource)
 8004330:	7efb      	ldrb	r3, [r7, #27]
 8004332:	2b08      	cmp	r3, #8
 8004334:	d85b      	bhi.n	80043ee <UART_SetConfig+0x542>
 8004336:	a201      	add	r2, pc, #4	; (adr r2, 800433c <UART_SetConfig+0x490>)
 8004338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433c:	08004361 	.word	0x08004361
 8004340:	0800437f 	.word	0x0800437f
 8004344:	0800439d 	.word	0x0800439d
 8004348:	080043ef 	.word	0x080043ef
 800434c:	080043b9 	.word	0x080043b9
 8004350:	080043ef 	.word	0x080043ef
 8004354:	080043ef 	.word	0x080043ef
 8004358:	080043ef 	.word	0x080043ef
 800435c:	080043d7 	.word	0x080043d7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004360:	f7fd fb6a 	bl	8001a38 <HAL_RCC_GetPCLK1Freq>
 8004364:	4603      	mov	r3, r0
 8004366:	005a      	lsls	r2, r3, #1
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	085b      	lsrs	r3, r3, #1
 800436e:	441a      	add	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	fbb2 f3f3 	udiv	r3, r2, r3
 8004378:	b29b      	uxth	r3, r3
 800437a:	617b      	str	r3, [r7, #20]
#endif
        break;
 800437c:	e03a      	b.n	80043f4 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800437e:	f7fd fb71 	bl	8001a64 <HAL_RCC_GetPCLK2Freq>
 8004382:	4603      	mov	r3, r0
 8004384:	005a      	lsls	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	085b      	lsrs	r3, r3, #1
 800438c:	441a      	add	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	fbb2 f3f3 	udiv	r3, r2, r3
 8004396:	b29b      	uxth	r3, r3
 8004398:	617b      	str	r3, [r7, #20]
#endif
        break;
 800439a:	e02b      	b.n	80043f4 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	085b      	lsrs	r3, r3, #1
 80043a2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80043a6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6852      	ldr	r2, [r2, #4]
 80043ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	617b      	str	r3, [r7, #20]
#endif
        break;
 80043b6:	e01d      	b.n	80043f4 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80043b8:	f7fd fa96 	bl	80018e8 <HAL_RCC_GetSysClockFreq>
 80043bc:	4603      	mov	r3, r0
 80043be:	005a      	lsls	r2, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	085b      	lsrs	r3, r3, #1
 80043c6:	441a      	add	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	617b      	str	r3, [r7, #20]
#endif
        break;
 80043d4:	e00e      	b.n	80043f4 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	085b      	lsrs	r3, r3, #1
 80043dc:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	617b      	str	r3, [r7, #20]
#endif
        break;
 80043ec:	e002      	b.n	80043f4 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	74fb      	strb	r3, [r7, #19]
        break;
 80043f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	2b0f      	cmp	r3, #15
 80043f8:	d916      	bls.n	8004428 <UART_SetConfig+0x57c>
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004400:	d212      	bcs.n	8004428 <UART_SetConfig+0x57c>
    {
      brrtemp = usartdiv & 0xFFF0U;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	b29b      	uxth	r3, r3
 8004406:	f023 030f 	bic.w	r3, r3, #15
 800440a:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	085b      	lsrs	r3, r3, #1
 8004410:	b29b      	uxth	r3, r3
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	b29a      	uxth	r2, r3
 8004418:	897b      	ldrh	r3, [r7, #10]
 800441a:	4313      	orrs	r3, r2
 800441c:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	897a      	ldrh	r2, [r7, #10]
 8004424:	60da      	str	r2, [r3, #12]
 8004426:	e070      	b.n	800450a <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	74fb      	strb	r3, [r7, #19]
 800442c:	e06d      	b.n	800450a <UART_SetConfig+0x65e>
    }
  }
  else
  {
    switch (clocksource)
 800442e:	7efb      	ldrb	r3, [r7, #27]
 8004430:	2b08      	cmp	r3, #8
 8004432:	d859      	bhi.n	80044e8 <UART_SetConfig+0x63c>
 8004434:	a201      	add	r2, pc, #4	; (adr r2, 800443c <UART_SetConfig+0x590>)
 8004436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443a:	bf00      	nop
 800443c:	08004461 	.word	0x08004461
 8004440:	0800447d 	.word	0x0800447d
 8004444:	08004499 	.word	0x08004499
 8004448:	080044e9 	.word	0x080044e9
 800444c:	080044b5 	.word	0x080044b5
 8004450:	080044e9 	.word	0x080044e9
 8004454:	080044e9 	.word	0x080044e9
 8004458:	080044e9 	.word	0x080044e9
 800445c:	080044d1 	.word	0x080044d1
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004460:	f7fd faea 	bl	8001a38 <HAL_RCC_GetPCLK1Freq>
 8004464:	4602      	mov	r2, r0
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	085b      	lsrs	r3, r3, #1
 800446c:	441a      	add	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	fbb2 f3f3 	udiv	r3, r2, r3
 8004476:	b29b      	uxth	r3, r3
 8004478:	617b      	str	r3, [r7, #20]
#endif
        break;
 800447a:	e038      	b.n	80044ee <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800447c:	f7fd faf2 	bl	8001a64 <HAL_RCC_GetPCLK2Freq>
 8004480:	4602      	mov	r2, r0
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	085b      	lsrs	r3, r3, #1
 8004488:	441a      	add	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004492:	b29b      	uxth	r3, r3
 8004494:	617b      	str	r3, [r7, #20]
#endif
        break;
 8004496:	e02a      	b.n	80044ee <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	085b      	lsrs	r3, r3, #1
 800449e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80044a2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6852      	ldr	r2, [r2, #4]
 80044aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	617b      	str	r3, [r7, #20]
#endif
        break;
 80044b2:	e01c      	b.n	80044ee <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80044b4:	f7fd fa18 	bl	80018e8 <HAL_RCC_GetSysClockFreq>
 80044b8:	4602      	mov	r2, r0
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	085b      	lsrs	r3, r3, #1
 80044c0:	441a      	add	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	617b      	str	r3, [r7, #20]
#endif
        break;
 80044ce:	e00e      	b.n	80044ee <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	085b      	lsrs	r3, r3, #1
 80044d6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	617b      	str	r3, [r7, #20]
#endif
        break;
 80044e6:	e002      	b.n	80044ee <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	74fb      	strb	r3, [r7, #19]
        break;
 80044ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2b0f      	cmp	r3, #15
 80044f2:	d908      	bls.n	8004506 <UART_SetConfig+0x65a>
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044fa:	d204      	bcs.n	8004506 <UART_SetConfig+0x65a>
    {
      huart->Instance->BRR = usartdiv;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	60da      	str	r2, [r3, #12]
 8004504:	e001      	b.n	800450a <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004516:	7cfb      	ldrb	r3, [r7, #19]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3720      	adds	r7, #32
 800451c:	46bd      	mov	sp, r7
 800451e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004522:	bf00      	nop
 8004524:	f4240000 	.word	0xf4240000

08004528 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00a      	beq.n	8004552 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6812      	ldr	r2, [r2, #0]
 8004544:	6852      	ldr	r2, [r2, #4]
 8004546:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800454e:	430a      	orrs	r2, r1
 8004550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00a      	beq.n	8004574 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6812      	ldr	r2, [r2, #0]
 8004566:	6852      	ldr	r2, [r2, #4]
 8004568:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004570:	430a      	orrs	r2, r1
 8004572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00a      	beq.n	8004596 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6812      	ldr	r2, [r2, #0]
 8004588:	6852      	ldr	r2, [r2, #4]
 800458a:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004592:	430a      	orrs	r2, r1
 8004594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00a      	beq.n	80045b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6812      	ldr	r2, [r2, #0]
 80045aa:	6852      	ldr	r2, [r2, #4]
 80045ac:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045b4:	430a      	orrs	r2, r1
 80045b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	f003 0310 	and.w	r3, r3, #16
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00a      	beq.n	80045da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6812      	ldr	r2, [r2, #0]
 80045cc:	6892      	ldr	r2, [r2, #8]
 80045ce:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045d6:	430a      	orrs	r2, r1
 80045d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	f003 0320 	and.w	r3, r3, #32
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6812      	ldr	r2, [r2, #0]
 80045ee:	6892      	ldr	r2, [r2, #8]
 80045f0:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045f8:	430a      	orrs	r2, r1
 80045fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004604:	2b00      	cmp	r3, #0
 8004606:	d01a      	beq.n	800463e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6812      	ldr	r2, [r2, #0]
 8004610:	6852      	ldr	r2, [r2, #4]
 8004612:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800461a:	430a      	orrs	r2, r1
 800461c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004626:	d10a      	bne.n	800463e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6812      	ldr	r2, [r2, #0]
 8004630:	6852      	ldr	r2, [r2, #4]
 8004632:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800463a:	430a      	orrs	r2, r1
 800463c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6812      	ldr	r2, [r2, #0]
 8004652:	6852      	ldr	r2, [r2, #4]
 8004654:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800465c:	430a      	orrs	r2, r1
 800465e:	605a      	str	r2, [r3, #4]
  }
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af02      	add	r7, sp, #8
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800467e:	f7fb ff7d 	bl	800057c <HAL_GetTick>
 8004682:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0308 	and.w	r3, r3, #8
 800468e:	2b08      	cmp	r3, #8
 8004690:	d10e      	bne.n	80046b0 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004692:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f82c 	bl	80046fe <UART_WaitOnFlagUntilTimeout>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e022      	b.n	80046f6 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d10e      	bne.n	80046dc <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f816 	bl	80046fe <UART_WaitOnFlagUntilTimeout>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e00c      	b.n	80046f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b084      	sub	sp, #16
 8004702:	af00      	add	r7, sp, #0
 8004704:	60f8      	str	r0, [r7, #12]
 8004706:	60b9      	str	r1, [r7, #8]
 8004708:	603b      	str	r3, [r7, #0]
 800470a:	4613      	mov	r3, r2
 800470c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800470e:	e02c      	b.n	800476a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004716:	d028      	beq.n	800476a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d007      	beq.n	800472e <UART_WaitOnFlagUntilTimeout+0x30>
 800471e:	f7fb ff2d 	bl	800057c <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	1ad2      	subs	r2, r2, r3
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	429a      	cmp	r2, r3
 800472c:	d91d      	bls.n	800476a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	6812      	ldr	r2, [r2, #0]
 8004736:	6812      	ldr	r2, [r2, #0]
 8004738:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800473c:	601a      	str	r2, [r3, #0]
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	6812      	ldr	r2, [r2, #0]
 8004746:	6892      	ldr	r2, [r2, #8]
 8004748:	f022 0201 	bic.w	r2, r2, #1
 800474c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2220      	movs	r2, #32
 800475a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e00f      	b.n	800478a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	401a      	ands	r2, r3
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	429a      	cmp	r2, r3
 8004778:	bf0c      	ite	eq
 800477a:	2301      	moveq	r3, #1
 800477c:	2300      	movne	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	79fb      	ldrb	r3, [r7, #7]
 8004784:	429a      	cmp	r2, r3
 8004786:	d0c3      	beq.n	8004710 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6812      	ldr	r2, [r2, #0]
 80047a2:	6812      	ldr	r2, [r2, #0]
 80047a4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80047a8:	601a      	str	r2, [r3, #0]
#endif

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2220      	movs	r2, #32
 80047ae:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6812      	ldr	r2, [r2, #0]
 80047ce:	6812      	ldr	r2, [r2, #0]
 80047d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80047d4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6812      	ldr	r2, [r2, #0]
 80047de:	6892      	ldr	r2, [r2, #8]
 80047e0:	f022 0201 	bic.w	r2, r2, #1
 80047e4:	609a      	str	r2, [r3, #8]
#endif

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	661a      	str	r2, [r3, #96]	; 0x60
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0320 	and.w	r3, r3, #32
 8004818:	2b00      	cmp	r3, #0
 800481a:	d11f      	bne.n	800485c <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	6812      	ldr	r2, [r2, #0]
 800482c:	6812      	ldr	r2, [r2, #0]
 800482e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004832:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	6812      	ldr	r2, [r2, #0]
 800483c:	6892      	ldr	r2, [r2, #8]
 800483e:	f022 0201 	bic.w	r2, r2, #1
 8004842:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	6812      	ldr	r2, [r2, #0]
 800484c:	6892      	ldr	r2, [r2, #8]
 800484e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004852:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2220      	movs	r2, #32
 8004858:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f000 fb1b 	bl	8004e98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004862:	bf00      	nop
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b084      	sub	sp, #16
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004876:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f7ff fb03 	bl	8003e84 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800487e:	bf00      	nop
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b084      	sub	sp, #16
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004892:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((huart->gState == HAL_UART_STATE_BUSY_TX)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b21      	cmp	r3, #33	; 0x21
 800489e:	d10d      	bne.n	80048bc <UART_DMAError+0x36>
      && (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048aa:	2b80      	cmp	r3, #128	; 0x80
 80048ac:	d106      	bne.n	80048bc <UART_DMAError+0x36>
  {
    huart->TxXferCount = 0U;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f7ff ff6b 	bl	8004792 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b22      	cmp	r3, #34	; 0x22
 80048c6:	d10d      	bne.n	80048e4 <UART_DMAError+0x5e>
      && (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d2:	2b40      	cmp	r3, #64	; 0x40
 80048d4:	d106      	bne.n	80048e4 <UART_DMAError+0x5e>
  {
    huart->RxXferCount = 0U;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f7ff ff6d 	bl	80047be <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e8:	f043 0210 	orr.w	r2, r3, #16
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f7ff fad1 	bl	8003e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048f6:	bf00      	nop
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b084      	sub	sp, #16
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f7ff fabb 	bl	8003e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004922:	bf00      	nop
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <UART_EndTransmit_IT>:
  * @param huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6812      	ldr	r2, [r2, #0]
 800493a:	6812      	ldr	r2, [r2, #0]
 800493c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004940:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2220      	movs	r2, #32
 8004946:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f7ff fa8d 	bl	8003e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004956:	bf00      	nop
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
	...

08004974 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800497a:	4a10      	ldr	r2, [pc, #64]	; (80049bc <MX_DMA_Init+0x48>)
 800497c:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <MX_DMA_Init+0x48>)
 800497e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004980:	f043 0301 	orr.w	r3, r3, #1
 8004984:	6493      	str	r3, [r2, #72]	; 0x48
 8004986:	4b0d      	ldr	r3, [pc, #52]	; (80049bc <MX_DMA_Init+0x48>)
 8004988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	607b      	str	r3, [r7, #4]
 8004990:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8004992:	2200      	movs	r2, #0
 8004994:	2100      	movs	r1, #0
 8004996:	2010      	movs	r0, #16
 8004998:	f7fb fed1 	bl	800073e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800499c:	2010      	movs	r0, #16
 800499e:	f7fb feea 	bl	8000776 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80049a2:	2200      	movs	r2, #0
 80049a4:	2100      	movs	r1, #0
 80049a6:	2011      	movs	r0, #17
 80049a8:	f7fb fec9 	bl	800073e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80049ac:	2011      	movs	r0, #17
 80049ae:	f7fb fee2 	bl	8000776 <HAL_NVIC_EnableIRQ>

}
 80049b2:	bf00      	nop
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	40021000 	.word	0x40021000

080049c0 <MX_GPIO_Init>:
     PB4 (NJTRST)   ------> LCD_SEG8
     PB5   ------> LCD_SEG9
     PB9   ------> LCD_COM3
*/
void MX_GPIO_Init(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b08a      	sub	sp, #40	; 0x28
 80049c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049c6:	f107 0314 	add.w	r3, r7, #20
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	605a      	str	r2, [r3, #4]
 80049d0:	609a      	str	r2, [r3, #8]
 80049d2:	60da      	str	r2, [r3, #12]
 80049d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80049d6:	4ab6      	ldr	r2, [pc, #728]	; (8004cb0 <MX_GPIO_Init+0x2f0>)
 80049d8:	4bb5      	ldr	r3, [pc, #724]	; (8004cb0 <MX_GPIO_Init+0x2f0>)
 80049da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049dc:	f043 0310 	orr.w	r3, r3, #16
 80049e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049e2:	4bb3      	ldr	r3, [pc, #716]	; (8004cb0 <MX_GPIO_Init+0x2f0>)
 80049e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049e6:	f003 0310 	and.w	r3, r3, #16
 80049ea:	613b      	str	r3, [r7, #16]
 80049ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049ee:	4ab0      	ldr	r2, [pc, #704]	; (8004cb0 <MX_GPIO_Init+0x2f0>)
 80049f0:	4baf      	ldr	r3, [pc, #700]	; (8004cb0 <MX_GPIO_Init+0x2f0>)
 80049f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f4:	f043 0304 	orr.w	r3, r3, #4
 80049f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049fa:	4bad      	ldr	r3, [pc, #692]	; (8004cb0 <MX_GPIO_Init+0x2f0>)
 80049fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049fe:	f003 0304 	and.w	r3, r3, #4
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a06:	4aaa      	ldr	r2, [pc, #680]	; (8004cb0 <MX_GPIO_Init+0x2f0>)
 8004a08:	4ba9      	ldr	r3, [pc, #676]	; (8004cb0 <MX_GPIO_Init+0x2f0>)
 8004a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a0c:	f043 0301 	orr.w	r3, r3, #1
 8004a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a12:	4ba7      	ldr	r3, [pc, #668]	; (8004cb0 <MX_GPIO_Init+0x2f0>)
 8004a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	60bb      	str	r3, [r7, #8]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a1e:	4aa4      	ldr	r2, [pc, #656]	; (8004cb0 <MX_GPIO_Init+0x2f0>)
 8004a20:	4ba3      	ldr	r3, [pc, #652]	; (8004cb0 <MX_GPIO_Init+0x2f0>)
 8004a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a24:	f043 0302 	orr.w	r3, r3, #2
 8004a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a2a:	4ba1      	ldr	r3, [pc, #644]	; (8004cb0 <MX_GPIO_Init+0x2f0>)
 8004a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	607b      	str	r3, [r7, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a36:	4a9e      	ldr	r2, [pc, #632]	; (8004cb0 <MX_GPIO_Init+0x2f0>)
 8004a38:	4b9d      	ldr	r3, [pc, #628]	; (8004cb0 <MX_GPIO_Init+0x2f0>)
 8004a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a3c:	f043 0308 	orr.w	r3, r3, #8
 8004a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a42:	4b9b      	ldr	r3, [pc, #620]	; (8004cb0 <MX_GPIO_Init+0x2f0>)
 8004a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a46:	f003 0308 	and.w	r3, r3, #8
 8004a4a:	603b      	str	r3, [r7, #0]
 8004a4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8004a4e:	2200      	movs	r2, #0
 8004a50:	2109      	movs	r1, #9
 8004a52:	4898      	ldr	r0, [pc, #608]	; (8004cb4 <MX_GPIO_Init+0x2f4>)
 8004a54:	f7fc fa8a 	bl	8000f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a5e:	4896      	ldr	r0, [pc, #600]	; (8004cb8 <MX_GPIO_Init+0x2f8>)
 8004a60:	f7fc fa84 	bl	8000f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8004a64:	2200      	movs	r2, #0
 8004a66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a6a:	4893      	ldr	r0, [pc, #588]	; (8004cb8 <MX_GPIO_Init+0x2f8>)
 8004a6c:	f7fc fa7e 	bl	8000f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8004a70:	2200      	movs	r2, #0
 8004a72:	2180      	movs	r1, #128	; 0x80
 8004a74:	4891      	ldr	r0, [pc, #580]	; (8004cbc <MX_GPIO_Init+0x2fc>)
 8004a76:	f7fc fa79 	bl	8000f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin */
  GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin 
 8004a7a:	23f4      	movs	r3, #244	; 0xf4
 8004a7c:	617b      	str	r3, [r7, #20]
                          |AUDIO_DIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a7e:	2302      	movs	r3, #2
 8004a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a86:	2303      	movs	r3, #3
 8004a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8004a8a:	230d      	movs	r3, #13
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a8e:	f107 0314 	add.w	r3, r7, #20
 8004a92:	4619      	mov	r1, r3
 8004a94:	4887      	ldr	r0, [pc, #540]	; (8004cb4 <MX_GPIO_Init+0x2f4>)
 8004a96:	f7fc f8c1 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8004a9a:	2308      	movs	r3, #8
 8004a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8004aaa:	f107 0314 	add.w	r3, r7, #20
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4880      	ldr	r0, [pc, #512]	; (8004cb4 <MX_GPIO_Init+0x2f4>)
 8004ab2:	f7fc f8b3 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 8004ab6:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8004aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004abc:	4b80      	ldr	r3, [pc, #512]	; (8004cc0 <MX_GPIO_Init+0x300>)
 8004abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ac4:	f107 0314 	add.w	r3, r7, #20
 8004ac8:	4619      	mov	r1, r3
 8004aca:	487b      	ldr	r0, [pc, #492]	; (8004cb8 <MX_GPIO_Init+0x2f8>)
 8004acc:	f7fc f8a6 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 8004ad0:	2307      	movs	r3, #7
 8004ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004adc:	f107 0314 	add.w	r3, r7, #20
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4875      	ldr	r0, [pc, #468]	; (8004cb8 <MX_GPIO_Init+0x2f8>)
 8004ae4:	f7fc f89a 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin */
  GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 8004ae8:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8004aec:	617b      	str	r3, [r7, #20]
                          |SEG9_Pin|SEG13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aee:	2302      	movs	r3, #2
 8004af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af2:	2300      	movs	r3, #0
 8004af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004af6:	2300      	movs	r3, #0
 8004af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8004afa:	230b      	movs	r3, #11
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004afe:	f107 0314 	add.w	r3, r7, #20
 8004b02:	4619      	mov	r1, r3
 8004b04:	486c      	ldr	r0, [pc, #432]	; (8004cb8 <MX_GPIO_Init+0x2f8>)
 8004b06:	f7fc f889 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8004b0a:	2310      	movs	r3, #16
 8004b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004b0e:	4b6c      	ldr	r3, [pc, #432]	; (8004cc0 <MX_GPIO_Init+0x300>)
 8004b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8004b16:	f107 0314 	add.w	r3, r7, #20
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b20:	f7fc f87c 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 8004b24:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8004b28:	617b      	str	r3, [r7, #20]
                          |COM2_Pin|SEG10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b32:	2300      	movs	r3, #0
 8004b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8004b36:	230b      	movs	r3, #11
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b3a:	f107 0314 	add.w	r3, r7, #20
 8004b3e:	4619      	mov	r1, r3
 8004b40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b44:	f7fc f86a 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 8004b48:	f24f 2333 	movw	r3, #62003	; 0xf233
 8004b4c:	617b      	str	r3, [r7, #20]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin 
                          |COM3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b4e:	2302      	movs	r3, #2
 8004b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b56:	2300      	movs	r3, #0
 8004b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8004b5a:	230b      	movs	r3, #11
 8004b5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b5e:	f107 0314 	add.w	r3, r7, #20
 8004b62:	4619      	mov	r1, r3
 8004b64:	4857      	ldr	r0, [pc, #348]	; (8004cc4 <MX_GPIO_Init+0x304>)
 8004b66:	f7fc f859 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8004b6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b70:	2302      	movs	r3, #2
 8004b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b74:	2300      	movs	r3, #0
 8004b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8004b7c:	230d      	movs	r3, #13
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 8004b80:	f107 0314 	add.w	r3, r7, #20
 8004b84:	4619      	mov	r1, r3
 8004b86:	484b      	ldr	r0, [pc, #300]	; (8004cb4 <MX_GPIO_Init+0x2f4>)
 8004b88:	f7fc f848 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 8004b8c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b92:	2312      	movs	r3, #18
 8004b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b96:	2301      	movs	r3, #1
 8004b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004b9e:	2304      	movs	r3, #4
 8004ba0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ba2:	f107 0314 	add.w	r3, r7, #20
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	4846      	ldr	r0, [pc, #280]	; (8004cc4 <MX_GPIO_Init+0x304>)
 8004baa:	f7fc f837 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 8004bae:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8004bb2:	617b      	str	r3, [r7, #20]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8004bc0:	230b      	movs	r3, #11
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bc4:	f107 0314 	add.w	r3, r7, #20
 8004bc8:	4619      	mov	r1, r3
 8004bca:	483c      	ldr	r0, [pc, #240]	; (8004cbc <MX_GPIO_Init+0x2fc>)
 8004bcc:	f7fc f826 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8004bd0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8004bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bde:	2300      	movs	r3, #0
 8004be0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004be2:	f107 0314 	add.w	r3, r7, #20
 8004be6:	4619      	mov	r1, r3
 8004be8:	4833      	ldr	r0, [pc, #204]	; (8004cb8 <MX_GPIO_Init+0x2f8>)
 8004bea:	f7fc f817 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8004bee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004c00:	230a      	movs	r3, #10
 8004c02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c04:	f107 0314 	add.w	r3, r7, #20
 8004c08:	4619      	mov	r1, r3
 8004c0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c0e:	f7fc f805 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8004c12:	231a      	movs	r3, #26
 8004c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c16:	2302      	movs	r3, #2
 8004c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c22:	2305      	movs	r3, #5
 8004c24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c26:	f107 0314 	add.w	r3, r7, #20
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	4823      	ldr	r0, [pc, #140]	; (8004cbc <MX_GPIO_Init+0x2fc>)
 8004c2e:	f7fb fff5 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT1_Pin;
 8004c32:	2304      	movs	r3, #4
 8004c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004c36:	4b22      	ldr	r3, [pc, #136]	; (8004cc0 <MX_GPIO_Init+0x300>)
 8004c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT1_GPIO_Port, &GPIO_InitStruct);
 8004c3e:	f107 0314 	add.w	r3, r7, #20
 8004c42:	4619      	mov	r1, r3
 8004c44:	481d      	ldr	r0, [pc, #116]	; (8004cbc <MX_GPIO_Init+0x2fc>)
 8004c46:	f7fb ffe9 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8004c4a:	2380      	movs	r3, #128	; 0x80
 8004c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c56:	2303      	movs	r3, #3
 8004c58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8004c5a:	f107 0314 	add.w	r3, r7, #20
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4816      	ldr	r0, [pc, #88]	; (8004cbc <MX_GPIO_Init+0x2fc>)
 8004c62:	f7fb ffdb 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8004c66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004c6c:	4b14      	ldr	r3, [pc, #80]	; (8004cc0 <MX_GPIO_Init+0x300>)
 8004c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c70:	2300      	movs	r3, #0
 8004c72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 8004c74:	f107 0314 	add.w	r3, r7, #20
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4812      	ldr	r0, [pc, #72]	; (8004cc4 <MX_GPIO_Init+0x304>)
 8004c7c:	f7fb ffce 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 8004c80:	2301      	movs	r3, #1
 8004c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c84:	2301      	movs	r3, #1
 8004c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 8004c90:	f107 0314 	add.w	r3, r7, #20
 8004c94:	4619      	mov	r1, r3
 8004c96:	4807      	ldr	r0, [pc, #28]	; (8004cb4 <MX_GPIO_Init+0x2f4>)
 8004c98:	f7fb ffc0 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004ca0:	4b07      	ldr	r3, [pc, #28]	; (8004cc0 <MX_GPIO_Init+0x300>)
 8004ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8004ca8:	f107 0314 	add.w	r3, r7, #20
 8004cac:	4619      	mov	r1, r3
 8004cae:	e00b      	b.n	8004cc8 <MX_GPIO_Init+0x308>
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	48001000 	.word	0x48001000
 8004cb8:	48000800 	.word	0x48000800
 8004cbc:	48000c00 	.word	0x48000c00
 8004cc0:	10120000 	.word	0x10120000
 8004cc4:	48000400 	.word	0x48000400
 8004cc8:	4803      	ldr	r0, [pc, #12]	; (8004cd8 <MX_GPIO_Init+0x318>)
 8004cca:	f7fb ffa7 	bl	8000c1c <HAL_GPIO_Init>

}
 8004cce:	bf00      	nop
 8004cd0:	3728      	adds	r7, #40	; 0x28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	48001000 	.word	0x48001000

08004cdc <PIDSetpointSet>:
PIDControl pid;
PIDMode mode = AUTOMATIC;
PIDDirection control = DIRECT;


void PIDSetpointSet(PIDControl *pid, float setpoint) { pid->setpoint = setpoint; }
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	ed87 0a00 	vstr	s0, [r7]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	635a      	str	r2, [r3, #52]	; 0x34
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <PIDInputSet>:
void PIDInputSet(PIDControl *pid, float input) { pid->input = input; }
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	ed87 0a00 	vstr	s0, [r7]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <PIDOutputGet>:
float PIDOutputGet(PIDControl *pid) { return pid->output; }
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	ee07 3a90 	vmov	s15, r3
 8004d28:	eeb0 0a67 	vmov.f32	s0, s15
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b085      	sub	sp, #20
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	60f8      	str	r0, [r7, #12]
 8004d3e:	60b9      	str	r1, [r7, #8]
 8004d40:	607a      	str	r2, [r7, #4]
 8004d42:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	69b9      	ldr	r1, [r7, #24]
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	1a8a      	subs	r2, r1, r2
 8004d50:	fb02 f203 	mul.w	r2, r2, r3
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	1acb      	subs	r3, r1, r3
 8004d5a:	fb92 f2f3 	sdiv	r2, r2, r3
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	4413      	add	r3, r2
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
	...

08004d70 <HAL_TIM_IC_CaptureCallback>:
	return len;
}

int speed;
void HAL_TIM_IC_CaptureCallback( TIM_HandleTypeDef *htim )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af02      	add	r7, sp, #8
 8004d76:	6078      	str	r0, [r7, #4]
	if( htim == &htim5 )
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a38      	ldr	r2, [pc, #224]	; (8004e5c <HAL_TIM_IC_CaptureCallback+0xec>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d169      	bne.n	8004e54 <HAL_TIM_IC_CaptureCallback+0xe4>
	{
		if( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	7f1b      	ldrb	r3, [r3, #28]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d12f      	bne.n	8004de8 <HAL_TIM_IC_CaptureCallback+0x78>
		{
			period1 = __HAL_TIM_GET_COMPARE(&htim5, TIM_CHANNEL_1);
 8004d88:	4b34      	ldr	r3, [pc, #208]	; (8004e5c <HAL_TIM_IC_CaptureCallback+0xec>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8e:	ee07 3a90 	vmov	s15, r3
 8004d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d96:	4b32      	ldr	r3, [pc, #200]	; (8004e60 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8004d98:	edc3 7a00 	vstr	s15, [r3]
			__HAL_TIM_SET_COUNTER(&htim5, 0);
 8004d9c:	4b2f      	ldr	r3, [pc, #188]	; (8004e5c <HAL_TIM_IC_CaptureCallback+0xec>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2200      	movs	r2, #0
 8004da2:	625a      	str	r2, [r3, #36]	; 0x24
			flag1 = 1;
 8004da4:	4b2f      	ldr	r3, [pc, #188]	; (8004e64 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8004da6:	2201      	movs	r2, #1
 8004da8:	601a      	str	r2, [r3, #0]
			speed = (period1 <= 50 ) ? (255 - map(period1, 20, 50, 0, 255)) : 0;
 8004daa:	4b2d      	ldr	r3, [pc, #180]	; (8004e60 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8004dac:	edd3 7a00 	vldr	s15, [r3]
 8004db0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8004e68 <HAL_TIM_IC_CaptureCallback+0xf8>
 8004db4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dbc:	d811      	bhi.n	8004de2 <HAL_TIM_IC_CaptureCallback+0x72>
 8004dbe:	4b28      	ldr	r3, [pc, #160]	; (8004e60 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8004dc0:	edd3 7a00 	vldr	s15, [r3]
 8004dc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dc8:	23ff      	movs	r3, #255	; 0xff
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	2300      	movs	r3, #0
 8004dce:	2232      	movs	r2, #50	; 0x32
 8004dd0:	2114      	movs	r1, #20
 8004dd2:	ee17 0a90 	vmov	r0, s15
 8004dd6:	f7ff ffae 	bl	8004d36 <map>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8004de0:	e000      	b.n	8004de4 <HAL_TIM_IC_CaptureCallback+0x74>
 8004de2:	2300      	movs	r3, #0
 8004de4:	4a21      	ldr	r2, [pc, #132]	; (8004e6c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8004de6:	6013      	str	r3, [r2, #0]
		}
		sampleTimeSeconds = period1/1000.0;
 8004de8:	4b1d      	ldr	r3, [pc, #116]	; (8004e60 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8004dea:	ed93 7a00 	vldr	s14, [r3]
 8004dee:	eddf 6a20 	vldr	s13, [pc, #128]	; 8004e70 <HAL_TIM_IC_CaptureCallback+0x100>
 8004df2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004df6:	4b1f      	ldr	r3, [pc, #124]	; (8004e74 <HAL_TIM_IC_CaptureCallback+0x104>)
 8004df8:	edc3 7a00 	vstr	s15, [r3]
		PIDInit(&pid, kp, ki, kd, sampleTimeSeconds, minOutput, maxOutput, mode, control);
 8004dfc:	4b1e      	ldr	r3, [pc, #120]	; (8004e78 <HAL_TIM_IC_CaptureCallback+0x108>)
 8004dfe:	edd3 7a00 	vldr	s15, [r3]
 8004e02:	4b1e      	ldr	r3, [pc, #120]	; (8004e7c <HAL_TIM_IC_CaptureCallback+0x10c>)
 8004e04:	ed93 7a00 	vldr	s14, [r3]
 8004e08:	4b1d      	ldr	r3, [pc, #116]	; (8004e80 <HAL_TIM_IC_CaptureCallback+0x110>)
 8004e0a:	edd3 6a00 	vldr	s13, [r3]
 8004e0e:	4b19      	ldr	r3, [pc, #100]	; (8004e74 <HAL_TIM_IC_CaptureCallback+0x104>)
 8004e10:	ed93 6a00 	vldr	s12, [r3]
 8004e14:	4b1b      	ldr	r3, [pc, #108]	; (8004e84 <HAL_TIM_IC_CaptureCallback+0x114>)
 8004e16:	881b      	ldrh	r3, [r3, #0]
 8004e18:	ee05 3a90 	vmov	s11, r3
 8004e1c:	eef8 5a65 	vcvt.f32.u32	s11, s11
 8004e20:	4b19      	ldr	r3, [pc, #100]	; (8004e88 <HAL_TIM_IC_CaptureCallback+0x118>)
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	ee05 3a10 	vmov	s10, r3
 8004e28:	eeb8 5a45 	vcvt.f32.u32	s10, s10
 8004e2c:	4b17      	ldr	r3, [pc, #92]	; (8004e8c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8004e2e:	7819      	ldrb	r1, [r3, #0]
 8004e30:	4b17      	ldr	r3, [pc, #92]	; (8004e90 <HAL_TIM_IC_CaptureCallback+0x120>)
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	461a      	mov	r2, r3
 8004e36:	eef0 2a45 	vmov.f32	s5, s10
 8004e3a:	eeb0 2a65 	vmov.f32	s4, s11
 8004e3e:	eef0 1a46 	vmov.f32	s3, s12
 8004e42:	eeb0 1a66 	vmov.f32	s2, s13
 8004e46:	eef0 0a47 	vmov.f32	s1, s14
 8004e4a:	eeb0 0a67 	vmov.f32	s0, s15
 8004e4e:	4811      	ldr	r0, [pc, #68]	; (8004e94 <HAL_TIM_IC_CaptureCallback+0x124>)
 8004e50:	f000 fa20 	bl	8005294 <PIDInit>
	}
}
 8004e54:	bf00      	nop
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	200000f0 	.word	0x200000f0
 8004e60:	20000098 	.word	0x20000098
 8004e64:	2000009c 	.word	0x2000009c
 8004e68:	42480000 	.word	0x42480000
 8004e6c:	200000a8 	.word	0x200000a8
 8004e70:	447a0000 	.word	0x447a0000
 8004e74:	20000038 	.word	0x20000038
 8004e78:	20000004 	.word	0x20000004
 8004e7c:	20000008 	.word	0x20000008
 8004e80:	2000000c 	.word	0x2000000c
 8004e84:	2000003c 	.word	0x2000003c
 8004e88:	20000010 	.word	0x20000010
 8004e8c:	20000012 	.word	0x20000012
 8004e90:	2000003e 	.word	0x2000003e
 8004e94:	2000004c 	.word	0x2000004c

08004e98 <HAL_UART_RxCpltCallback>:


// handling callback when reciving buffer is full

 //int flag1 = 1;
 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 	 axis = (char)(Received[nrAxis]);
 8004ea0:	4b45      	ldr	r3, [pc, #276]	; (8004fb8 <HAL_UART_RxCpltCallback+0x120>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	4b44      	ldr	r3, [pc, #272]	; (8004fbc <HAL_UART_RxCpltCallback+0x124>)
 8004eaa:	5c9b      	ldrb	r3, [r3, r2]
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	4b44      	ldr	r3, [pc, #272]	; (8004fc0 <HAL_UART_RxCpltCallback+0x128>)
 8004eb0:	701a      	strb	r2, [r3, #0]
 	 sign = (char)(Received[nrSign]);
 8004eb2:	4b44      	ldr	r3, [pc, #272]	; (8004fc4 <HAL_UART_RxCpltCallback+0x12c>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	461a      	mov	r2, r3
 8004eba:	4b40      	ldr	r3, [pc, #256]	; (8004fbc <HAL_UART_RxCpltCallback+0x124>)
 8004ebc:	5c9b      	ldrb	r3, [r3, r2]
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	4b41      	ldr	r3, [pc, #260]	; (8004fc8 <HAL_UART_RxCpltCallback+0x130>)
 8004ec2:	701a      	strb	r2, [r3, #0]
 	 value = (uint8_t)(Received[nrValue]);
 8004ec4:	4b41      	ldr	r3, [pc, #260]	; (8004fcc <HAL_UART_RxCpltCallback+0x134>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	461a      	mov	r2, r3
 8004ecc:	4b3b      	ldr	r3, [pc, #236]	; (8004fbc <HAL_UART_RxCpltCallback+0x124>)
 8004ece:	5c9b      	ldrb	r3, [r3, r2]
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	4b3f      	ldr	r3, [pc, #252]	; (8004fd0 <HAL_UART_RxCpltCallback+0x138>)
 8004ed4:	701a      	strb	r2, [r3, #0]

 	 if(axis == 'x')
 8004ed6:	4b3a      	ldr	r3, [pc, #232]	; (8004fc0 <HAL_UART_RxCpltCallback+0x128>)
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b78      	cmp	r3, #120	; 0x78
 8004ede:	d10e      	bne.n	8004efe <HAL_UART_RxCpltCallback+0x66>
 	 {
 		 xsign = sign;
 8004ee0:	4b39      	ldr	r3, [pc, #228]	; (8004fc8 <HAL_UART_RxCpltCallback+0x130>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	4b3b      	ldr	r3, [pc, #236]	; (8004fd4 <HAL_UART_RxCpltCallback+0x13c>)
 8004ee8:	701a      	strb	r2, [r3, #0]
 		 xprevious = xvalue;
 8004eea:	4b3b      	ldr	r3, [pc, #236]	; (8004fd8 <HAL_UART_RxCpltCallback+0x140>)
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	4b3a      	ldr	r3, [pc, #232]	; (8004fdc <HAL_UART_RxCpltCallback+0x144>)
 8004ef2:	701a      	strb	r2, [r3, #0]
 		 xvalue = value;
 8004ef4:	4b36      	ldr	r3, [pc, #216]	; (8004fd0 <HAL_UART_RxCpltCallback+0x138>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	4b37      	ldr	r3, [pc, #220]	; (8004fd8 <HAL_UART_RxCpltCallback+0x140>)
 8004efc:	701a      	strb	r2, [r3, #0]
 	 }

 	 if(axis == 'y')
 8004efe:	4b30      	ldr	r3, [pc, #192]	; (8004fc0 <HAL_UART_RxCpltCallback+0x128>)
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b79      	cmp	r3, #121	; 0x79
 8004f06:	d120      	bne.n	8004f4a <HAL_UART_RxCpltCallback+0xb2>
 	 {
 		 yprevious = yvalue;
 8004f08:	4b35      	ldr	r3, [pc, #212]	; (8004fe0 <HAL_UART_RxCpltCallback+0x148>)
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	4b35      	ldr	r3, [pc, #212]	; (8004fe4 <HAL_UART_RxCpltCallback+0x14c>)
 8004f10:	701a      	strb	r2, [r3, #0]
 		 yvalue = value;
 8004f12:	4b2f      	ldr	r3, [pc, #188]	; (8004fd0 <HAL_UART_RxCpltCallback+0x138>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	4b31      	ldr	r3, [pc, #196]	; (8004fe0 <HAL_UART_RxCpltCallback+0x148>)
 8004f1a:	701a      	strb	r2, [r3, #0]
 		 if(abs(value - xprevious) < 2)
 8004f1c:	4b2c      	ldr	r3, [pc, #176]	; (8004fd0 <HAL_UART_RxCpltCallback+0x138>)
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	461a      	mov	r2, r3
 8004f24:	4b2d      	ldr	r3, [pc, #180]	; (8004fdc <HAL_UART_RxCpltCallback+0x144>)
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	bfb8      	it	lt
 8004f30:	425b      	neglt	r3, r3
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	dc05      	bgt.n	8004f42 <HAL_UART_RxCpltCallback+0xaa>
 			 yvalue = yprevious;
 8004f36:	4b2b      	ldr	r3, [pc, #172]	; (8004fe4 <HAL_UART_RxCpltCallback+0x14c>)
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	4b28      	ldr	r3, [pc, #160]	; (8004fe0 <HAL_UART_RxCpltCallback+0x148>)
 8004f3e:	701a      	strb	r2, [r3, #0]
 8004f40:	e003      	b.n	8004f4a <HAL_UART_RxCpltCallback+0xb2>
 		 else if(value > 255)
 8004f42:	4b23      	ldr	r3, [pc, #140]	; (8004fd0 <HAL_UART_RxCpltCallback+0x138>)
 8004f44:	781b      	ldrb	r3, [r3, #0]
 			 yvalue = yprevious;
 		 else if(value < 0)
 8004f46:	4b22      	ldr	r3, [pc, #136]	; (8004fd0 <HAL_UART_RxCpltCallback+0x138>)
 8004f48:	781b      	ldrb	r3, [r3, #0]
 			 yvalue = yprevious;
 	 }
 	 set_value = xvalue;
 8004f4a:	4b23      	ldr	r3, [pc, #140]	; (8004fd8 <HAL_UART_RxCpltCallback+0x140>)
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	4b25      	ldr	r3, [pc, #148]	; (8004fe8 <HAL_UART_RxCpltCallback+0x150>)
 8004f54:	801a      	strh	r2, [r3, #0]
 			PIDSetpointSet(&pid, set_value);
 8004f56:	4b24      	ldr	r3, [pc, #144]	; (8004fe8 <HAL_UART_RxCpltCallback+0x150>)
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	ee07 3a90 	vmov	s15, r3
 8004f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f64:	eeb0 0a67 	vmov.f32	s0, s15
 8004f68:	4820      	ldr	r0, [pc, #128]	; (8004fec <HAL_UART_RxCpltCallback+0x154>)
 8004f6a:	f7ff feb7 	bl	8004cdc <PIDSetpointSet>
 		    PIDInputSet(&pid, speed);
 8004f6e:	4b20      	ldr	r3, [pc, #128]	; (8004ff0 <HAL_UART_RxCpltCallback+0x158>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	ee07 3a90 	vmov	s15, r3
 8004f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f7e:	481b      	ldr	r0, [pc, #108]	; (8004fec <HAL_UART_RxCpltCallback+0x154>)
 8004f80:	f7ff febb 	bl	8004cfa <PIDInputSet>
 		    PIDCompute(&pid);
 8004f84:	4819      	ldr	r0, [pc, #100]	; (8004fec <HAL_UART_RxCpltCallback+0x154>)
 8004f86:	f000 f9d8 	bl	800533a <PIDCompute>
 		    //PIDOutputGet(&pid);
 		    pid_output = PIDOutputGet(&pid);
 8004f8a:	4818      	ldr	r0, [pc, #96]	; (8004fec <HAL_UART_RxCpltCallback+0x154>)
 8004f8c:	f7ff fec4 	bl	8004d18 <PIDOutputGet>
 8004f90:	eef0 7a40 	vmov.f32	s15, s0
 8004f94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f98:	edc7 7a00 	vstr	s15, [r7]
 8004f9c:	783b      	ldrb	r3, [r7, #0]
 8004f9e:	b25a      	sxtb	r2, r3
 8004fa0:	4b14      	ldr	r3, [pc, #80]	; (8004ff4 <HAL_UART_RxCpltCallback+0x15c>)
 8004fa2:	701a      	strb	r2, [r3, #0]
 	 HAL_UART_Receive_DMA(&huart2, &Received, BUFSIZE);
 8004fa4:	2203      	movs	r2, #3
 8004fa6:	4905      	ldr	r1, [pc, #20]	; (8004fbc <HAL_UART_RxCpltCallback+0x124>)
 8004fa8:	4813      	ldr	r0, [pc, #76]	; (8004ff8 <HAL_UART_RxCpltCallback+0x160>)
 8004faa:	f7fe fdbf 	bl	8003b2c <HAL_UART_Receive_DMA>
 }
 8004fae:	bf00      	nop
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20000034 	.word	0x20000034
 8004fbc:	20000048 	.word	0x20000048
 8004fc0:	200000a0 	.word	0x200000a0
 8004fc4:	20000000 	.word	0x20000000
 8004fc8:	20000044 	.word	0x20000044
 8004fcc:	20000001 	.word	0x20000001
 8004fd0:	200000af 	.word	0x200000af
 8004fd4:	20000094 	.word	0x20000094
 8004fd8:	200000ae 	.word	0x200000ae
 8004fdc:	200000ad 	.word	0x200000ad
 8004fe0:	200000ac 	.word	0x200000ac
 8004fe4:	2000008c 	.word	0x2000008c
 8004fe8:	20000002 	.word	0x20000002
 8004fec:	2000004c 	.word	0x2000004c
 8004ff0:	200000a8 	.word	0x200000a8
 8004ff4:	20000035 	.word	0x20000035
 8004ff8:	20000200 	.word	0x20000200

08004ffc <Jazda>:

uint8_t i = 180;

void Jazda()
 {
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 255 - pid.output);
 8005000:	4b09      	ldr	r3, [pc, #36]	; (8005028 <Jazda+0x2c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a09      	ldr	r2, [pc, #36]	; (800502c <Jazda+0x30>)
 8005006:	edd2 7a02 	vldr	s15, [r2, #8]
 800500a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005030 <Jazda+0x34>
 800500e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005016:	ee17 2a90 	vmov	r2, s15
 800501a:	635a      	str	r2, [r3, #52]	; 0x34
 }
 800501c:	bf00      	nop
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	20000130 	.word	0x20000130
 800502c:	2000004c 	.word	0x2000004c
 8005030:	437f0000 	.word	0x437f0000

08005034 <Skrecanie>:

 void Skrecanie()
 {
 8005034:	b480      	push	{r7}
 8005036:	af00      	add	r7, sp, #0
	  if(axis == 'y')
 8005038:	4b07      	ldr	r3, [pc, #28]	; (8005058 <Skrecanie+0x24>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b79      	cmp	r3, #121	; 0x79
 8005040:	d105      	bne.n	800504e <Skrecanie+0x1a>
	  {
		  //htim5.Instance->CCR1 = value;
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, yvalue);
 8005042:	4b06      	ldr	r3, [pc, #24]	; (800505c <Skrecanie+0x28>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a06      	ldr	r2, [pc, #24]	; (8005060 <Skrecanie+0x2c>)
 8005048:	7812      	ldrb	r2, [r2, #0]
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	635a      	str	r2, [r3, #52]	; 0x34
	  }
}
 800504e:	bf00      	nop
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	200000a0 	.word	0x200000a0
 800505c:	200000b0 	.word	0x200000b0
 8005060:	200000ac 	.word	0x200000ac

08005064 <main>:


int main(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0

  HAL_Init();
 8005068:	f7fb fa36 	bl	80004d8 <HAL_Init>
  SystemClock_Config();
 800506c:	f000 f894 	bl	8005198 <SystemClock_Config>

  MX_GPIO_Init();
 8005070:	f7ff fca6 	bl	80049c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8005074:	f7ff fc7e 	bl	8004974 <MX_DMA_Init>
  MX_TIM2_Init();
 8005078:	f000 fb5e 	bl	8005738 <MX_TIM2_Init>
  MX_TIM4_Init();
 800507c:	f000 fbde 	bl	800583c <MX_TIM4_Init>
  MX_TIM5_Init();
 8005080:	f000 fc54 	bl	800592c <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8005084:	f000 fda8 	bl	8005bd8 <MX_USART2_UART_Init>

  flag1 = flag2 = 0;
 8005088:	2300      	movs	r3, #0
 800508a:	4a30      	ldr	r2, [pc, #192]	; (800514c <main+0xe8>)
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	4a30      	ldr	r2, [pc, #192]	; (8005150 <main+0xec>)
 8005090:	6013      	str	r3, [r2, #0]
  pwm_dutyL = pwm_dutyP = 0;
 8005092:	4b30      	ldr	r3, [pc, #192]	; (8005154 <main+0xf0>)
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	4b2e      	ldr	r3, [pc, #184]	; (8005154 <main+0xf0>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a2e      	ldr	r2, [pc, #184]	; (8005158 <main+0xf4>)
 800509e:	6013      	str	r3, [r2, #0]
 HAL_TIM_IC_Start_IT(&htim5 , TIM_CHANNEL_1);
 80050a0:	2100      	movs	r1, #0
 80050a2:	482e      	ldr	r0, [pc, #184]	; (800515c <main+0xf8>)
 80050a4:	f7fd faea 	bl	800267c <HAL_TIM_IC_Start_IT>
 HAL_TIM_IC_Start_IT(&htim5 , TIM_CHANNEL_2);
 80050a8:	2104      	movs	r1, #4
 80050aa:	482c      	ldr	r0, [pc, #176]	; (800515c <main+0xf8>)
 80050ac:	f7fd fae6 	bl	800267c <HAL_TIM_IC_Start_IT>
 // __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 75);
  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_dutyP);
 // __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_dutyL);
  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_dutyP);

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80050b0:	2100      	movs	r1, #0
 80050b2:	482b      	ldr	r0, [pc, #172]	; (8005160 <main+0xfc>)
 80050b4:	f7fd fa5c 	bl	8002570 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80050b8:	2100      	movs	r1, #0
 80050ba:	482a      	ldr	r0, [pc, #168]	; (8005164 <main+0x100>)
 80050bc:	f7fd fa58 	bl	8002570 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80050c0:	2104      	movs	r1, #4
 80050c2:	4828      	ldr	r0, [pc, #160]	; (8005164 <main+0x100>)
 80050c4:	f7fd fa54 	bl	8002570 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_DMA(&huart2, &Received, BUFSIZE);
 80050c8:	2203      	movs	r2, #3
 80050ca:	4927      	ldr	r1, [pc, #156]	; (8005168 <main+0x104>)
 80050cc:	4827      	ldr	r0, [pc, #156]	; (800516c <main+0x108>)
 80050ce:	f7fe fd2d 	bl	8003b2c <HAL_UART_Receive_DMA>
  PIDInit(&pid, kp, ki, kd, sampleTimeSeconds, minOutput, maxOutput, mode, control);
 80050d2:	4b27      	ldr	r3, [pc, #156]	; (8005170 <main+0x10c>)
 80050d4:	edd3 7a00 	vldr	s15, [r3]
 80050d8:	4b26      	ldr	r3, [pc, #152]	; (8005174 <main+0x110>)
 80050da:	ed93 7a00 	vldr	s14, [r3]
 80050de:	4b26      	ldr	r3, [pc, #152]	; (8005178 <main+0x114>)
 80050e0:	edd3 6a00 	vldr	s13, [r3]
 80050e4:	4b25      	ldr	r3, [pc, #148]	; (800517c <main+0x118>)
 80050e6:	ed93 6a00 	vldr	s12, [r3]
 80050ea:	4b25      	ldr	r3, [pc, #148]	; (8005180 <main+0x11c>)
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	ee05 3a90 	vmov	s11, r3
 80050f2:	eef8 5a65 	vcvt.f32.u32	s11, s11
 80050f6:	4b23      	ldr	r3, [pc, #140]	; (8005184 <main+0x120>)
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	ee05 3a10 	vmov	s10, r3
 80050fe:	eeb8 5a45 	vcvt.f32.u32	s10, s10
 8005102:	4b21      	ldr	r3, [pc, #132]	; (8005188 <main+0x124>)
 8005104:	7819      	ldrb	r1, [r3, #0]
 8005106:	4b21      	ldr	r3, [pc, #132]	; (800518c <main+0x128>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	461a      	mov	r2, r3
 800510c:	eef0 2a45 	vmov.f32	s5, s10
 8005110:	eeb0 2a65 	vmov.f32	s4, s11
 8005114:	eef0 1a46 	vmov.f32	s3, s12
 8005118:	eeb0 1a66 	vmov.f32	s2, s13
 800511c:	eef0 0a47 	vmov.f32	s1, s14
 8005120:	eeb0 0a67 	vmov.f32	s0, s15
 8005124:	481a      	ldr	r0, [pc, #104]	; (8005190 <main+0x12c>)
 8005126:	f000 f8b5 	bl	8005294 <PIDInit>
  PIDSetpointSet(&pid, set_value);
 800512a:	4b1a      	ldr	r3, [pc, #104]	; (8005194 <main+0x130>)
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	b29b      	uxth	r3, r3
 8005130:	ee07 3a90 	vmov	s15, r3
 8005134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005138:	eeb0 0a67 	vmov.f32	s0, s15
 800513c:	4814      	ldr	r0, [pc, #80]	; (8005190 <main+0x12c>)
 800513e:	f7ff fdcd 	bl	8004cdc <PIDSetpointSet>
  //PIDInputSet(&pid, speed);

  while (1)
  {
	  Jazda();
 8005142:	f7ff ff5b 	bl	8004ffc <Jazda>
	Skrecanie();
 8005146:	f7ff ff75 	bl	8005034 <Skrecanie>
	  Jazda();
 800514a:	e7fa      	b.n	8005142 <main+0xde>
 800514c:	20000090 	.word	0x20000090
 8005150:	2000009c 	.word	0x2000009c
 8005154:	200000a4 	.word	0x200000a4
 8005158:	20000088 	.word	0x20000088
 800515c:	200000f0 	.word	0x200000f0
 8005160:	200000b0 	.word	0x200000b0
 8005164:	20000130 	.word	0x20000130
 8005168:	20000048 	.word	0x20000048
 800516c:	20000200 	.word	0x20000200
 8005170:	20000004 	.word	0x20000004
 8005174:	20000008 	.word	0x20000008
 8005178:	2000000c 	.word	0x2000000c
 800517c:	20000038 	.word	0x20000038
 8005180:	2000003c 	.word	0x2000003c
 8005184:	20000010 	.word	0x20000010
 8005188:	20000012 	.word	0x20000012
 800518c:	2000003e 	.word	0x2000003e
 8005190:	2000004c 	.word	0x2000004c
 8005194:	20000002 	.word	0x20000002

08005198 <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b0b8      	sub	sp, #224	; 0xe0
 800519c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800519e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80051a2:	2244      	movs	r2, #68	; 0x44
 80051a4:	2100      	movs	r1, #0
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fe3a 	bl	8005e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80051ac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	605a      	str	r2, [r3, #4]
 80051b6:	609a      	str	r2, [r3, #8]
 80051b8:	60da      	str	r2, [r3, #12]
 80051ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80051bc:	463b      	mov	r3, r7
 80051be:	2288      	movs	r2, #136	; 0x88
 80051c0:	2100      	movs	r1, #0
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fe2c 	bl	8005e20 <memset>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80051c8:	2310      	movs	r3, #16
 80051ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80051ce:	2301      	movs	r3, #1
 80051d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80051d4:	2300      	movs	r3, #0
 80051d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80051da:	2360      	movs	r3, #96	; 0x60
 80051dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80051e0:	2302      	movs	r3, #2
 80051e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80051e6:	2301      	movs	r3, #1
 80051e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80051ec:	2301      	movs	r3, #1
 80051ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 80051f2:	2314      	movs	r3, #20
 80051f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80051f8:	2307      	movs	r3, #7
 80051fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80051fe:	2302      	movs	r3, #2
 8005200:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005204:	2302      	movs	r3, #2
 8005206:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800520a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800520e:	4618      	mov	r0, r3
 8005210:	f7fb ff28 	bl	8001064 <HAL_RCC_OscConfig>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800521a:	f000 f834 	bl	8005286 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800521e:	230f      	movs	r3, #15
 8005220:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005224:	2303      	movs	r3, #3
 8005226:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800522a:	2390      	movs	r3, #144	; 0x90
 800522c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005230:	2300      	movs	r3, #0
 8005232:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005236:	2300      	movs	r3, #0
 8005238:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800523c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005240:	2100      	movs	r1, #0
 8005242:	4618      	mov	r0, r3
 8005244:	f7fc fa72 	bl	800172c <HAL_RCC_ClockConfig>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800524e:	f000 f81a 	bl	8005286 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005252:	2302      	movs	r3, #2
 8005254:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005256:	2300      	movs	r3, #0
 8005258:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800525a:	463b      	mov	r3, r7
 800525c:	4618      	mov	r0, r3
 800525e:	f7fc fc77 	bl	8001b50 <HAL_RCCEx_PeriphCLKConfig>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8005268:	f000 f80d 	bl	8005286 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800526c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005270:	f7fb fea2 	bl	8000fb8 <HAL_PWREx_ControlVoltageScaling>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800527a:	f000 f804 	bl	8005286 <Error_Handler>
  }
}
 800527e:	bf00      	nop
 8005280:	37e0      	adds	r7, #224	; 0xe0
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <Error_Handler>:

void Error_Handler(void)
{
 8005286:	b480      	push	{r7}
 8005288:	af00      	add	r7, sp, #0

}
 800528a:	bf00      	nop
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <PIDInit>:
// Functions
//*********************************************************************************
void PIDInit(PIDControl *pid, float kp, float ki, float kd, 
             float sampleTimeSeconds, float minOutput, float maxOutput, 
             PIDMode mode, PIDDirection controllerDirection)     	
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af00      	add	r7, sp, #0
 800529a:	61f8      	str	r0, [r7, #28]
 800529c:	ed87 0a06 	vstr	s0, [r7, #24]
 80052a0:	edc7 0a05 	vstr	s1, [r7, #20]
 80052a4:	ed87 1a04 	vstr	s2, [r7, #16]
 80052a8:	edc7 1a03 	vstr	s3, [r7, #12]
 80052ac:	ed87 2a02 	vstr	s4, [r7, #8]
 80052b0:	edc7 2a01 	vstr	s5, [r7, #4]
 80052b4:	460b      	mov	r3, r1
 80052b6:	70fb      	strb	r3, [r7, #3]
 80052b8:	4613      	mov	r3, r2
 80052ba:	70bb      	strb	r3, [r7, #2]
    pid->controllerDirection = controllerDirection;
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	78ba      	ldrb	r2, [r7, #2]
 80052c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    pid->mode = mode;
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	78fa      	ldrb	r2, [r7, #3]
 80052c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    pid->iTerm = 0.0f;
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	f04f 0200 	mov.w	r2, #0
 80052d2:	625a      	str	r2, [r3, #36]	; 0x24
    pid->input = 0.0f;
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	f04f 0200 	mov.w	r2, #0
 80052da:	601a      	str	r2, [r3, #0]
    pid->lastInput = 0.0f;
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	f04f 0200 	mov.w	r2, #0
 80052e2:	605a      	str	r2, [r3, #4]
    pid->output = 0.0f;
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	f04f 0200 	mov.w	r2, #0
 80052ea:	609a      	str	r2, [r3, #8]
    pid->setpoint = 0.0f;
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	f04f 0200 	mov.w	r2, #0
 80052f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    if(sampleTimeSeconds > 0.0f)
 80052f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80052f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80052fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005300:	dd03      	ble.n	800530a <PIDInit+0x76>
    {
        pid->sampleTime = sampleTimeSeconds;
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	629a      	str	r2, [r3, #40]	; 0x28
 8005308:	e003      	b.n	8005312 <PIDInit+0x7e>
    }
    else
    {
        // If the passed parameter was incorrect, set to 1 second
        pid->sampleTime = 1.0f;
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005310:	629a      	str	r2, [r3, #40]	; 0x28
    }
    
    PIDOutputLimitsSet(pid, minOutput, maxOutput);
 8005312:	edd7 0a01 	vldr	s1, [r7, #4]
 8005316:	ed97 0a02 	vldr	s0, [r7, #8]
 800531a:	69f8      	ldr	r0, [r7, #28]
 800531c:	f000 f89e 	bl	800545c <PIDOutputLimitsSet>
    PIDTuningsSet(pid, kp, ki, kd);
 8005320:	ed97 1a04 	vldr	s2, [r7, #16]
 8005324:	edd7 0a05 	vldr	s1, [r7, #20]
 8005328:	ed97 0a06 	vldr	s0, [r7, #24]
 800532c:	69f8      	ldr	r0, [r7, #28]
 800532e:	f000 f8f0 	bl	8005512 <PIDTuningsSet>
}
 8005332:	bf00      	nop
 8005334:	3720      	adds	r7, #32
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <PIDCompute>:
        
bool
PIDCompute(PIDControl *pid) 
{
 800533a:	b480      	push	{r7}
 800533c:	b085      	sub	sp, #20
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
    float error, dInput;

    if(pid->mode == MANUAL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <PIDCompute+0x16>
    {
        return false;
 800534c:	2300      	movs	r3, #0
 800534e:	e07f      	b.n	8005450 <PIDCompute+0x116>
    }
    
    // The classic PID error term
    error = (pid->setpoint) - (pid->input);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	edd3 7a00 	vldr	s15, [r3]
 800535c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005360:	edc7 7a03 	vstr	s15, [r7, #12]
    
    // Compute the integral term separately ahead of time
    pid->iTerm += (pid->alteredKi) * error;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	edd3 6a07 	vldr	s13, [r3, #28]
 8005370:	edd7 7a03 	vldr	s15, [r7, #12]
 8005374:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    
    // Constrain the integrator to make sure it does not exceed output bounds
    pid->iTerm = CONSTRAIN( (pid->iTerm), (pid->outMin), (pid->outMax) );
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800538e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005396:	d502      	bpl.n	800539e <PIDCompute+0x64>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539c:	e00f      	b.n	80053be <PIDCompute+0x84>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80053aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b2:	dd02      	ble.n	80053ba <PIDCompute+0x80>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b8:	e001      	b.n	80053be <PIDCompute+0x84>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6253      	str	r3, [r2, #36]	; 0x24
    
    // Take the "derivative on measurement" instead of "derivative on error"
    dInput = (pid->input) - (pid->lastInput);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	ed93 7a00 	vldr	s14, [r3]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80053ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053d2:	edc7 7a02 	vstr	s15, [r7, #8]
    
    // Run all the terms together to get the overall output
    pid->output = (pid->alteredKp) * error + (pid->iTerm) - (pid->alteredKd) * dInput;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	ed93 7a06 	vldr	s14, [r3, #24]
 80053dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80053e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80053ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	edd3 6a08 	vldr	s13, [r3, #32]
 80053f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80053f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	edc3 7a02 	vstr	s15, [r3, #8]
    
    // Bound the output
    pid->output = CONSTRAIN( (pid->output), (pid->outMin), (pid->outMax) );
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	ed93 7a02 	vldr	s14, [r3, #8]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005412:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800541a:	d502      	bpl.n	8005422 <PIDCompute+0xe8>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005420:	e00f      	b.n	8005442 <PIDCompute+0x108>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	ed93 7a02 	vldr	s14, [r3, #8]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800542e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005436:	dd02      	ble.n	800543e <PIDCompute+0x104>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543c:	e001      	b.n	8005442 <PIDCompute+0x108>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	6093      	str	r3, [r2, #8]
    
    // Make the current input the former input
    pid->lastInput = pid->input;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	605a      	str	r2, [r3, #4]
    
    return true;
 800544e:	2301      	movs	r3, #1
}
 8005450:	4618      	mov	r0, r3
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <PIDOutputLimitsSet>:
    pid->mode = mode;
}

void 
PIDOutputLimitsSet(PIDControl *pid, float min, float max) 							  							  
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	ed87 0a02 	vstr	s0, [r7, #8]
 8005468:	edc7 0a01 	vstr	s1, [r7, #4]
    // Check if the parameters are valid
    if(min >= max)
 800546c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005470:	edd7 7a01 	vldr	s15, [r7, #4]
 8005474:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800547c:	da43      	bge.n	8005506 <PIDOutputLimitsSet+0xaa>
    {
        return;
    }
    
    // Save the parameters
    pid->outMin = min;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	62da      	str	r2, [r3, #44]	; 0x2c
    pid->outMax = max;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	631a      	str	r2, [r3, #48]	; 0x30
    
    // If in automatic, apply the new constraints
    if(pid->mode == AUTOMATIC)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005490:	2b01      	cmp	r3, #1
 8005492:	d139      	bne.n	8005508 <PIDOutputLimitsSet+0xac>
    {
        pid->output = CONSTRAIN(pid->output, min, max);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	ed93 7a02 	vldr	s14, [r3, #8]
 800549a:	edd7 7a02 	vldr	s15, [r7, #8]
 800549e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a6:	d501      	bpl.n	80054ac <PIDOutputLimitsSet+0x50>
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	e00d      	b.n	80054c8 <PIDOutputLimitsSet+0x6c>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	ed93 7a02 	vldr	s14, [r3, #8]
 80054b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80054b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054be:	dd01      	ble.n	80054c4 <PIDOutputLimitsSet+0x68>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	e001      	b.n	80054c8 <PIDOutputLimitsSet+0x6c>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	6093      	str	r3, [r2, #8]
        pid->iTerm  = CONSTRAIN(pid->iTerm,  min, max);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80054d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80054d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054de:	d501      	bpl.n	80054e4 <PIDOutputLimitsSet+0x88>
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	e00d      	b.n	8005500 <PIDOutputLimitsSet+0xa4>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80054ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80054ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f6:	dd01      	ble.n	80054fc <PIDOutputLimitsSet+0xa0>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	e001      	b.n	8005500 <PIDOutputLimitsSet+0xa4>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	6253      	str	r3, [r2, #36]	; 0x24
 8005504:	e000      	b.n	8005508 <PIDOutputLimitsSet+0xac>
        return;
 8005506:	bf00      	nop
    }
}
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <PIDTuningsSet>:

void 
PIDTuningsSet(PIDControl *pid, float kp, float ki, float kd)         	                                         
{
 8005512:	b480      	push	{r7}
 8005514:	b085      	sub	sp, #20
 8005516:	af00      	add	r7, sp, #0
 8005518:	60f8      	str	r0, [r7, #12]
 800551a:	ed87 0a02 	vstr	s0, [r7, #8]
 800551e:	edc7 0a01 	vstr	s1, [r7, #4]
 8005522:	ed87 1a00 	vstr	s2, [r7]
    // Check if the parameters are valid
    if(kp < 0.0f || ki < 0.0f || kd < 0.0f)
 8005526:	edd7 7a02 	vldr	s15, [r7, #8]
 800552a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800552e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005532:	d44b      	bmi.n	80055cc <PIDTuningsSet+0xba>
 8005534:	edd7 7a01 	vldr	s15, [r7, #4]
 8005538:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800553c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005540:	d444      	bmi.n	80055cc <PIDTuningsSet+0xba>
 8005542:	edd7 7a00 	vldr	s15, [r7]
 8005546:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800554a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800554e:	d43d      	bmi.n	80055cc <PIDTuningsSet+0xba>
    {
        return;
    }
    
    // Save the parameters for displaying purposes
    pid->dispKp = kp;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	60da      	str	r2, [r3, #12]
    pid->dispKi = ki;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	611a      	str	r2, [r3, #16]
    pid->dispKd = kd;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	615a      	str	r2, [r3, #20]
    
    // Alter the parameters for PID
    pid->alteredKp = kp;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	619a      	str	r2, [r3, #24]
    pid->alteredKi = ki * pid->sampleTime;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800556e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	edc3 7a07 	vstr	s15, [r3, #28]
    pid->alteredKd = kd / pid->sampleTime;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005582:	edd7 6a00 	vldr	s13, [r7]
 8005586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	edc3 7a08 	vstr	s15, [r3, #32]
    
    // Apply reverse direction to the altered values if necessary
    if(pid->controllerDirection == REVERSE)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005596:	2b01      	cmp	r3, #1
 8005598:	d119      	bne.n	80055ce <PIDTuningsSet+0xbc>
    {
        pid->alteredKp = -(pid->alteredKp);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	edd3 7a06 	vldr	s15, [r3, #24]
 80055a0:	eef1 7a67 	vneg.f32	s15, s15
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	edc3 7a06 	vstr	s15, [r3, #24]
        pid->alteredKi = -(pid->alteredKi);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	edd3 7a07 	vldr	s15, [r3, #28]
 80055b0:	eef1 7a67 	vneg.f32	s15, s15
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	edc3 7a07 	vstr	s15, [r3, #28]
        pid->alteredKd = -(pid->alteredKd);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	edd3 7a08 	vldr	s15, [r3, #32]
 80055c0:	eef1 7a67 	vneg.f32	s15, s15
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	edc3 7a08 	vstr	s15, [r3, #32]
 80055ca:	e000      	b.n	80055ce <PIDTuningsSet+0xbc>
        return;
 80055cc:	bf00      	nop
    }
}
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055de:	4a0f      	ldr	r2, [pc, #60]	; (800561c <HAL_MspInit+0x44>)
 80055e0:	4b0e      	ldr	r3, [pc, #56]	; (800561c <HAL_MspInit+0x44>)
 80055e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055e4:	f043 0301 	orr.w	r3, r3, #1
 80055e8:	6613      	str	r3, [r2, #96]	; 0x60
 80055ea:	4b0c      	ldr	r3, [pc, #48]	; (800561c <HAL_MspInit+0x44>)
 80055ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	607b      	str	r3, [r7, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80055f6:	4a09      	ldr	r2, [pc, #36]	; (800561c <HAL_MspInit+0x44>)
 80055f8:	4b08      	ldr	r3, [pc, #32]	; (800561c <HAL_MspInit+0x44>)
 80055fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005600:	6593      	str	r3, [r2, #88]	; 0x58
 8005602:	4b06      	ldr	r3, [pc, #24]	; (800561c <HAL_MspInit+0x44>)
 8005604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800560a:	603b      	str	r3, [r7, #0]
 800560c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800560e:	bf00      	nop
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	40021000 	.word	0x40021000

08005620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005624:	bf00      	nop
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800562e:	b480      	push	{r7}
 8005630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005632:	e7fe      	b.n	8005632 <HardFault_Handler+0x4>

08005634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005634:	b480      	push	{r7}
 8005636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005638:	e7fe      	b.n	8005638 <MemManage_Handler+0x4>

0800563a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800563a:	b480      	push	{r7}
 800563c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800563e:	e7fe      	b.n	800563e <BusFault_Handler+0x4>

08005640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005644:	e7fe      	b.n	8005644 <UsageFault_Handler+0x4>

08005646 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005646:	b480      	push	{r7}
 8005648:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800564a:	bf00      	nop
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005654:	b480      	push	{r7}
 8005656:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005658:	bf00      	nop
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005662:	b480      	push	{r7}
 8005664:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005666:	bf00      	nop
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005674:	f7fa ff74 	bl	8000560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005678:	bf00      	nop
 800567a:	bd80      	pop	{r7, pc}

0800567c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005680:	4802      	ldr	r0, [pc, #8]	; (800568c <DMA1_Channel6_IRQHandler+0x10>)
 8005682:	f7fb f9ec 	bl	8000a5e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8005686:	bf00      	nop
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20000170 	.word	0x20000170

08005690 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005694:	4802      	ldr	r0, [pc, #8]	; (80056a0 <DMA1_Channel7_IRQHandler+0x10>)
 8005696:	f7fb f9e2 	bl	8000a5e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800569a:	bf00      	nop
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	200001b8 	.word	0x200001b8

080056a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80056a8:	4802      	ldr	r0, [pc, #8]	; (80056b4 <USART2_IRQHandler+0x10>)
 80056aa:	f7fe fab3 	bl	8003c14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80056ae:	bf00      	nop
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	20000200 	.word	0x20000200

080056b8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80056bc:	4802      	ldr	r0, [pc, #8]	; (80056c8 <TIM5_IRQHandler+0x10>)
 80056be:	f7fd f84d 	bl	800275c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80056c2:	bf00      	nop
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	200000f0 	.word	0x200000f0

080056cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80056d0:	4a17      	ldr	r2, [pc, #92]	; (8005730 <SystemInit+0x64>)
 80056d2:	4b17      	ldr	r3, [pc, #92]	; (8005730 <SystemInit+0x64>)
 80056d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80056e0:	4a14      	ldr	r2, [pc, #80]	; (8005734 <SystemInit+0x68>)
 80056e2:	4b14      	ldr	r3, [pc, #80]	; (8005734 <SystemInit+0x68>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f043 0301 	orr.w	r3, r3, #1
 80056ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80056ec:	4b11      	ldr	r3, [pc, #68]	; (8005734 <SystemInit+0x68>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80056f2:	4a10      	ldr	r2, [pc, #64]	; (8005734 <SystemInit+0x68>)
 80056f4:	4b0f      	ldr	r3, [pc, #60]	; (8005734 <SystemInit+0x68>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80056fc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005700:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005702:	4b0c      	ldr	r3, [pc, #48]	; (8005734 <SystemInit+0x68>)
 8005704:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005708:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800570a:	4a0a      	ldr	r2, [pc, #40]	; (8005734 <SystemInit+0x68>)
 800570c:	4b09      	ldr	r3, [pc, #36]	; (8005734 <SystemInit+0x68>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005714:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005716:	4b07      	ldr	r3, [pc, #28]	; (8005734 <SystemInit+0x68>)
 8005718:	2200      	movs	r2, #0
 800571a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800571c:	4b04      	ldr	r3, [pc, #16]	; (8005730 <SystemInit+0x64>)
 800571e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005722:	609a      	str	r2, [r3, #8]
#endif
}
 8005724:	bf00      	nop
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	e000ed00 	.word	0xe000ed00
 8005734:	40021000 	.word	0x40021000

08005738 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08e      	sub	sp, #56	; 0x38
 800573c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800573e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005742:	2200      	movs	r2, #0
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	605a      	str	r2, [r3, #4]
 8005748:	609a      	str	r2, [r3, #8]
 800574a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800574c:	f107 031c 	add.w	r3, r7, #28
 8005750:	2200      	movs	r2, #0
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	605a      	str	r2, [r3, #4]
 8005756:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005758:	463b      	mov	r3, r7
 800575a:	2200      	movs	r2, #0
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	605a      	str	r2, [r3, #4]
 8005760:	609a      	str	r2, [r3, #8]
 8005762:	60da      	str	r2, [r3, #12]
 8005764:	611a      	str	r2, [r3, #16]
 8005766:	615a      	str	r2, [r3, #20]
 8005768:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800576a:	4b33      	ldr	r3, [pc, #204]	; (8005838 <MX_TIM2_Init+0x100>)
 800576c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005770:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = TIM2_PRESCALER;
 8005772:	4b31      	ldr	r3, [pc, #196]	; (8005838 <MX_TIM2_Init+0x100>)
 8005774:	f240 321f 	movw	r2, #799	; 0x31f
 8005778:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800577a:	4b2f      	ldr	r3, [pc, #188]	; (8005838 <MX_TIM2_Init+0x100>)
 800577c:	2200      	movs	r2, #0
 800577e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_PERIOD;
 8005780:	4b2d      	ldr	r3, [pc, #180]	; (8005838 <MX_TIM2_Init+0x100>)
 8005782:	22fe      	movs	r2, #254	; 0xfe
 8005784:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005786:	4b2c      	ldr	r3, [pc, #176]	; (8005838 <MX_TIM2_Init+0x100>)
 8005788:	2200      	movs	r2, #0
 800578a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800578c:	4b2a      	ldr	r3, [pc, #168]	; (8005838 <MX_TIM2_Init+0x100>)
 800578e:	2200      	movs	r2, #0
 8005790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005792:	4829      	ldr	r0, [pc, #164]	; (8005838 <MX_TIM2_Init+0x100>)
 8005794:	f7fc fe8c 	bl	80024b0 <HAL_TIM_Base_Init>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800579e:	f7ff fd72 	bl	8005286 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80057a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057ac:	4619      	mov	r1, r3
 80057ae:	4822      	ldr	r0, [pc, #136]	; (8005838 <MX_TIM2_Init+0x100>)
 80057b0:	f7fd faa8 	bl	8002d04 <HAL_TIM_ConfigClockSource>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80057ba:	f7ff fd64 	bl	8005286 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80057be:	481e      	ldr	r0, [pc, #120]	; (8005838 <MX_TIM2_Init+0x100>)
 80057c0:	f7fc fea1 	bl	8002506 <HAL_TIM_PWM_Init>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80057ca:	f7ff fd5c 	bl	8005286 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057ce:	2300      	movs	r3, #0
 80057d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057d2:	2300      	movs	r3, #0
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80057d6:	f107 031c 	add.w	r3, r7, #28
 80057da:	4619      	mov	r1, r3
 80057dc:	4816      	ldr	r0, [pc, #88]	; (8005838 <MX_TIM2_Init+0x100>)
 80057de:	f7fe f8d9 	bl	8003994 <HAL_TIMEx_MasterConfigSynchronization>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80057e8:	f7ff fd4d 	bl	8005286 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80057ec:	2360      	movs	r3, #96	; 0x60
 80057ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80057f0:	2300      	movs	r3, #0
 80057f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80057f4:	2300      	movs	r3, #0
 80057f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80057f8:	2300      	movs	r3, #0
 80057fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80057fc:	463b      	mov	r3, r7
 80057fe:	2200      	movs	r2, #0
 8005800:	4619      	mov	r1, r3
 8005802:	480d      	ldr	r0, [pc, #52]	; (8005838 <MX_TIM2_Init+0x100>)
 8005804:	f7fd f966 	bl	8002ad4 <HAL_TIM_PWM_ConfigChannel>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800580e:	f7ff fd3a 	bl	8005286 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005812:	463b      	mov	r3, r7
 8005814:	2204      	movs	r2, #4
 8005816:	4619      	mov	r1, r3
 8005818:	4807      	ldr	r0, [pc, #28]	; (8005838 <MX_TIM2_Init+0x100>)
 800581a:	f7fd f95b 	bl	8002ad4 <HAL_TIM_PWM_ConfigChannel>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d001      	beq.n	8005828 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8005824:	f7ff fd2f 	bl	8005286 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8005828:	4803      	ldr	r0, [pc, #12]	; (8005838 <MX_TIM2_Init+0x100>)
 800582a:	f000 f95f 	bl	8005aec <HAL_TIM_MspPostInit>

}
 800582e:	bf00      	nop
 8005830:	3738      	adds	r7, #56	; 0x38
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	20000130 	.word	0x20000130

0800583c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b08e      	sub	sp, #56	; 0x38
 8005840:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005842:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005846:	2200      	movs	r2, #0
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	605a      	str	r2, [r3, #4]
 800584c:	609a      	str	r2, [r3, #8]
 800584e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005850:	f107 031c 	add.w	r3, r7, #28
 8005854:	2200      	movs	r2, #0
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	605a      	str	r2, [r3, #4]
 800585a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800585c:	463b      	mov	r3, r7
 800585e:	2200      	movs	r2, #0
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	605a      	str	r2, [r3, #4]
 8005864:	609a      	str	r2, [r3, #8]
 8005866:	60da      	str	r2, [r3, #12]
 8005868:	611a      	str	r2, [r3, #16]
 800586a:	615a      	str	r2, [r3, #20]
 800586c:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800586e:	4b2d      	ldr	r3, [pc, #180]	; (8005924 <MX_TIM4_Init+0xe8>)
 8005870:	4a2d      	ldr	r2, [pc, #180]	; (8005928 <MX_TIM4_Init+0xec>)
 8005872:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = TIM4_PRESCALER;
 8005874:	4b2b      	ldr	r3, [pc, #172]	; (8005924 <MX_TIM4_Init+0xe8>)
 8005876:	224f      	movs	r2, #79	; 0x4f
 8005878:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800587a:	4b2a      	ldr	r3, [pc, #168]	; (8005924 <MX_TIM4_Init+0xe8>)
 800587c:	2200      	movs	r2, #0
 800587e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = TIM4_PERIOD;
 8005880:	4b28      	ldr	r3, [pc, #160]	; (8005924 <MX_TIM4_Init+0xe8>)
 8005882:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005886:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005888:	4b26      	ldr	r3, [pc, #152]	; (8005924 <MX_TIM4_Init+0xe8>)
 800588a:	2200      	movs	r2, #0
 800588c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800588e:	4b25      	ldr	r3, [pc, #148]	; (8005924 <MX_TIM4_Init+0xe8>)
 8005890:	2200      	movs	r2, #0
 8005892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005894:	4823      	ldr	r0, [pc, #140]	; (8005924 <MX_TIM4_Init+0xe8>)
 8005896:	f7fc fe0b 	bl	80024b0 <HAL_TIM_Base_Init>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80058a0:	f7ff fcf1 	bl	8005286 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80058a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80058aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058ae:	4619      	mov	r1, r3
 80058b0:	481c      	ldr	r0, [pc, #112]	; (8005924 <MX_TIM4_Init+0xe8>)
 80058b2:	f7fd fa27 	bl	8002d04 <HAL_TIM_ConfigClockSource>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80058bc:	f7ff fce3 	bl	8005286 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80058c0:	4818      	ldr	r0, [pc, #96]	; (8005924 <MX_TIM4_Init+0xe8>)
 80058c2:	f7fc fe20 	bl	8002506 <HAL_TIM_PWM_Init>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80058cc:	f7ff fcdb 	bl	8005286 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058d0:	2300      	movs	r3, #0
 80058d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058d4:	2300      	movs	r3, #0
 80058d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80058d8:	f107 031c 	add.w	r3, r7, #28
 80058dc:	4619      	mov	r1, r3
 80058de:	4811      	ldr	r0, [pc, #68]	; (8005924 <MX_TIM4_Init+0xe8>)
 80058e0:	f7fe f858 	bl	8003994 <HAL_TIMEx_MasterConfigSynchronization>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80058ea:	f7ff fccc 	bl	8005286 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80058ee:	2360      	movs	r3, #96	; 0x60
 80058f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80058f2:	2300      	movs	r3, #0
 80058f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80058f6:	2300      	movs	r3, #0
 80058f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80058fa:	2300      	movs	r3, #0
 80058fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80058fe:	463b      	mov	r3, r7
 8005900:	2200      	movs	r2, #0
 8005902:	4619      	mov	r1, r3
 8005904:	4807      	ldr	r0, [pc, #28]	; (8005924 <MX_TIM4_Init+0xe8>)
 8005906:	f7fd f8e5 	bl	8002ad4 <HAL_TIM_PWM_ConfigChannel>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8005910:	f7ff fcb9 	bl	8005286 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8005914:	4803      	ldr	r0, [pc, #12]	; (8005924 <MX_TIM4_Init+0xe8>)
 8005916:	f000 f8e9 	bl	8005aec <HAL_TIM_MspPostInit>

}
 800591a:	bf00      	nop
 800591c:	3738      	adds	r7, #56	; 0x38
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	200000b0 	.word	0x200000b0
 8005928:	40000800 	.word	0x40000800

0800592c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b088      	sub	sp, #32
 8005930:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005932:	f107 0314 	add.w	r3, r7, #20
 8005936:	2200      	movs	r2, #0
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	605a      	str	r2, [r3, #4]
 800593c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800593e:	1d3b      	adds	r3, r7, #4
 8005940:	2200      	movs	r2, #0
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	605a      	str	r2, [r3, #4]
 8005946:	609a      	str	r2, [r3, #8]
 8005948:	60da      	str	r2, [r3, #12]

  htim5.Instance = TIM5;
 800594a:	4b27      	ldr	r3, [pc, #156]	; (80059e8 <MX_TIM5_Init+0xbc>)
 800594c:	4a27      	ldr	r2, [pc, #156]	; (80059ec <MX_TIM5_Init+0xc0>)
 800594e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = TIM5_PRESCALER;
 8005950:	4b25      	ldr	r3, [pc, #148]	; (80059e8 <MX_TIM5_Init+0xbc>)
 8005952:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8005956:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005958:	4b23      	ldr	r3, [pc, #140]	; (80059e8 <MX_TIM5_Init+0xbc>)
 800595a:	2200      	movs	r2, #0
 800595c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = TIM5_PERIOD;
 800595e:	4b22      	ldr	r3, [pc, #136]	; (80059e8 <MX_TIM5_Init+0xbc>)
 8005960:	4a23      	ldr	r2, [pc, #140]	; (80059f0 <MX_TIM5_Init+0xc4>)
 8005962:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005964:	4b20      	ldr	r3, [pc, #128]	; (80059e8 <MX_TIM5_Init+0xbc>)
 8005966:	2200      	movs	r2, #0
 8005968:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800596a:	4b1f      	ldr	r3, [pc, #124]	; (80059e8 <MX_TIM5_Init+0xbc>)
 800596c:	2200      	movs	r2, #0
 800596e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8005970:	481d      	ldr	r0, [pc, #116]	; (80059e8 <MX_TIM5_Init+0xbc>)
 8005972:	f7fc fe57 	bl	8002624 <HAL_TIM_IC_Init>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d001      	beq.n	8005980 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800597c:	f7ff fc83 	bl	8005286 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005980:	2300      	movs	r3, #0
 8005982:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005984:	2300      	movs	r3, #0
 8005986:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005988:	f107 0314 	add.w	r3, r7, #20
 800598c:	4619      	mov	r1, r3
 800598e:	4816      	ldr	r0, [pc, #88]	; (80059e8 <MX_TIM5_Init+0xbc>)
 8005990:	f7fe f800 	bl	8003994 <HAL_TIMEx_MasterConfigSynchronization>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800599a:	f7ff fc74 	bl	8005286 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800599e:	2302      	movs	r3, #2
 80059a0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80059a2:	2301      	movs	r3, #1
 80059a4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80059a6:	2300      	movs	r3, #0
 80059a8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80059aa:	2300      	movs	r3, #0
 80059ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80059ae:	1d3b      	adds	r3, r7, #4
 80059b0:	2200      	movs	r2, #0
 80059b2:	4619      	mov	r1, r3
 80059b4:	480c      	ldr	r0, [pc, #48]	; (80059e8 <MX_TIM5_Init+0xbc>)
 80059b6:	f7fc fff0 	bl	800299a <HAL_TIM_IC_ConfigChannel>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80059c0:	f7ff fc61 	bl	8005286 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80059c4:	2300      	movs	r3, #0
 80059c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80059c8:	1d3b      	adds	r3, r7, #4
 80059ca:	2204      	movs	r2, #4
 80059cc:	4619      	mov	r1, r3
 80059ce:	4806      	ldr	r0, [pc, #24]	; (80059e8 <MX_TIM5_Init+0xbc>)
 80059d0:	f7fc ffe3 	bl	800299a <HAL_TIM_IC_ConfigChannel>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80059da:	f7ff fc54 	bl	8005286 <Error_Handler>
  }

}
 80059de:	bf00      	nop
 80059e0:	3720      	adds	r7, #32
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	200000f0 	.word	0x200000f0
 80059ec:	40000c00 	.word	0x40000c00
 80059f0:	0098967f 	.word	0x0098967f

080059f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a04:	d10c      	bne.n	8005a20 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005a06:	4a12      	ldr	r2, [pc, #72]	; (8005a50 <HAL_TIM_Base_MspInit+0x5c>)
 8005a08:	4b11      	ldr	r3, [pc, #68]	; (8005a50 <HAL_TIM_Base_MspInit+0x5c>)
 8005a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a0c:	f043 0301 	orr.w	r3, r3, #1
 8005a10:	6593      	str	r3, [r2, #88]	; 0x58
 8005a12:	4b0f      	ldr	r3, [pc, #60]	; (8005a50 <HAL_TIM_Base_MspInit+0x5c>)
 8005a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005a1e:	e010      	b.n	8005a42 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM4)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a0b      	ldr	r2, [pc, #44]	; (8005a54 <HAL_TIM_Base_MspInit+0x60>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d10b      	bne.n	8005a42 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005a2a:	4a09      	ldr	r2, [pc, #36]	; (8005a50 <HAL_TIM_Base_MspInit+0x5c>)
 8005a2c:	4b08      	ldr	r3, [pc, #32]	; (8005a50 <HAL_TIM_Base_MspInit+0x5c>)
 8005a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a30:	f043 0304 	orr.w	r3, r3, #4
 8005a34:	6593      	str	r3, [r2, #88]	; 0x58
 8005a36:	4b06      	ldr	r3, [pc, #24]	; (8005a50 <HAL_TIM_Base_MspInit+0x5c>)
 8005a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	60bb      	str	r3, [r7, #8]
 8005a40:	68bb      	ldr	r3, [r7, #8]
}
 8005a42:	bf00      	nop
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40021000 	.word	0x40021000
 8005a54:	40000800 	.word	0x40000800

08005a58 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08a      	sub	sp, #40	; 0x28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a60:	f107 0314 	add.w	r3, r7, #20
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]
 8005a68:	605a      	str	r2, [r3, #4]
 8005a6a:	609a      	str	r2, [r3, #8]
 8005a6c:	60da      	str	r2, [r3, #12]
 8005a6e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM5)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a1b      	ldr	r2, [pc, #108]	; (8005ae4 <HAL_TIM_IC_MspInit+0x8c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d130      	bne.n	8005adc <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005a7a:	4a1b      	ldr	r2, [pc, #108]	; (8005ae8 <HAL_TIM_IC_MspInit+0x90>)
 8005a7c:	4b1a      	ldr	r3, [pc, #104]	; (8005ae8 <HAL_TIM_IC_MspInit+0x90>)
 8005a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a80:	f043 0308 	orr.w	r3, r3, #8
 8005a84:	6593      	str	r3, [r2, #88]	; 0x58
 8005a86:	4b18      	ldr	r3, [pc, #96]	; (8005ae8 <HAL_TIM_IC_MspInit+0x90>)
 8005a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a8a:	f003 0308 	and.w	r3, r3, #8
 8005a8e:	613b      	str	r3, [r7, #16]
 8005a90:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a92:	4a15      	ldr	r2, [pc, #84]	; (8005ae8 <HAL_TIM_IC_MspInit+0x90>)
 8005a94:	4b14      	ldr	r3, [pc, #80]	; (8005ae8 <HAL_TIM_IC_MspInit+0x90>)
 8005a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a98:	f043 0301 	orr.w	r3, r3, #1
 8005a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a9e:	4b12      	ldr	r3, [pc, #72]	; (8005ae8 <HAL_TIM_IC_MspInit+0x90>)
 8005aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration    
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2 
    */
    GPIO_InitStruct.Pin = ENCODER_P_Pin|ENCODER_L_Pin;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aae:	2302      	movs	r3, #2
 8005ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005aba:	2302      	movs	r3, #2
 8005abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005abe:	f107 0314 	add.w	r3, r7, #20
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ac8:	f7fb f8a8 	bl	8000c1c <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005acc:	2200      	movs	r2, #0
 8005ace:	2100      	movs	r1, #0
 8005ad0:	2032      	movs	r0, #50	; 0x32
 8005ad2:	f7fa fe34 	bl	800073e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005ad6:	2032      	movs	r0, #50	; 0x32
 8005ad8:	f7fa fe4d 	bl	8000776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8005adc:	bf00      	nop
 8005ade:	3728      	adds	r7, #40	; 0x28
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	40000c00 	.word	0x40000c00
 8005ae8:	40021000 	.word	0x40021000

08005aec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b08a      	sub	sp, #40	; 0x28
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005af4:	f107 0314 	add.w	r3, r7, #20
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	605a      	str	r2, [r3, #4]
 8005afe:	609a      	str	r2, [r3, #8]
 8005b00:	60da      	str	r2, [r3, #12]
 8005b02:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0c:	d139      	bne.n	8005b82 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b0e:	4a2f      	ldr	r2, [pc, #188]	; (8005bcc <HAL_TIM_MspPostInit+0xe0>)
 8005b10:	4b2e      	ldr	r3, [pc, #184]	; (8005bcc <HAL_TIM_MspPostInit+0xe0>)
 8005b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b14:	f043 0301 	orr.w	r3, r3, #1
 8005b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b1a:	4b2c      	ldr	r3, [pc, #176]	; (8005bcc <HAL_TIM_MspPostInit+0xe0>)
 8005b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	613b      	str	r3, [r7, #16]
 8005b24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b26:	4a29      	ldr	r2, [pc, #164]	; (8005bcc <HAL_TIM_MspPostInit+0xe0>)
 8005b28:	4b28      	ldr	r3, [pc, #160]	; (8005bcc <HAL_TIM_MspPostInit+0xe0>)
 8005b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b2c:	f043 0302 	orr.w	r3, r3, #2
 8005b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b32:	4b26      	ldr	r3, [pc, #152]	; (8005bcc <HAL_TIM_MspPostInit+0xe0>)
 8005b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	60fb      	str	r3, [r7, #12]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = DO_PRZODU_Pin;
 8005b3e:	2320      	movs	r3, #32
 8005b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b42:	2302      	movs	r3, #2
 8005b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005b46:	2302      	movs	r3, #2
 8005b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DO_PRZODU_GPIO_Port, &GPIO_InitStruct);
 8005b52:	f107 0314 	add.w	r3, r7, #20
 8005b56:	4619      	mov	r1, r3
 8005b58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b5c:	f7fb f85e 	bl	8000c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DO_TYLU_Pin;
 8005b60:	2308      	movs	r3, #8
 8005b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b64:	2302      	movs	r3, #2
 8005b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005b68:	2302      	movs	r3, #2
 8005b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005b70:	2301      	movs	r3, #1
 8005b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DO_TYLU_GPIO_Port, &GPIO_InitStruct);
 8005b74:	f107 0314 	add.w	r3, r7, #20
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4815      	ldr	r0, [pc, #84]	; (8005bd0 <HAL_TIM_MspPostInit+0xe4>)
 8005b7c:	f7fb f84e 	bl	8000c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005b80:	e020      	b.n	8005bc4 <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM4)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a13      	ldr	r2, [pc, #76]	; (8005bd4 <HAL_TIM_MspPostInit+0xe8>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d11b      	bne.n	8005bc4 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b8c:	4a0f      	ldr	r2, [pc, #60]	; (8005bcc <HAL_TIM_MspPostInit+0xe0>)
 8005b8e:	4b0f      	ldr	r3, [pc, #60]	; (8005bcc <HAL_TIM_MspPostInit+0xe0>)
 8005b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b92:	f043 0302 	orr.w	r3, r3, #2
 8005b96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b98:	4b0c      	ldr	r3, [pc, #48]	; (8005bcc <HAL_TIM_MspPostInit+0xe0>)
 8005b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	60bb      	str	r3, [r7, #8]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005ba4:	2340      	movs	r3, #64	; 0x40
 8005ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ba8:	2302      	movs	r3, #2
 8005baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005bac:	2301      	movs	r3, #1
 8005bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bb8:	f107 0314 	add.w	r3, r7, #20
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	4804      	ldr	r0, [pc, #16]	; (8005bd0 <HAL_TIM_MspPostInit+0xe4>)
 8005bc0:	f7fb f82c 	bl	8000c1c <HAL_GPIO_Init>
}
 8005bc4:	bf00      	nop
 8005bc6:	3728      	adds	r7, #40	; 0x28
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	48000400 	.word	0x48000400
 8005bd4:	40000800 	.word	0x40000800

08005bd8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8005bdc:	4b14      	ldr	r3, [pc, #80]	; (8005c30 <MX_USART2_UART_Init+0x58>)
 8005bde:	4a15      	ldr	r2, [pc, #84]	; (8005c34 <MX_USART2_UART_Init+0x5c>)
 8005be0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005be2:	4b13      	ldr	r3, [pc, #76]	; (8005c30 <MX_USART2_UART_Init+0x58>)
 8005be4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005be8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005bea:	4b11      	ldr	r3, [pc, #68]	; (8005c30 <MX_USART2_UART_Init+0x58>)
 8005bec:	2200      	movs	r2, #0
 8005bee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005bf0:	4b0f      	ldr	r3, [pc, #60]	; (8005c30 <MX_USART2_UART_Init+0x58>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005bf6:	4b0e      	ldr	r3, [pc, #56]	; (8005c30 <MX_USART2_UART_Init+0x58>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005bfc:	4b0c      	ldr	r3, [pc, #48]	; (8005c30 <MX_USART2_UART_Init+0x58>)
 8005bfe:	220c      	movs	r2, #12
 8005c00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c02:	4b0b      	ldr	r3, [pc, #44]	; (8005c30 <MX_USART2_UART_Init+0x58>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c08:	4b09      	ldr	r3, [pc, #36]	; (8005c30 <MX_USART2_UART_Init+0x58>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c0e:	4b08      	ldr	r3, [pc, #32]	; (8005c30 <MX_USART2_UART_Init+0x58>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c14:	4b06      	ldr	r3, [pc, #24]	; (8005c30 <MX_USART2_UART_Init+0x58>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005c1a:	4805      	ldr	r0, [pc, #20]	; (8005c30 <MX_USART2_UART_Init+0x58>)
 8005c1c:	f7fd ff34 	bl	8003a88 <HAL_UART_Init>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8005c26:	f7ff fb2e 	bl	8005286 <Error_Handler>
  }

}
 8005c2a:	bf00      	nop
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	20000200 	.word	0x20000200
 8005c34:	40004400 	.word	0x40004400

08005c38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08a      	sub	sp, #40	; 0x28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c40:	f107 0314 	add.w	r3, r7, #20
 8005c44:	2200      	movs	r2, #0
 8005c46:	601a      	str	r2, [r3, #0]
 8005c48:	605a      	str	r2, [r3, #4]
 8005c4a:	609a      	str	r2, [r3, #8]
 8005c4c:	60da      	str	r2, [r3, #12]
 8005c4e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a45      	ldr	r2, [pc, #276]	; (8005d6c <HAL_UART_MspInit+0x134>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	f040 8083 	bne.w	8005d62 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005c5c:	4a44      	ldr	r2, [pc, #272]	; (8005d70 <HAL_UART_MspInit+0x138>)
 8005c5e:	4b44      	ldr	r3, [pc, #272]	; (8005d70 <HAL_UART_MspInit+0x138>)
 8005c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c66:	6593      	str	r3, [r2, #88]	; 0x58
 8005c68:	4b41      	ldr	r3, [pc, #260]	; (8005d70 <HAL_UART_MspInit+0x138>)
 8005c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c70:	613b      	str	r3, [r7, #16]
 8005c72:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c74:	4a3e      	ldr	r2, [pc, #248]	; (8005d70 <HAL_UART_MspInit+0x138>)
 8005c76:	4b3e      	ldr	r3, [pc, #248]	; (8005d70 <HAL_UART_MspInit+0x138>)
 8005c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c7a:	f043 0301 	orr.w	r3, r3, #1
 8005c7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c80:	4b3b      	ldr	r3, [pc, #236]	; (8005d70 <HAL_UART_MspInit+0x138>)
 8005c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005c8c:	230c      	movs	r3, #12
 8005c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c90:	2302      	movs	r3, #2
 8005c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c94:	2301      	movs	r3, #1
 8005c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005c9c:	2307      	movs	r3, #7
 8005c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ca0:	f107 0314 	add.w	r3, r7, #20
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005caa:	f7fa ffb7 	bl	8000c1c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8005cae:	4b31      	ldr	r3, [pc, #196]	; (8005d74 <HAL_UART_MspInit+0x13c>)
 8005cb0:	4a31      	ldr	r2, [pc, #196]	; (8005d78 <HAL_UART_MspInit+0x140>)
 8005cb2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8005cb4:	4b2f      	ldr	r3, [pc, #188]	; (8005d74 <HAL_UART_MspInit+0x13c>)
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005cba:	4b2e      	ldr	r3, [pc, #184]	; (8005d74 <HAL_UART_MspInit+0x13c>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005cc0:	4b2c      	ldr	r3, [pc, #176]	; (8005d74 <HAL_UART_MspInit+0x13c>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005cc6:	4b2b      	ldr	r3, [pc, #172]	; (8005d74 <HAL_UART_MspInit+0x13c>)
 8005cc8:	2280      	movs	r2, #128	; 0x80
 8005cca:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ccc:	4b29      	ldr	r3, [pc, #164]	; (8005d74 <HAL_UART_MspInit+0x13c>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005cd2:	4b28      	ldr	r3, [pc, #160]	; (8005d74 <HAL_UART_MspInit+0x13c>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005cd8:	4b26      	ldr	r3, [pc, #152]	; (8005d74 <HAL_UART_MspInit+0x13c>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005cde:	4b25      	ldr	r3, [pc, #148]	; (8005d74 <HAL_UART_MspInit+0x13c>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005ce4:	4823      	ldr	r0, [pc, #140]	; (8005d74 <HAL_UART_MspInit+0x13c>)
 8005ce6:	f7fa fd61 	bl	80007ac <HAL_DMA_Init>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 8005cf0:	f7ff fac9 	bl	8005286 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a1f      	ldr	r2, [pc, #124]	; (8005d74 <HAL_UART_MspInit+0x13c>)
 8005cf8:	66da      	str	r2, [r3, #108]	; 0x6c
 8005cfa:	4a1e      	ldr	r2, [pc, #120]	; (8005d74 <HAL_UART_MspInit+0x13c>)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8005d00:	4b1e      	ldr	r3, [pc, #120]	; (8005d7c <HAL_UART_MspInit+0x144>)
 8005d02:	4a1f      	ldr	r2, [pc, #124]	; (8005d80 <HAL_UART_MspInit+0x148>)
 8005d04:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8005d06:	4b1d      	ldr	r3, [pc, #116]	; (8005d7c <HAL_UART_MspInit+0x144>)
 8005d08:	2202      	movs	r2, #2
 8005d0a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005d0c:	4b1b      	ldr	r3, [pc, #108]	; (8005d7c <HAL_UART_MspInit+0x144>)
 8005d0e:	2210      	movs	r2, #16
 8005d10:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d12:	4b1a      	ldr	r3, [pc, #104]	; (8005d7c <HAL_UART_MspInit+0x144>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005d18:	4b18      	ldr	r3, [pc, #96]	; (8005d7c <HAL_UART_MspInit+0x144>)
 8005d1a:	2280      	movs	r2, #128	; 0x80
 8005d1c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d1e:	4b17      	ldr	r3, [pc, #92]	; (8005d7c <HAL_UART_MspInit+0x144>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d24:	4b15      	ldr	r3, [pc, #84]	; (8005d7c <HAL_UART_MspInit+0x144>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005d2a:	4b14      	ldr	r3, [pc, #80]	; (8005d7c <HAL_UART_MspInit+0x144>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005d30:	4b12      	ldr	r3, [pc, #72]	; (8005d7c <HAL_UART_MspInit+0x144>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005d36:	4811      	ldr	r0, [pc, #68]	; (8005d7c <HAL_UART_MspInit+0x144>)
 8005d38:	f7fa fd38 	bl	80007ac <HAL_DMA_Init>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8005d42:	f7ff faa0 	bl	8005286 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a0c      	ldr	r2, [pc, #48]	; (8005d7c <HAL_UART_MspInit+0x144>)
 8005d4a:	669a      	str	r2, [r3, #104]	; 0x68
 8005d4c:	4a0b      	ldr	r2, [pc, #44]	; (8005d7c <HAL_UART_MspInit+0x144>)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005d52:	2200      	movs	r2, #0
 8005d54:	2100      	movs	r1, #0
 8005d56:	2026      	movs	r0, #38	; 0x26
 8005d58:	f7fa fcf1 	bl	800073e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005d5c:	2026      	movs	r0, #38	; 0x26
 8005d5e:	f7fa fd0a 	bl	8000776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005d62:	bf00      	nop
 8005d64:	3728      	adds	r7, #40	; 0x28
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	40004400 	.word	0x40004400
 8005d70:	40021000 	.word	0x40021000
 8005d74:	20000170 	.word	0x20000170
 8005d78:	4002006c 	.word	0x4002006c
 8005d7c:	200001b8 	.word	0x200001b8
 8005d80:	40020080 	.word	0x40020080

08005d84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005dbc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005d88:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005d8a:	e003      	b.n	8005d94 <LoopCopyDataInit>

08005d8c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005d8c:	4b0c      	ldr	r3, [pc, #48]	; (8005dc0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005d8e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005d90:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005d92:	3104      	adds	r1, #4

08005d94 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005d94:	480b      	ldr	r0, [pc, #44]	; (8005dc4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005d96:	4b0c      	ldr	r3, [pc, #48]	; (8005dc8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005d98:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005d9a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005d9c:	d3f6      	bcc.n	8005d8c <CopyDataInit>
	ldr	r2, =_sbss
 8005d9e:	4a0b      	ldr	r2, [pc, #44]	; (8005dcc <LoopForever+0x12>)
	b	LoopFillZerobss
 8005da0:	e002      	b.n	8005da8 <LoopFillZerobss>

08005da2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005da2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005da4:	f842 3b04 	str.w	r3, [r2], #4

08005da8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005da8:	4b09      	ldr	r3, [pc, #36]	; (8005dd0 <LoopForever+0x16>)
	cmp	r2, r3
 8005daa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005dac:	d3f9      	bcc.n	8005da2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005dae:	f7ff fc8d 	bl	80056cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005db2:	f000 f811 	bl	8005dd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005db6:	f7ff f955 	bl	8005064 <main>

08005dba <LoopForever>:

LoopForever:
    b LoopForever
 8005dba:	e7fe      	b.n	8005dba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005dbc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8005dc0:	08005ea0 	.word	0x08005ea0
	ldr	r0, =_sdata
 8005dc4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005dc8:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8005dcc:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8005dd0:	20000278 	.word	0x20000278

08005dd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005dd4:	e7fe      	b.n	8005dd4 <ADC1_2_IRQHandler>
	...

08005dd8 <__libc_init_array>:
 8005dd8:	b570      	push	{r4, r5, r6, lr}
 8005dda:	4e0d      	ldr	r6, [pc, #52]	; (8005e10 <__libc_init_array+0x38>)
 8005ddc:	4c0d      	ldr	r4, [pc, #52]	; (8005e14 <__libc_init_array+0x3c>)
 8005dde:	1ba4      	subs	r4, r4, r6
 8005de0:	10a4      	asrs	r4, r4, #2
 8005de2:	2500      	movs	r5, #0
 8005de4:	42a5      	cmp	r5, r4
 8005de6:	d109      	bne.n	8005dfc <__libc_init_array+0x24>
 8005de8:	4e0b      	ldr	r6, [pc, #44]	; (8005e18 <__libc_init_array+0x40>)
 8005dea:	4c0c      	ldr	r4, [pc, #48]	; (8005e1c <__libc_init_array+0x44>)
 8005dec:	f000 f820 	bl	8005e30 <_init>
 8005df0:	1ba4      	subs	r4, r4, r6
 8005df2:	10a4      	asrs	r4, r4, #2
 8005df4:	2500      	movs	r5, #0
 8005df6:	42a5      	cmp	r5, r4
 8005df8:	d105      	bne.n	8005e06 <__libc_init_array+0x2e>
 8005dfa:	bd70      	pop	{r4, r5, r6, pc}
 8005dfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e00:	4798      	blx	r3
 8005e02:	3501      	adds	r5, #1
 8005e04:	e7ee      	b.n	8005de4 <__libc_init_array+0xc>
 8005e06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e0a:	4798      	blx	r3
 8005e0c:	3501      	adds	r5, #1
 8005e0e:	e7f2      	b.n	8005df6 <__libc_init_array+0x1e>
 8005e10:	08005e98 	.word	0x08005e98
 8005e14:	08005e98 	.word	0x08005e98
 8005e18:	08005e98 	.word	0x08005e98
 8005e1c:	08005e9c 	.word	0x08005e9c

08005e20 <memset>:
 8005e20:	4402      	add	r2, r0
 8005e22:	4603      	mov	r3, r0
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d100      	bne.n	8005e2a <memset+0xa>
 8005e28:	4770      	bx	lr
 8005e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e2e:	e7f9      	b.n	8005e24 <memset+0x4>

08005e30 <_init>:
 8005e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e32:	bf00      	nop
 8005e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e36:	bc08      	pop	{r3}
 8005e38:	469e      	mov	lr, r3
 8005e3a:	4770      	bx	lr

08005e3c <_fini>:
 8005e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3e:	bf00      	nop
 8005e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e42:	bc08      	pop	{r3}
 8005e44:	469e      	mov	lr, r3
 8005e46:	4770      	bx	lr
